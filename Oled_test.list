
Oled_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000179c  08009f70  08009f70  0000af70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b70c  0800b70c  0000d1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b70c  0800b70c  0000c70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b714  0800b714  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b714  0800b714  0000c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b718  0800b718  0000c718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b71c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001dc  0800b8f8  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  0800b8f8  0000d894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011243  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2e  00000000  00000000  0001e44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00021080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  00022110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002517f  00000000  00000000  00022de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016389  00000000  00000000  00047f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dff6b  00000000  00000000  0005e2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e4  00000000  00000000  0013e2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00143c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f54 	.word	0x08009f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009f54 	.word	0x08009f54

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c0:	f001 f9d4 	bl	800246c <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 fb9f 	bl	800180c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e0:	f001 fca0 	bl	8002a24 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 fb8f 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <HAL_ADC_MspInit+0x8c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12f      	bne.n	8001186 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_ADC_MspInit+0x90>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <HAL_ADC_MspInit+0x94>)
 8001172:	f001 ffa1 	bl	80030b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2012      	movs	r0, #18
 800117c:	f001 ff65 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001180:	2012      	movs	r0, #18
 8001182:	f001 ff7e 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40012000 	.word	0x40012000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <MX_GPIO_Init+0x8c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001206:	2320      	movs	r3, #32
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <MX_GPIO_Init+0x90>)
 800121a:	f001 ff4d 	bl	80030b8 <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f002 f8b7 	bl	80033e0 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fac8 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000240 	.word	0x20000240
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_I2C_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <HAL_I2C_MspInit+0x8c>)
 80012e8:	f001 fee6 	bl	80030b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400
 800131c:	00000000 	.word	0x00000000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a6      	sub	sp, #152	@ 0x98
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f001 f80b 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 fa0f 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f7ff ff35 	bl	800119c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001332:	f7ff ff7d 	bl	8001230 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001336:	f000 fe7f 	bl	8002038 <MX_TIM3_Init>
  MX_ADC1_Init();
 800133a:	f7ff fe91 	bl	8001060 <MX_ADC1_Init>
  MX_TIM4_Init();
 800133e:	f000 fecf 	bl	80020e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001342:	213c      	movs	r1, #60	@ 0x3c
 8001344:	48aa      	ldr	r0, [pc, #680]	@ (80015f0 <main+0x2d0>)
 8001346:	f003 fd23 	bl	8004d90 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800134a:	2100      	movs	r1, #0
 800134c:	48a9      	ldr	r0, [pc, #676]	@ (80015f4 <main+0x2d4>)
 800134e:	f003 fbb1 	bl	8004ab4 <HAL_TIM_PWM_Start>
  SSD1306_Init();
 8001352:	f000 fa61 	bl	8001818 <SSD1306_Init>
  uint16_t adc_value;
  char msg[32] ={'0','0','0'};
 8001356:	4ba8      	ldr	r3, [pc, #672]	@ (80015f8 <main+0x2d8>)
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
 800135a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	619a      	str	r2, [r3, #24]
  char msg2[32] ={'0','0','0'};
 800136e:	4ba2      	ldr	r3, [pc, #648]	@ (80015f8 <main+0x2d8>)
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]
  uint16_t y = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
  float temp;
  float Kp= 16.5;
 800138c:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <main+0x2dc>)
 800138e:	677b      	str	r3, [r7, #116]	@ 0x74
  float Ki= 1.76;
 8001390:	4b9b      	ldr	r3, [pc, #620]	@ (8001600 <main+0x2e0>)
 8001392:	673b      	str	r3, [r7, #112]	@ 0x70
  float Kd= 9.84;
 8001394:	4b9b      	ldr	r3, [pc, #620]	@ (8001604 <main+0x2e4>)
 8001396:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float integral=0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  float last_error=0;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t last_pid_time=0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  float output=0;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  float temp_raw=0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  float temp1=0;
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  float alpha=0.1f;
 80013c2:	4b91      	ldr	r3, [pc, #580]	@ (8001608 <main+0x2e8>)
 80013c4:	667b      	str	r3, [r7, #100]	@ 0x64
  static float derivative_filtered = 0;
  float smooth_temp=0;
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80013cc:	4b88      	ldr	r3, [pc, #544]	@ (80015f0 <main+0x2d0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

    int set_temp = y;
 80013d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80013da:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t now = HAL_GetTick();
 80013dc:	f001 f816 	bl	800240c <HAL_GetTick>
 80013e0:	6578      	str	r0, [r7, #84]	@ 0x54
    float dt = (now - last_pid_time)/1000.0f;
 80013e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f2:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800160c <main+0x2ec>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    if(dt>=0.02f){
 80013fe:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001402:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001610 <main+0x2f0>
 8001406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	f2c0 80b9 	blt.w	8001584 <main+0x264>
    	last_pid_time=now;
 8001412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        float error = (set_temp - temp);
 8001418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001422:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        if (output < 100.0f && output > 0.0f)
 800142e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001432:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001614 <main+0x2f4>
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d512      	bpl.n	8001466 <main+0x146>
 8001440:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	dd0b      	ble.n	8001466 <main+0x146>
        	integral += error*dt;
 800144e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001452:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800145e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001462:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        if (error < -2.0f)
 8001466:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800146a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d503      	bpl.n	8001480 <main+0x160>
        	integral = 0;
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        float derivative = (error - last_error)/dt;
 8001480:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001484:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001488:	ee77 6a67 	vsub.f32	s13, s14, s15
 800148c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001494:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        derivative_filtered = alpha * derivative + (1-alpha) * derivative_filtered;
 8001498:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800149c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80014a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80014ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014b0:	4b59      	ldr	r3, [pc, #356]	@ (8001618 <main+0x2f8>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014be:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <main+0x2f8>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]
        last_error = error;
 80014c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        output = Kp*error + Ki*integral + Kd*derivative_filtered;
 80014ca:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014ce:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80014da:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80014de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <main+0x2f8>)
 80014e8:	edd3 6a00 	vldr	s13, [r3]
 80014ec:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

       /* float derivative =(error - last_error)/dt;
        last_error=error;
        output = Kp*error + Ki*integral + Kd*derivative;*/
        if(output<0) output=0;
 80014fc:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d503      	bpl.n	8001512 <main+0x1f2>
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if(output>100) output=100;
 8001512:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001516:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001614 <main+0x2f4>
 800151a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	dd02      	ble.n	800152a <main+0x20a>
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <main+0x2fc>)
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if (integral > 500) integral = 500;
 800152a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800152e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001620 <main+0x300>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd02      	ble.n	8001542 <main+0x222>
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <main+0x304>)
 800153e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        if (integral < -500) integral = -500;
 8001542:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001546:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001628 <main+0x308>
 800154a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d502      	bpl.n	800155a <main+0x23a>
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <main+0x30c>)
 8001556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        if(temp<50 && output > 50) output=50;
 800155a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800155e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001630 <main+0x310>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d50b      	bpl.n	8001584 <main+0x264>
 800156c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001570:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001630 <main+0x310>
 8001574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd02      	ble.n	8001584 <main+0x264>
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <main+0x314>)
 8001580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    }
    if(encoder_value%4 == 0){
 8001584:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d112      	bne.n	80015b8 <main+0x298>
    y = (encoder_value*1.25);
 8001592:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffe4 	bl	8000564 <__aeabi_i2d>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <main+0x318>)
 80015a2:	f7ff f849 	bl	8000638 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fb1b 	bl	8000be8 <__aeabi_d2uiz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    }
    	SSD1306_Fill (0);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fa23 	bl	8001a04 <SSD1306_Fill>
    	sprintf(msg, "set:%d", y);
 80015be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	491d      	ldr	r1, [pc, #116]	@ (800163c <main+0x31c>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 f885 	bl	80066d8 <siprintf>
    	SSD1306_GotoXY(5, 10);
 80015ce:	210a      	movs	r1, #10
 80015d0:	2005      	movs	r0, #5
 80015d2:	f000 fa99 	bl	8001b08 <SSD1306_GotoXY>
    	SSD1306_Puts(msg, &Font_16x26, 1);
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	2201      	movs	r2, #1
 80015dc:	4918      	ldr	r1, [pc, #96]	@ (8001640 <main+0x320>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb26 	bl	8001c30 <SSD1306_Puts>
    	temp_raw=0;
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    	for(int i=0;i<10;i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015ee:	e060      	b.n	80016b2 <main+0x392>
 80015f0:	200006b4 	.word	0x200006b4
 80015f4:	200006fc 	.word	0x200006fc
 80015f8:	00303030 	.word	0x00303030
 80015fc:	41840000 	.word	0x41840000
 8001600:	3fe147ae 	.word	0x3fe147ae
 8001604:	411d70a4 	.word	0x411d70a4
 8001608:	3dcccccd 	.word	0x3dcccccd
 800160c:	447a0000 	.word	0x447a0000
 8001610:	3ca3d70a 	.word	0x3ca3d70a
 8001614:	42c80000 	.word	0x42c80000
 8001618:	20000294 	.word	0x20000294
 800161c:	42c80000 	.word	0x42c80000
 8001620:	43fa0000 	.word	0x43fa0000
 8001624:	43fa0000 	.word	0x43fa0000
 8001628:	c3fa0000 	.word	0xc3fa0000
 800162c:	c3fa0000 	.word	0xc3fa0000
 8001630:	42480000 	.word	0x42480000
 8001634:	42480000 	.word	0x42480000
 8001638:	3ff40000 	.word	0x3ff40000
 800163c:	08009f70 	.word	0x08009f70
 8001640:	20000000 	.word	0x20000000
        HAL_ADC_Start(&hadc1);
 8001644:	483a      	ldr	r0, [pc, #232]	@ (8001730 <main+0x410>)
 8001646:	f000 ff55 	bl	80024f4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800164a:	f04f 31ff 	mov.w	r1, #4294967295
 800164e:	4838      	ldr	r0, [pc, #224]	@ (8001730 <main+0x410>)
 8001650:	f001 f822 	bl	8002698 <HAL_ADC_PollForConversion>
    	adc_value = HAL_ADC_GetValue(&hadc1);
 8001654:	4836      	ldr	r0, [pc, #216]	@ (8001730 <main+0x410>)
 8001656:	f001 f9ba 	bl	80029ce <HAL_ADC_GetValue>
 800165a:	4603      	mov	r3, r0
 800165c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    	temp1=(adc_value/5.567f)-165.87;
 8001660:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001734 <main+0x414>
 8001670:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001674:	ee16 0a90 	vmov	r0, s13
 8001678:	f7fe ff86 	bl	8000588 <__aeabi_f2d>
 800167c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001728 <main+0x408>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fe21 	bl	80002c8 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff facb 	bl	8000c28 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
    	temp_raw+=temp1;
 8001696:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800169a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    	HAL_Delay(5);
 80016a6:	2005      	movs	r0, #5
 80016a8:	f000 febc 	bl	8002424 <HAL_Delay>
    	for(int i=0;i<10;i++){
 80016ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016ae:	3301      	adds	r3, #1
 80016b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	ddc5      	ble.n	8001644 <main+0x324>
    	}
    	//smooth_temp=alpha*temp_raw+(1-alpha)*smooth_temp;
    	//temp=smooth_temp;
    	temp=temp_raw/10;
 80016b8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80016bc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

    	uint16_t pwm_value = (10000-(output*100));
 80016c8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80016cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001738 <main+0x418>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800173c <main+0x41c>
 80016d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <main+0x420>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80016f0:	635a      	str	r2, [r3, #52]	@ 0x34
    	sprintf(msg2, "%0.1fC",temp);
 80016f2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80016f6:	f7fe ff47 	bl	8000588 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	1d38      	adds	r0, r7, #4
 8001700:	4910      	ldr	r1, [pc, #64]	@ (8001744 <main+0x424>)
 8001702:	f004 ffe9 	bl	80066d8 <siprintf>
    	SSD1306_GotoXY(5,35);
 8001706:	2123      	movs	r1, #35	@ 0x23
 8001708:	2005      	movs	r0, #5
 800170a:	f000 f9fd 	bl	8001b08 <SSD1306_GotoXY>
    	SSD1306_Puts(msg2,&Font_16x26, 1);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2201      	movs	r2, #1
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <main+0x428>)
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fa8b 	bl	8001c30 <SSD1306_Puts>


    SSD1306_UpdateScreen();
 800171a:	f000 f941 	bl	80019a0 <SSD1306_UpdateScreen>
    HAL_Delay(50);
 800171e:	2032      	movs	r0, #50	@ 0x32
 8001720:	f000 fe80 	bl	8002424 <HAL_Delay>
  {
 8001724:	e652      	b.n	80013cc <main+0xac>
 8001726:	bf00      	nop
 8001728:	0a3d70a4 	.word	0x0a3d70a4
 800172c:	4064bbd7 	.word	0x4064bbd7
 8001730:	200001f8 	.word	0x200001f8
 8001734:	40b224dd 	.word	0x40b224dd
 8001738:	42c80000 	.word	0x42c80000
 800173c:	461c4000 	.word	0x461c4000
 8001740:	200006fc 	.word	0x200006fc
 8001744:	08009f78 	.word	0x08009f78
 8001748:	20000000 	.word	0x20000000

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	@ 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2234      	movs	r2, #52	@ 0x34
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 f821 	bl	80067a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <SystemClock_Config+0xb8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	4a22      	ldr	r2, [pc, #136]	@ (8001804 <SystemClock_Config+0xb8>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <SystemClock_Config+0xb8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800178c:	2300      	movs	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <SystemClock_Config+0xbc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <SystemClock_Config+0xbc>)
 800179a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <SystemClock_Config+0xbc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fe89 	bl	80044d8 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017cc:	f000 f81e 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fbc4 	bl	8003f78 <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017f6:	f000 f809 	bl	800180c <Error_Handler>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3750      	adds	r7, #80	@ 0x50
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800181e:	f000 fa2d 	bl	8001c7c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001822:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001826:	2201      	movs	r2, #1
 8001828:	2178      	movs	r1, #120	@ 0x78
 800182a:	485b      	ldr	r0, [pc, #364]	@ (8001998 <SSD1306_Init+0x180>)
 800182c:	f002 f81a 	bl	8003864 <HAL_I2C_IsDeviceReady>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e0a9      	b.n	800198e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800183a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800183e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001840:	e002      	b.n	8001848 <SSD1306_Init+0x30>
		p--;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3b01      	subs	r3, #1
 8001846:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800184e:	22ae      	movs	r2, #174	@ 0xae
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	@ 0x78
 8001854:	f000 fa8e 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001858:	2220      	movs	r2, #32
 800185a:	2100      	movs	r1, #0
 800185c:	2078      	movs	r0, #120	@ 0x78
 800185e:	f000 fa89 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001862:	2210      	movs	r2, #16
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	@ 0x78
 8001868:	f000 fa84 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800186c:	22b0      	movs	r2, #176	@ 0xb0
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	@ 0x78
 8001872:	f000 fa7f 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001876:	22c8      	movs	r2, #200	@ 0xc8
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	@ 0x78
 800187c:	f000 fa7a 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	@ 0x78
 8001886:	f000 fa75 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800188a:	2210      	movs	r2, #16
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	@ 0x78
 8001890:	f000 fa70 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	@ 0x78
 800189a:	f000 fa6b 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800189e:	2281      	movs	r2, #129	@ 0x81
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	@ 0x78
 80018a4:	f000 fa66 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018a8:	22ff      	movs	r2, #255	@ 0xff
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	@ 0x78
 80018ae:	f000 fa61 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018b2:	22a1      	movs	r2, #161	@ 0xa1
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 fa5c 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018bc:	22a6      	movs	r2, #166	@ 0xa6
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	@ 0x78
 80018c2:	f000 fa57 	bl	8001d74 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018c6:	22a8      	movs	r2, #168	@ 0xa8
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	@ 0x78
 80018cc:	f000 fa52 	bl	8001d74 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80018d0:	223f      	movs	r2, #63	@ 0x3f
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	@ 0x78
 80018d6:	f000 fa4d 	bl	8001d74 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018da:	22a4      	movs	r2, #164	@ 0xa4
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	@ 0x78
 80018e0:	f000 fa48 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018e4:	22d3      	movs	r2, #211	@ 0xd3
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	@ 0x78
 80018ea:	f000 fa43 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	@ 0x78
 80018f4:	f000 fa3e 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80018f8:	22d5      	movs	r2, #213	@ 0xd5
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	@ 0x78
 80018fe:	f000 fa39 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001902:	22f0      	movs	r2, #240	@ 0xf0
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	@ 0x78
 8001908:	f000 fa34 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800190c:	22d9      	movs	r2, #217	@ 0xd9
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	@ 0x78
 8001912:	f000 fa2f 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001916:	2222      	movs	r2, #34	@ 0x22
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	@ 0x78
 800191c:	f000 fa2a 	bl	8001d74 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001920:	22da      	movs	r2, #218	@ 0xda
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	@ 0x78
 8001926:	f000 fa25 	bl	8001d74 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800192a:	2212      	movs	r2, #18
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	@ 0x78
 8001930:	f000 fa20 	bl	8001d74 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001934:	22db      	movs	r2, #219	@ 0xdb
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	@ 0x78
 800193a:	f000 fa1b 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800193e:	2220      	movs	r2, #32
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	@ 0x78
 8001944:	f000 fa16 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001948:	228d      	movs	r2, #141	@ 0x8d
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	@ 0x78
 800194e:	f000 fa11 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001952:	2214      	movs	r2, #20
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	@ 0x78
 8001958:	f000 fa0c 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800195c:	22af      	movs	r2, #175	@ 0xaf
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	@ 0x78
 8001962:	f000 fa07 	bl	8001d74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001966:	222e      	movs	r2, #46	@ 0x2e
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	@ 0x78
 800196c:	f000 fa02 	bl	8001d74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f847 	bl	8001a04 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001976:	f000 f813 	bl	80019a0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <SSD1306_Init+0x184>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SSD1306_Init+0x184>)
 8001982:	2200      	movs	r2, #0
 8001984:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <SSD1306_Init+0x184>)
 8001988:	2201      	movs	r2, #1
 800198a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000240 	.word	0x20000240
 800199c:	200006a8 	.word	0x200006a8

080019a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e021      	b.n	80019f0 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	3b50      	subs	r3, #80	@ 0x50
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	2078      	movs	r0, #120	@ 0x78
 80019b8:	f000 f9dc 	bl	8001d74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2078      	movs	r0, #120	@ 0x78
 80019c2:	f000 f9d7 	bl	8001d74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019c6:	2210      	movs	r2, #16
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	@ 0x78
 80019cc:	f000 f9d2 	bl	8001d74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	4613      	mov	r3, r2
 80019d4:	019b      	lsls	r3, r3, #6
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <SSD1306_UpdateScreen+0x60>)
 80019de:	441a      	add	r2, r3
 80019e0:	2382      	movs	r3, #130	@ 0x82
 80019e2:	2140      	movs	r1, #64	@ 0x40
 80019e4:	2078      	movs	r0, #120	@ 0x78
 80019e6:	f000 f95f 	bl	8001ca8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	3301      	adds	r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b07      	cmp	r3, #7
 80019f4:	d9da      	bls.n	80019ac <SSD1306_UpdateScreen+0xc>
	}
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000298 	.word	0x20000298

08001a04 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <SSD1306_Fill+0x14>
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <SSD1306_Fill+0x16>
 8001a18:	23ff      	movs	r3, #255	@ 0xff
 8001a1a:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <SSD1306_Fill+0x2c>)
 8001a22:	f004 febe 	bl	80067a2 <memset>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000298 	.word	0x20000298

08001a34 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a34:	b490      	push	{r4, r7}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	70fb      	strb	r3, [r7, #3]
	if (
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b81      	cmp	r3, #129	@ 0x81
 8001a4a:	d854      	bhi.n	8001af6 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a50:	d851      	bhi.n	8001af6 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <SSD1306_DrawPixel+0xcc>)
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d120      	bne.n	8001ab0 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	b298      	uxth	r0, r3
 8001a76:	4601      	mov	r1, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	019b      	lsls	r3, r3, #6
 8001a7c:	440b      	add	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <SSD1306_DrawPixel+0xd0>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b25c      	sxtb	r4, r3
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2e1      	uxtb	r1, r4
 8001aaa:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <SSD1306_DrawPixel+0xd0>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e023      	b.n	8001af8 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4601      	mov	r1, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	440b      	add	r3, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <SSD1306_DrawPixel+0xd0>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	b25a      	sxtb	r2, r3
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	b25c      	sxtb	r4, r3
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	019b      	lsls	r3, r3, #6
 8001ae8:	440b      	add	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	b2e1      	uxtb	r1, r4
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <SSD1306_DrawPixel+0xd0>)
 8001af2:	54d1      	strb	r1, [r2, r3]
 8001af4:	e000      	b.n	8001af8 <SSD1306_DrawPixel+0xc4>
		return;
 8001af6:	bf00      	nop
	}
}
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc90      	pop	{r4, r7}
 8001afe:	4770      	bx	lr
 8001b00:	200006a8 	.word	0x200006a8
 8001b04:	20000298 	.word	0x20000298

08001b08 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	80fb      	strh	r3, [r7, #6]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b18:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <SSD1306_GotoXY+0x28>)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <SSD1306_GotoXY+0x28>)
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	8053      	strh	r3, [r2, #2]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	200006a8 	.word	0x200006a8

08001b34 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b44:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
	if (
 8001b50:	2b81      	cmp	r3, #129	@ 0x81
 8001b52:	dc07      	bgt.n	8001b64 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b54:	4b35      	ldr	r3, [pc, #212]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b62:	dd01      	ble.n	8001b68 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e05d      	b.n	8001c24 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e04b      	b.n	8001c06 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	3b20      	subs	r3, #32
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	7849      	ldrb	r1, [r1, #1]
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	440b      	add	r3, r1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e030      	b.n	8001bf4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d010      	beq.n	8001bc4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b298      	uxth	r0, r3
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001bb0:	885a      	ldrh	r2, [r3, #2]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	79ba      	ldrb	r2, [r7, #6]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7ff ff39 	bl	8001a34 <SSD1306_DrawPixel>
 8001bc2:	e014      	b.n	8001bee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b298      	uxth	r0, r3
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001bd2:	885a      	ldrh	r2, [r3, #2]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b299      	uxth	r1, r3
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	f7ff ff23 	bl	8001a34 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d3c8      	bcc.n	8001b92 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d3ad      	bcc.n	8001b6e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <SSD1306_Putc+0xf8>)
 8001c20:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200006a8 	.word	0x200006a8

08001c30 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c3e:	e012      	b.n	8001c66 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff73 	bl	8001b34 <SSD1306_Putc>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d002      	beq.n	8001c60 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	e008      	b.n	8001c72 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1e8      	bne.n	8001c40 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <ssd1306_I2C_Init+0x28>)
 8001c84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c86:	e002      	b.n	8001c8e <ssd1306_I2C_Init+0x12>
		p--;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	0003d090 	.word	0x0003d090

08001ca8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b0c7      	sub	sp, #284	@ 0x11c
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001cb6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001cba:	600a      	str	r2, [r1, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cce:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cde:	460a      	mov	r2, r1
 8001ce0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ce2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cee:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001cfc:	e015      	b.n	8001d2a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001cfe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d06:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d12:	3301      	adds	r3, #1
 8001d14:	7811      	ldrb	r1, [r2, #0]
 8001d16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d20:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d24:	3301      	adds	r3, #1
 8001d26:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d34:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8df      	bhi.n	8001cfe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d42:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f107 020c 	add.w	r2, r7, #12
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	9000      	str	r0, [sp, #0]
 8001d60:	4803      	ldr	r0, [pc, #12]	@ (8001d70 <ssd1306_I2C_WriteMulti+0xc8>)
 8001d62:	f001 fc81 	bl	8003668 <HAL_I2C_Master_Transmit>
}
 8001d66:	bf00      	nop
 8001d68:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	20000240 	.word	0x20000240

08001d74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	b299      	uxth	r1, r3
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	230a      	movs	r3, #10
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <ssd1306_I2C_Write+0x38>)
 8001d9e:	f001 fc63 	bl	8003668 <HAL_I2C_Master_Transmit>
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000240 	.word	0x20000240

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <NMI_Handler+0x4>

08001e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <MemManage_Handler+0x4>

08001e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e56:	f000 fac5 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <ADC_IRQHandler+0x10>)
 8001e66:	f000 fca2 	bl	80027ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200001f8 	.word	0x200001f8

08001e74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <TIM3_IRQHandler+0x10>)
 8001e7a:	f003 f817 	bl	8004eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200006b4 	.word	0x200006b4

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_kill>:

int _kill(int pid, int sig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea2:	f004 fcd1 	bl	8006848 <__errno>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2216      	movs	r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_exit>:

void _exit (int status)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe7 	bl	8001e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eca:	bf00      	nop
 8001ecc:	e7fd      	b.n	8001eca <_exit+0x12>

08001ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e00a      	b.n	8001ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee0:	f3af 8000 	nop.w
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	60ba      	str	r2, [r7, #8]
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf0      	blt.n	8001ee0 <_read+0x12>
  }

  return len;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e009      	b.n	8001f2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	60ba      	str	r2, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf1      	blt.n	8001f1a <_write+0x12>
  }
  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_close>:

int _close(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f68:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_isatty>:

int _isatty(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f004 fc36 	bl	8006848 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20020000 	.word	0x20020000
 8002008:	00000400 	.word	0x00000400
 800200c:	200006b0 	.word	0x200006b0
 8002010:	20000898 	.word	0x20000898

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <MX_TIM3_Init>:
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	@ 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2224      	movs	r2, #36	@ 0x24
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fbab 	bl	80067a2 <memset>
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 8002056:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <MX_TIM3_Init+0xa4>)
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 8002068:	f240 12a7 	movw	r2, #423	@ 0x1a7
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
 800207a:	2303      	movs	r3, #3
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	2301      	movs	r3, #1
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4619      	mov	r1, r3
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 80020a6:	f002 fdcd 	bl	8004c44 <HAL_TIM_Encoder_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM3_Init+0x7c>
 80020b0:	f7ff fbac 	bl	800180c <Error_Handler>
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_TIM3_Init+0xa0>)
 80020c2:	f003 fb53 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM3_Init+0x98>
 80020cc:	f7ff fb9e 	bl	800180c <Error_Handler>
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	@ 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200006b4 	.word	0x200006b4
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_TIM4_Init>:
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <MX_TIM4_Init+0xac>)
 8002104:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <MX_TIM4_Init+0xb0>)
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b20      	ldr	r3, [pc, #128]	@ (800218c <MX_TIM4_Init+0xac>)
 800210a:	220f      	movs	r2, #15
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <MX_TIM4_Init+0xac>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <MX_TIM4_Init+0xac>)
 8002116:	f242 7210 	movw	r2, #10000	@ 0x2710
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <MX_TIM4_Init+0xac>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <MX_TIM4_Init+0xac>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	4818      	ldr	r0, [pc, #96]	@ (800218c <MX_TIM4_Init+0xac>)
 800212a:	f002 fc73 	bl	8004a14 <HAL_TIM_PWM_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM4_Init+0x58>
 8002134:	f7ff fb6a 	bl	800180c <Error_Handler>
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	4619      	mov	r1, r3
 8002146:	4811      	ldr	r0, [pc, #68]	@ (800218c <MX_TIM4_Init+0xac>)
 8002148:	f003 fb10 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0x76>
 8002152:	f7ff fb5b 	bl	800180c <Error_Handler>
 8002156:	2360      	movs	r3, #96	@ 0x60
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <MX_TIM4_Init+0xac>)
 800216e:	f002 ff8d 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM4_Init+0x9c>
 8002178:	f7ff fb48 	bl	800180c <Error_Handler>
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <MX_TIM4_Init+0xac>)
 800217e:	f000 f87b 	bl	8002278 <HAL_TIM_MspPostInit>
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200006fc 	.word	0x200006fc
 8002190:	40000800 	.word	0x40000800

08002194 <HAL_TIM_Encoder_MspInit>:
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_TIM_Encoder_MspInit+0x94>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d133      	bne.n	800221e <HAL_TIM_Encoder_MspInit+0x8a>
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c6:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a14      	ldr	r2, [pc, #80]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_TIM_Encoder_MspInit+0x98>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	23c0      	movs	r3, #192	@ 0xc0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	2302      	movs	r3, #2
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4809      	ldr	r0, [pc, #36]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x9c>)
 800220a:	f000 ff55 	bl	80030b8 <HAL_GPIO_Init>
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	201d      	movs	r0, #29
 8002214:	f000 ff19 	bl	800304a <HAL_NVIC_SetPriority>
 8002218:	201d      	movs	r0, #29
 800221a:	f000 ff32 	bl	8003082 <HAL_NVIC_EnableIRQ>
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40000400 	.word	0x40000400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000

08002234 <HAL_TIM_PWM_MspInit>:
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_TIM_PWM_MspInit+0x3c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10d      	bne.n	8002262 <HAL_TIM_PWM_MspInit+0x2e>
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6413      	str	r3, [r2, #64]	@ 0x40
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40000800 	.word	0x40000800
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_MspPostInit>:
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <HAL_TIM_MspPostInit+0x68>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d11d      	bne.n	80022d6 <HAL_TIM_MspPostInit+0x5e>
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_TIM_MspPostInit+0x6c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_TIM_MspPostInit+0x6c>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_TIM_MspPostInit+0x6c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2340      	movs	r3, #64	@ 0x40
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2302      	movs	r3, #2
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <HAL_TIM_MspPostInit+0x70>)
 80022d2:	f000 fef1 	bl	80030b8 <HAL_GPIO_Init>
 80022d6:	bf00      	nop
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020400 	.word	0x40020400

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022f0:	f7ff fe90 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	@ (800232c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	@ (8002338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800231a:	f004 fa9b 	bl	8006854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231e:	f7fe ffff 	bl	8001320 <main>
  bx  lr    
 8002322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002330:	0800b71c 	.word	0x0800b71c
  ldr r2, =_sbss
 8002334:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002338:	20000894 	.word	0x20000894

0800233c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800233c:	e7fe      	b.n	800233c <CAN1_RX0_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <HAL_Init+0x40>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_Init+0x40>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <HAL_Init+0x40>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 fe63 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f808 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002374:	f7ff fd1c 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_InitTick+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_InitTick+0x58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fe7b 	bl	800309e <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00e      	b.n	80023d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d80a      	bhi.n	80023ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f000 fe43 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <HAL_InitTick+0x5c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000008 	.word	0x20000008
 80023dc:	20000010 	.word	0x20000010
 80023e0:	2000000c 	.word	0x2000000c

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000010 	.word	0x20000010
 8002408:	20000744 	.word	0x20000744

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000744 	.word	0x20000744

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000010 	.word	0x20000010

0800246c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e033      	b.n	80024ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fe3a 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024b2:	f023 0302 	bic.w	r3, r3, #2
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fbe2 	bl	8002c88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024da:	e001      	b.n	80024e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_Start+0x1a>
 800250a:	2302      	movs	r3, #2
 800250c:	e0b2      	b.n	8002674 <HAL_ADC_Start+0x180>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d018      	beq.n	8002556 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002534:	4b52      	ldr	r3, [pc, #328]	@ (8002680 <HAL_ADC_Start+0x18c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a52      	ldr	r2, [pc, #328]	@ (8002684 <HAL_ADC_Start+0x190>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9a      	lsrs	r2, r3, #18
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d17a      	bne.n	800265a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800258e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a8:	f023 0206 	bic.w	r2, r3, #6
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c0:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_ADC_Start+0x194>)
 80025c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12a      	bne.n	8002630 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2b      	ldr	r2, [pc, #172]	@ (800268c <HAL_ADC_Start+0x198>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d015      	beq.n	8002610 <HAL_ADC_Start+0x11c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <HAL_ADC_Start+0x19c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d105      	bne.n	80025fa <HAL_ADC_Start+0x106>
 80025ee:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <HAL_ADC_Start+0x194>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a25      	ldr	r2, [pc, #148]	@ (8002694 <HAL_ADC_Start+0x1a0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d136      	bne.n	8002672 <HAL_ADC_Start+0x17e>
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_ADC_Start+0x194>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d130      	bne.n	8002672 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d129      	bne.n	8002672 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	e020      	b.n	8002672 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a15      	ldr	r2, [pc, #84]	@ (800268c <HAL_ADC_Start+0x198>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11b      	bne.n	8002672 <HAL_ADC_Start+0x17e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d114      	bne.n	8002672 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e00b      	b.n	8002672 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	20000008 	.word	0x20000008
 8002684:	431bde83 	.word	0x431bde83
 8002688:	40012300 	.word	0x40012300
 800268c:	40012000 	.word	0x40012000
 8002690:	40012100 	.word	0x40012100
 8002694:	40012200 	.word	0x40012200

08002698 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b4:	d113      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e063      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026de:	f7ff fe95 	bl	800240c <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026e4:	e021      	b.n	800272a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d01d      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_ADC_PollForConversion+0x6c>
 80026f4:	f7ff fe8a 	bl	800240c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d212      	bcs.n	800272a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d00b      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e03d      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d1d6      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0212 	mvn.w	r2, #18
 8002740:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d123      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11f      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d049      	beq.n	8002878 <HAL_ADC_IRQHandler+0xca>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d046      	beq.n	8002878 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d12b      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d127      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002830:	2b00      	cmp	r3, #0
 8002832:	d119      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0220 	bic.w	r2, r2, #32
 8002842:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8bd 	bl	80029e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0212 	mvn.w	r2, #18
 8002876:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d057      	beq.n	800293e <HAL_ADC_IRQHandler+0x190>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d054      	beq.n	800293e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d139      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d12b      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d124      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002908:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 faa6 	bl	8002e80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 020c 	mvn.w	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10d      	bne.n	8002984 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f841 	bl	80029fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0201 	mvn.w	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002992:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x218>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d012      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	f043 0202 	orr.w	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0220 	mvn.w	r2, #32
 80029b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f82a 	bl	8002a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0220 	mvn.w	r2, #32
 80029c4:	601a      	str	r2, [r3, #0]
  }
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e113      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x244>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d925      	bls.n	8002a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	3b1e      	subs	r3, #30
 8002a66:	2207      	movs	r2, #7
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4403      	add	r3, r0
 8002a8e:	3b1e      	subs	r3, #30
 8002a90:	409a      	lsls	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e022      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4403      	add	r3, r0
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d824      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b05      	subs	r3, #5
 8002afc:	221f      	movs	r2, #31
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	400a      	ands	r2, r1
 8002b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b05      	subs	r3, #5
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b32:	e04c      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d824      	bhi.n	8002b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b23      	subs	r3, #35	@ 0x23
 8002b4e:	221f      	movs	r2, #31
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b23      	subs	r3, #35	@ 0x23
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b84:	e023      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	@ 0x41
 8002b98:	221f      	movs	r2, #31
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b41      	subs	r3, #65	@ 0x41
 8002bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bce:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_ADC_ConfigChannel+0x250>)
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <HAL_ADC_ConfigChannel+0x254>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10f      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b12      	cmp	r3, #18
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_ADC_ConfigChannel+0x254>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12b      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_ADC_ConfigChannel+0x258>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x1f4>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b11      	cmp	r3, #17
 8002c16:	d122      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_ADC_ConfigChannel+0x258>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_ADC_ConfigChannel+0x25c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <HAL_ADC_ConfigChannel+0x260>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	0c9a      	lsrs	r2, r3, #18
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c50:	e002      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f9      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012300 	.word	0x40012300
 8002c78:	40012000 	.word	0x40012000
 8002c7c:	10000012 	.word	0x10000012
 8002c80:	20000008 	.word	0x20000008
 8002c84:	431bde83 	.word	0x431bde83

08002c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c90:	4b79      	ldr	r3, [pc, #484]	@ (8002e78 <ADC_Init+0x1f0>)
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <ADC_Init+0x1f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e00f      	b.n	8002d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0202 	bic.w	r2, r2, #2
 8002d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	3b01      	subs	r3, #1
 8002de0:	035a      	lsls	r2, r3, #13
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e007      	b.n	8002dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	051a      	lsls	r2, r3, #20
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e3e:	025a      	lsls	r2, r3, #9
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	029a      	lsls	r2, r3, #10
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40012300 	.word	0x40012300
 8002e7c:	0f000001 	.word	0x0f000001

08002e80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	@ (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e165      	b.n	80033a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8154 	bne.w	800339a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	2b02      	cmp	r3, #2
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d017      	beq.n	80031a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ae 	beq.w	800339a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b5d      	ldr	r3, [pc, #372]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	4a5c      	ldr	r2, [pc, #368]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800324c:	6453      	str	r3, [r2, #68]	@ 0x44
 800324e:	4b5a      	ldr	r3, [pc, #360]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a58      	ldr	r2, [pc, #352]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	@ (80033c0 <HAL_GPIO_Init+0x308>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d025      	beq.n	80032d2 <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_GPIO_Init+0x30c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	@ (80033c8 <HAL_GPIO_Init+0x310>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d019      	beq.n	80032ca <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <HAL_GPIO_Init+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_GPIO_Init+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	@ (80033d0 <HAL_GPIO_Init+0x318>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00d      	beq.n	80032c2 <HAL_GPIO_Init+0x20a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <HAL_GPIO_Init+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <HAL_GPIO_Init+0x206>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_GPIO_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_GPIO_Init+0x202>
 80032b6:	2306      	movs	r3, #6
 80032b8:	e00c      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00a      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032be:	2305      	movs	r3, #5
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	@ (80033bc <HAL_GPIO_Init+0x304>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <HAL_GPIO_Init+0x324>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_GPIO_Init+0x324>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a26      	ldr	r2, [pc, #152]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_GPIO_Init+0x324>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f ae96 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	@ 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40021400 	.word	0x40021400
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e12b      	b.n	800364a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd ff40 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	@ 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003444:	f000 fe8a 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a81      	ldr	r2, [pc, #516]	@ (8003654 <HAL_I2C_Init+0x274>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d807      	bhi.n	8003464 <HAL_I2C_Init+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a80      	ldr	r2, [pc, #512]	@ (8003658 <HAL_I2C_Init+0x278>)
 8003458:	4293      	cmp	r3, r2
 800345a:	bf94      	ite	ls
 800345c:	2301      	movls	r3, #1
 800345e:	2300      	movhi	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e006      	b.n	8003472 <HAL_I2C_Init+0x92>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a7d      	ldr	r2, [pc, #500]	@ (800365c <HAL_I2C_Init+0x27c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0e7      	b.n	800364a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a78      	ldr	r2, [pc, #480]	@ (8003660 <HAL_I2C_Init+0x280>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9b      	lsrs	r3, r3, #18
 8003484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003654 <HAL_I2C_Init+0x274>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <HAL_I2C_Init+0xd4>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	e009      	b.n	80034c8 <HAL_I2C_Init+0xe8>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	4a69      	ldr	r2, [pc, #420]	@ (8003664 <HAL_I2C_Init+0x284>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	495c      	ldr	r1, [pc, #368]	@ (8003654 <HAL_I2C_Init+0x274>)
 80034e4:	428b      	cmp	r3, r1
 80034e6:	d819      	bhi.n	800351c <HAL_I2C_Init+0x13c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e59      	subs	r1, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034fc:	400b      	ands	r3, r1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_I2C_Init+0x138>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e59      	subs	r1, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003516:	e051      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 8003518:	2304      	movs	r3, #4
 800351a:	e04f      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <HAL_I2C_Init+0x168>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e58      	subs	r0, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e012      	b.n	800356e <HAL_I2C_Init+0x18e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e58      	subs	r0, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	0099      	lsls	r1, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Init+0x196>
 8003572:	2301      	movs	r3, #1
 8003574:	e022      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10e      	bne.n	800359c <HAL_I2C_Init+0x1bc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e58      	subs	r0, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	440b      	add	r3, r1
 800358c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	0099      	lsls	r1, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6809      	ldr	r1, [r1, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6911      	ldr	r1, [r2, #16]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	000186a0 	.word	0x000186a0
 8003658:	001e847f 	.word	0x001e847f
 800365c:	003d08ff 	.word	0x003d08ff
 8003660:	431bde83 	.word	0x431bde83
 8003664:	10624dd3 	.word	0x10624dd3

08003668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	460b      	mov	r3, r1
 8003676:	817b      	strh	r3, [r7, #10]
 8003678:	4613      	mov	r3, r2
 800367a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7fe fec6 	bl	800240c <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	f040 80e0 	bne.w	8003850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2319      	movs	r3, #25
 8003696:	2201      	movs	r2, #1
 8003698:	4970      	ldr	r1, [pc, #448]	@ (800385c <HAL_I2C_Master_Transmit+0x1f4>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa92 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0d3      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_I2C_Master_Transmit+0x50>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0cc      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2221      	movs	r2, #33	@ 0x21
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <HAL_I2C_Master_Transmit+0x1f8>)
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f9ca 	bl	8003ac0 <I2C_MasterRequestWrite>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08d      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800374c:	e066      	b.n	800381c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb50 	bl	8003df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11b      	bne.n	80037f0 <HAL_I2C_Master_Transmit+0x188>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	6a39      	ldr	r1, [r7, #32]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fb47 	bl	8003e88 <I2C_WaitOnBTFFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	2b04      	cmp	r3, #4
 8003806:	d107      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e01a      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d194      	bne.n	800374e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000

08003864 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	@ 0x28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	460b      	mov	r3, r1
 8003872:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7fe fdca 	bl	800240c <HAL_GetTick>
 8003878:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	f040 8111 	bne.w	8003aae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2319      	movs	r3, #25
 8003892:	2201      	movs	r2, #1
 8003894:	4988      	ldr	r1, [pc, #544]	@ (8003ab8 <HAL_I2C_IsDeviceReady+0x254>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f994 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	e104      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_I2C_IsDeviceReady+0x50>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0fd      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d007      	beq.n	80038da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2224      	movs	r2, #36	@ 0x24
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a70      	ldr	r2, [pc, #448]	@ (8003abc <HAL_I2C_IsDeviceReady+0x258>)
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800390c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f952 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003934:	d103      	bne.n	800393e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0b6      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003950:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe fd5b 	bl	800240c <HAL_GetTick>
 8003956:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397c:	bf0c      	ite	eq
 800397e:	2301      	moveq	r3, #1
 8003980:	2300      	movne	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003986:	e025      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fe fd40 	bl	800240c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <HAL_I2C_IsDeviceReady+0x13a>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	22a0      	movs	r2, #160	@ 0xa0
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80039de:	d005      	beq.n	80039ec <HAL_I2C_IsDeviceReady+0x188>
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2C_IsDeviceReady+0x188>
 80039e6:	7dbb      	ldrb	r3, [r7, #22]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0cd      	beq.n	8003988 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d129      	bne.n	8003a56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2319      	movs	r3, #25
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4921      	ldr	r1, [pc, #132]	@ (8003ab8 <HAL_I2C_IsDeviceReady+0x254>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f8c6 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e036      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e02c      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	490f      	ldr	r1, [pc, #60]	@ (8003ab8 <HAL_I2C_IsDeviceReady+0x254>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8a2 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e012      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	f4ff af32 	bcc.w	80038fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	00100002 	.word	0x00100002
 8003abc:	ffff0000 	.word	0xffff0000

08003ac0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	460b      	mov	r3, r1
 8003ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d006      	beq.n	8003aea <I2C_MasterRequestWrite+0x2a>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d003      	beq.n	8003aea <I2C_MasterRequestWrite+0x2a>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ae8:	d108      	bne.n	8003afc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e00b      	b.n	8003b14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	2b12      	cmp	r3, #18
 8003b02:	d107      	bne.n	8003b14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f84f 	bl	8003bc4 <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3a:	d103      	bne.n	8003b44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e035      	b.n	8003bb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b50:	d108      	bne.n	8003b64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	e01b      	b.n	8003b9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b64:	897b      	ldrh	r3, [r7, #10]
 8003b66:	11db      	asrs	r3, r3, #7
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f003 0306 	and.w	r3, r3, #6
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f063 030f 	orn	r3, r3, #15
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	490e      	ldr	r1, [pc, #56]	@ (8003bbc <I2C_MasterRequestWrite+0xfc>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f898 	bl	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e010      	b.n	8003bb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4907      	ldr	r1, [pc, #28]	@ (8003bc0 <I2C_MasterRequestWrite+0x100>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f888 	bl	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	00010008 	.word	0x00010008
 8003bc0:	00010002 	.word	0x00010002

08003bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd4:	e048      	b.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d044      	beq.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe fc15 	bl	800240c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d139      	bne.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10d      	bne.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	43da      	mvns	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	e00c      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	43da      	mvns	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d116      	bne.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e023      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10d      	bne.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	e00c      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d093      	beq.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cc6:	e071      	b.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd6:	d123      	bne.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e067      	b.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d041      	beq.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7fe fb70 	bl	800240c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d136      	bne.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10c      	bne.n	8003d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e00b      	b.n	8003d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e021      	b.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10c      	bne.n	8003dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e00b      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f af6d 	bne.w	8003cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e04:	e034      	b.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f886 	bl	8003f18 <I2C_IsAcknowledgeFailed>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e034      	b.n	8003e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d028      	beq.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fe faf5 	bl	800240c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11d      	bne.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	2b80      	cmp	r3, #128	@ 0x80
 8003e40:	d016      	beq.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e007      	b.n	8003e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b80      	cmp	r3, #128	@ 0x80
 8003e7c:	d1c3      	bne.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e94:	e034      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f83e 	bl	8003f18 <I2C_IsAcknowledgeFailed>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e034      	b.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d028      	beq.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fe faad 	bl	800240c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d11d      	bne.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d016      	beq.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e007      	b.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d1c3      	bne.n	8003e96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2e:	d11b      	bne.n	8003f68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fe f9d0 	bl	800240c <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe f9cc 	bl	800240c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	@ (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f841 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	@ (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe f930 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	0800b2cc 	.word	0x0800b2cc
 800413c:	20000008 	.word	0x20000008
 8004140:	2000000c 	.word	0x2000000c

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b03      	ldr	r3, [pc, #12]	@ (8004158 <HAL_RCC_GetHCLKFreq+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000008 	.word	0x20000008

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff0 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	@ (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	0800b2dc 	.word	0x0800b2dc

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b0a6      	sub	sp, #152	@ 0x98
 800418a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041aa:	4bc8      	ldr	r3, [pc, #800]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	f200 817e 	bhi.w	80044b4 <HAL_RCC_GetSysClockFreq+0x330>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041f5 	.word	0x080041f5
 80041c4:	080044b5 	.word	0x080044b5
 80041c8:	080044b5 	.word	0x080044b5
 80041cc:	080044b5 	.word	0x080044b5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	080044b5 	.word	0x080044b5
 80041d8:	080044b5 	.word	0x080044b5
 80041dc:	080044b5 	.word	0x080044b5
 80041e0:	08004205 	.word	0x08004205
 80041e4:	080044b5 	.word	0x080044b5
 80041e8:	080044b5 	.word	0x080044b5
 80041ec:	080044b5 	.word	0x080044b5
 80041f0:	0800436f 	.word	0x0800436f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4bb6      	ldr	r3, [pc, #728]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80041fa:	e15f      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fc:	4bb5      	ldr	r3, [pc, #724]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80041fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004202:	e15b      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004204:	4bb1      	ldr	r3, [pc, #708]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004210:	4bae      	ldr	r3, [pc, #696]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d031      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421c:	4bab      	ldr	r3, [pc, #684]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	2200      	movs	r2, #0
 8004224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004230:	2300      	movs	r3, #0
 8004232:	667b      	str	r3, [r7, #100]	@ 0x64
 8004234:	4ba7      	ldr	r3, [pc, #668]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004236:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800423a:	462a      	mov	r2, r5
 800423c:	fb03 f202 	mul.w	r2, r3, r2
 8004240:	2300      	movs	r3, #0
 8004242:	4621      	mov	r1, r4
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	4aa2      	ldr	r2, [pc, #648]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800424c:	4621      	mov	r1, r4
 800424e:	fba1 1202 	umull	r1, r2, r1, r2
 8004252:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004254:	460a      	mov	r2, r1
 8004256:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004258:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800425a:	4413      	add	r3, r2
 800425c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800425e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004262:	2200      	movs	r2, #0
 8004264:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004266:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004268:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800426c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004270:	f7fc fd2a 	bl	8000cc8 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800427e:	e064      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004280:	4b92      	ldr	r3, [pc, #584]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	2200      	movs	r2, #0
 8004288:	653b      	str	r3, [r7, #80]	@ 0x50
 800428a:	657a      	str	r2, [r7, #84]	@ 0x54
 800428c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004294:	2300      	movs	r3, #0
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004298:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800429c:	4622      	mov	r2, r4
 800429e:	462b      	mov	r3, r5
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	0159      	lsls	r1, r3, #5
 80042aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ae:	0150      	lsls	r0, r2, #5
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4621      	mov	r1, r4
 80042b6:	1a51      	subs	r1, r2, r1
 80042b8:	6139      	str	r1, [r7, #16]
 80042ba:	4629      	mov	r1, r5
 80042bc:	eb63 0301 	sbc.w	r3, r3, r1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042ce:	4659      	mov	r1, fp
 80042d0:	018b      	lsls	r3, r1, #6
 80042d2:	4651      	mov	r1, sl
 80042d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042d8:	4651      	mov	r1, sl
 80042da:	018a      	lsls	r2, r1, #6
 80042dc:	4651      	mov	r1, sl
 80042de:	ebb2 0801 	subs.w	r8, r2, r1
 80042e2:	4659      	mov	r1, fp
 80042e4:	eb63 0901 	sbc.w	r9, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fc:	4690      	mov	r8, r2
 80042fe:	4699      	mov	r9, r3
 8004300:	4623      	mov	r3, r4
 8004302:	eb18 0303 	adds.w	r3, r8, r3
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	462b      	mov	r3, r5
 800430a:	eb49 0303 	adc.w	r3, r9, r3
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800431c:	4629      	mov	r1, r5
 800431e:	028b      	lsls	r3, r1, #10
 8004320:	4621      	mov	r1, r4
 8004322:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004326:	4621      	mov	r1, r4
 8004328:	028a      	lsls	r2, r1, #10
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004332:	2200      	movs	r2, #0
 8004334:	643b      	str	r3, [r7, #64]	@ 0x40
 8004336:	647a      	str	r2, [r7, #68]	@ 0x44
 8004338:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800433c:	f7fc fcc4 	bl	8000cc8 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800434a:	4b60      	ldr	r3, [pc, #384]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	3301      	adds	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800435c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800436c:	e0a6      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800436e:	4b57      	ldr	r3, [pc, #348]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b54      	ldr	r3, [pc, #336]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004398:	2100      	movs	r1, #0
 800439a:	4b4e      	ldr	r3, [pc, #312]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800439c:	fb03 f201 	mul.w	r2, r3, r1
 80043a0:	2300      	movs	r3, #0
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	4a4a      	ldr	r2, [pc, #296]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80043aa:	fba0 1202 	umull	r1, r2, r0, r2
 80043ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80043b0:	460a      	mov	r2, r1
 80043b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80043b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043b6:	4413      	add	r3, r2
 80043b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80043ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043be:	2200      	movs	r2, #0
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80043c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80043c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80043cc:	f7fc fc7c 	bl	8000cc8 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043da:	e05b      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043dc:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	2200      	movs	r2, #0
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	0159      	lsls	r1, r3, #5
 8004406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800440a:	0150      	lsls	r0, r2, #5
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4641      	mov	r1, r8
 8004412:	ebb2 0a01 	subs.w	sl, r2, r1
 8004416:	4649      	mov	r1, r9
 8004418:	eb63 0b01 	sbc.w	fp, r3, r1
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800442c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004430:	ebb2 040a 	subs.w	r4, r2, sl
 8004434:	eb63 050b 	sbc.w	r5, r3, fp
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	00eb      	lsls	r3, r5, #3
 8004442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004446:	00e2      	lsls	r2, r4, #3
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	4643      	mov	r3, r8
 800444e:	18e3      	adds	r3, r4, r3
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	464b      	mov	r3, r9
 8004454:	eb45 0303 	adc.w	r3, r5, r3
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004466:	4629      	mov	r1, r5
 8004468:	028b      	lsls	r3, r1, #10
 800446a:	4621      	mov	r1, r4
 800446c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004470:	4621      	mov	r1, r4
 8004472:	028a      	lsls	r2, r1, #10
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447c:	2200      	movs	r2, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004486:	f7fc fc1f 	bl	8000cc8 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4613      	mov	r3, r2
 8004490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004494:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	0f1b      	lsrs	r3, r3, #28
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80044a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80044b2:	e003      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80044b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80044ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3798      	adds	r7, #152	@ 0x98
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	017d7840 	.word	0x017d7840

080044d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e28d      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8083 	beq.w	80045fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044f8:	4b94      	ldr	r3, [pc, #592]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b04      	cmp	r3, #4
 8004502:	d019      	beq.n	8004538 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004504:	4b91      	ldr	r3, [pc, #580]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
        || \
 800450c:	2b08      	cmp	r3, #8
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004510:	4b8e      	ldr	r3, [pc, #568]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451c:	d00c      	beq.n	8004538 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451e:	4b8b      	ldr	r3, [pc, #556]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d112      	bne.n	8004550 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452a:	4b88      	ldr	r3, [pc, #544]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004536:	d10b      	bne.n	8004550 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	4b84      	ldr	r3, [pc, #528]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05b      	beq.n	80045fc <HAL_RCC_OscConfig+0x124>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d157      	bne.n	80045fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e25a      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x90>
 800455a:	4b7c      	ldr	r3, [pc, #496]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7b      	ldr	r2, [pc, #492]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e01d      	b.n	80045a4 <HAL_RCC_OscConfig+0xcc>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0xb4>
 8004572:	4b76      	ldr	r3, [pc, #472]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a75      	ldr	r2, [pc, #468]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b73      	ldr	r3, [pc, #460]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a72      	ldr	r2, [pc, #456]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0xcc>
 800458c:	4b6f      	ldr	r3, [pc, #444]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6e      	ldr	r2, [pc, #440]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b6c      	ldr	r3, [pc, #432]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6b      	ldr	r2, [pc, #428]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800459e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd ff2e 	bl	800240c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd ff2a 	bl	800240c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	@ 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e21f      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b61      	ldr	r3, [pc, #388]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xdc>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd ff1a 	bl	800240c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd ff16 	bl	800240c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	@ 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e20b      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	4b57      	ldr	r3, [pc, #348]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x104>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d06f      	beq.n	80046ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800460a:	4b50      	ldr	r3, [pc, #320]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004616:	4b4d      	ldr	r3, [pc, #308]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
        || \
 800461e:	2b08      	cmp	r3, #8
 8004620:	d105      	bne.n	800462e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004622:	4b4a      	ldr	r3, [pc, #296]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b47      	ldr	r3, [pc, #284]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b44      	ldr	r3, [pc, #272]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b41      	ldr	r3, [pc, #260]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x186>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1d3      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4937      	ldr	r1, [pc, #220]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e03a      	b.n	80046ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <HAL_RCC_OscConfig+0x278>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd fec3 	bl	800240c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd febf 	bl	800240c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1b4      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b28      	ldr	r3, [pc, #160]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4925      	ldr	r1, [pc, #148]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_RCC_OscConfig+0x278>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd fea2 	bl	800240c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd fe9e 	bl	800240c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e193      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d036      	beq.n	8004764 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_RCC_OscConfig+0x27c>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd fe82 	bl	800240c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470c:	f7fd fe7e 	bl	800240c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e173      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x234>
 800472a:	e01b      	b.n	8004764 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472c:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_OscConfig+0x27c>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fd fe6b 	bl	800240c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00e      	b.n	8004758 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd fe67 	bl	800240c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d907      	bls.n	8004758 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e15c      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
 800474c:	40023800 	.word	0x40023800
 8004750:	42470000 	.word	0x42470000
 8004754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	4b8a      	ldr	r3, [pc, #552]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ea      	bne.n	800473a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8097 	beq.w	80048a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004776:	4b83      	ldr	r3, [pc, #524]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	4b7f      	ldr	r3, [pc, #508]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a7e      	ldr	r2, [pc, #504]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004790:	6413      	str	r3, [r2, #64]	@ 0x40
 8004792:	4b7c      	ldr	r3, [pc, #496]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a2:	4b79      	ldr	r3, [pc, #484]	@ (8004988 <HAL_RCC_OscConfig+0x4b0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d118      	bne.n	80047e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ae:	4b76      	ldr	r3, [pc, #472]	@ (8004988 <HAL_RCC_OscConfig+0x4b0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a75      	ldr	r2, [pc, #468]	@ (8004988 <HAL_RCC_OscConfig+0x4b0>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ba:	f7fd fe27 	bl	800240c <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7fd fe23 	bl	800240c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e118      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004988 <HAL_RCC_OscConfig+0x4b0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x31e>
 80047e8:	4b66      	ldr	r3, [pc, #408]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	4a65      	ldr	r2, [pc, #404]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x358>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x340>
 80047fe:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	4a60      	ldr	r2, [pc, #384]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	6713      	str	r3, [r2, #112]	@ 0x70
 800480a:	4b5e      	ldr	r3, [pc, #376]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	4a5d      	ldr	r2, [pc, #372]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6713      	str	r3, [r2, #112]	@ 0x70
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0x358>
 8004818:	4b5a      	ldr	r3, [pc, #360]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	4a59      	ldr	r2, [pc, #356]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6713      	str	r3, [r2, #112]	@ 0x70
 8004824:	4b57      	ldr	r3, [pc, #348]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	4a56      	ldr	r2, [pc, #344]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800482a:	f023 0304 	bic.w	r3, r3, #4
 800482e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd fde8 	bl	800240c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd fde4 	bl	800240c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0d7      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004856:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ee      	beq.n	8004840 <HAL_RCC_OscConfig+0x368>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fdd2 	bl	800240c <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd fdce 	bl	800240c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0c1      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004882:	4b40      	ldr	r3, [pc, #256]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ee      	bne.n	800486c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004894:	4b3b      	ldr	r3, [pc, #236]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	4a3a      	ldr	r2, [pc, #232]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80ad 	beq.w	8004a04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048aa:	4b36      	ldr	r3, [pc, #216]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d060      	beq.n	8004978 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d145      	bne.n	800494a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b33      	ldr	r3, [pc, #204]	@ (800498c <HAL_RCC_OscConfig+0x4b4>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fda2 	bl	800240c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd fd9e 	bl	800240c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e093      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b29      	ldr	r3, [pc, #164]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	071b      	lsls	r3, r3, #28
 8004916:	491b      	ldr	r1, [pc, #108]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <HAL_RCC_OscConfig+0x4b4>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fd fd73 	bl	800240c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd fd6f 	bl	800240c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e064      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x452>
 8004948:	e05c      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	@ (800498c <HAL_RCC_OscConfig+0x4b4>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd fd5c 	bl	800240c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fd58 	bl	800240c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e04d      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x480>
 8004976:	e045      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e040      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <HAL_RCC_OscConfig+0x538>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d030      	beq.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d129      	bne.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d122      	bne.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d119      	bne.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d10f      	bne.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fbfa 	bl	8002234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fc0e 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_TIM_PWM_Start+0x24>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e022      	b.n	8004b1e <HAL_TIM_PWM_Start+0x6a>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d109      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x3e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e015      	b.n	8004b1e <HAL_TIM_PWM_Start+0x6a>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d109      	bne.n	8004b0c <HAL_TIM_PWM_Start+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e008      	b.n	8004b1e <HAL_TIM_PWM_Start+0x6a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07c      	b.n	8004c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x82>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b34:	e013      	b.n	8004b5e <HAL_TIM_PWM_Start+0xaa>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x92>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b44:	e00b      	b.n	8004b5e <HAL_TIM_PWM_Start+0xaa>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Start+0xa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b54:	e003      	b.n	8004b5e <HAL_TIM_PWM_Start+0xaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fdda 	bl	8005720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	@ (8004c28 <HAL_TIM_PWM_Start+0x174>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_PWM_Start+0xcc>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <HAL_TIM_PWM_Start+0x178>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_PWM_Start+0xd0>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_TIM_PWM_Start+0xd2>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_TIM_PWM_Start+0x174>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bac:	d01d      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <HAL_TIM_PWM_Start+0x17c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <HAL_TIM_PWM_Start+0x180>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <HAL_TIM_PWM_Start+0x184>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	@ (8004c2c <HAL_TIM_PWM_Start+0x178>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a18      	ldr	r2, [pc, #96]	@ (8004c3c <HAL_TIM_PWM_Start+0x188>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_TIM_PWM_Start+0x136>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <HAL_TIM_PWM_Start+0x18c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d010      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	e007      	b.n	8004c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40001800 	.word	0x40001800

08004c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e097      	b.n	8004d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fd fa91 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 faeb 	bl	8005274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ce4:	f023 030c 	bic.w	r3, r3, #12
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	011a      	lsls	r2, r3, #4
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	031b      	lsls	r3, r3, #12
 8004d14:	4313      	orrs	r3, r2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	4313      	orrs	r3, r2
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d110      	bne.n	8004de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d102      	bne.n	8004dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dc6:	7b7b      	ldrb	r3, [r7, #13]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e069      	b.n	8004ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de0:	e031      	b.n	8004e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d110      	bne.n	8004e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004de8:	7bbb      	ldrb	r3, [r7, #14]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d102      	bne.n	8004df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dee:	7b3b      	ldrb	r3, [r7, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d001      	beq.n	8004df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e055      	b.n	8004ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e08:	e01d      	b.n	8004e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e10:	7bbb      	ldrb	r3, [r7, #14]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e16:	7b7b      	ldrb	r3, [r7, #13]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d102      	bne.n	8004e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e1c:	7b3b      	ldrb	r3, [r7, #12]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e03e      	b.n	8004ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_TIM_Encoder_Start+0xc4>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d008      	beq.n	8004e64 <HAL_TIM_Encoder_Start+0xd4>
 8004e52:	e00f      	b.n	8004e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc5f 	bl	8005720 <TIM_CCxChannelCmd>
      break;
 8004e62:	e016      	b.n	8004e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fc57 	bl	8005720 <TIM_CCxChannelCmd>
      break;
 8004e72:	e00e      	b.n	8004e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fc4f 	bl	8005720 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	2104      	movs	r1, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fc48 	bl	8005720 <TIM_CCxChannelCmd>
      break;
 8004e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d020      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0202 	mvn.w	r2, #2
 8004ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f99e 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f990 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9a1 	bl	800524c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d020      	beq.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01b      	beq.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0204 	mvn.w	r2, #4
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f978 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f96a 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f97b 	bl	800524c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d020      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01b      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0208 	mvn.w	r2, #8
 8004f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f952 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f944 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f955 	bl	800524c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0210 	mvn.w	r2, #16
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f92c 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f91e 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f92f 	bl	800524c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0201 	mvn.w	r2, #1
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8fc 	bl	8005210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fc1e 	bl	8005878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f900 	bl	8005260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0220 	mvn.w	r2, #32
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fbf0 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0ae      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	f200 809f 	bhi.w	80051f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080051f9 	.word	0x080051f9
 80050c8:	080051f9 	.word	0x080051f9
 80050cc:	080051f9 	.word	0x080051f9
 80050d0:	08005135 	.word	0x08005135
 80050d4:	080051f9 	.word	0x080051f9
 80050d8:	080051f9 	.word	0x080051f9
 80050dc:	080051f9 	.word	0x080051f9
 80050e0:	08005177 	.word	0x08005177
 80050e4:	080051f9 	.word	0x080051f9
 80050e8:	080051f9 	.word	0x080051f9
 80050ec:	080051f9 	.word	0x080051f9
 80050f0:	080051b7 	.word	0x080051b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 f960 	bl	80053c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0208 	orr.w	r2, r2, #8
 800510e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0204 	bic.w	r2, r2, #4
 800511e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6999      	ldr	r1, [r3, #24]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	619a      	str	r2, [r3, #24]
      break;
 8005132:	e064      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f9b0 	bl	80054a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800514e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800515e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	619a      	str	r2, [r3, #24]
      break;
 8005174:	e043      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fa05 	bl	800558c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0204 	bic.w	r2, r2, #4
 80051a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69d9      	ldr	r1, [r3, #28]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	61da      	str	r2, [r3, #28]
      break;
 80051b4:	e023      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fa59 	bl	8005674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69d9      	ldr	r1, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	61da      	str	r2, [r3, #28]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
      break;
 80051fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a43      	ldr	r2, [pc, #268]	@ (8005394 <TIM_Base_SetConfig+0x120>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005292:	d00f      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a40      	ldr	r2, [pc, #256]	@ (8005398 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3f      	ldr	r2, [pc, #252]	@ (800539c <TIM_Base_SetConfig+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	@ (80053a0 <TIM_Base_SetConfig+0x12c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3d      	ldr	r2, [pc, #244]	@ (80053a4 <TIM_Base_SetConfig+0x130>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d108      	bne.n	80052c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <TIM_Base_SetConfig+0x120>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02b      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d4:	d027      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005398 <TIM_Base_SetConfig+0x124>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d023      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2e      	ldr	r2, [pc, #184]	@ (800539c <TIM_Base_SetConfig+0x128>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01f      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <TIM_Base_SetConfig+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01b      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2c      	ldr	r2, [pc, #176]	@ (80053a4 <TIM_Base_SetConfig+0x130>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d017      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	@ (80053a8 <TIM_Base_SetConfig+0x134>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <TIM_Base_SetConfig+0x138>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <TIM_Base_SetConfig+0x13c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a28      	ldr	r2, [pc, #160]	@ (80053b4 <TIM_Base_SetConfig+0x140>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a27      	ldr	r2, [pc, #156]	@ (80053b8 <TIM_Base_SetConfig+0x144>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	@ (80053bc <TIM_Base_SetConfig+0x148>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a0e      	ldr	r2, [pc, #56]	@ (8005394 <TIM_Base_SetConfig+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_Base_SetConfig+0xf2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a10      	ldr	r2, [pc, #64]	@ (80053a4 <TIM_Base_SetConfig+0x130>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d103      	bne.n	800536e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f043 0204 	orr.w	r2, r3, #4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40001c00 	.word	0x40001c00
 80053bc:	40002000 	.word	0x40002000

080053c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 0201 	bic.w	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 0302 	bic.w	r3, r3, #2
 8005408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a20      	ldr	r2, [pc, #128]	@ (8005498 <TIM_OC1_SetConfig+0xd8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC1_SetConfig+0x64>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1f      	ldr	r2, [pc, #124]	@ (800549c <TIM_OC1_SetConfig+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10c      	bne.n	800543e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0308 	bic.w	r3, r3, #8
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <TIM_OC1_SetConfig+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC1_SetConfig+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a14      	ldr	r2, [pc, #80]	@ (800549c <TIM_OC1_SetConfig+0xdc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d111      	bne.n	8005472 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f023 0210 	bic.w	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <TIM_OC2_SetConfig+0xe4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC2_SetConfig+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <TIM_OC2_SetConfig+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10d      	bne.n	8005524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a17      	ldr	r2, [pc, #92]	@ (8005584 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC2_SetConfig+0x94>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a16      	ldr	r2, [pc, #88]	@ (8005588 <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d113      	bne.n	800555c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800553a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a21      	ldr	r2, [pc, #132]	@ (800566c <TIM_OC3_SetConfig+0xe0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x66>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a20      	ldr	r2, [pc, #128]	@ (8005670 <TIM_OC3_SetConfig+0xe4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10d      	bne.n	800560e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a16      	ldr	r2, [pc, #88]	@ (800566c <TIM_OC3_SetConfig+0xe0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x92>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <TIM_OC3_SetConfig+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d113      	bne.n	8005646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400

08005674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <TIM_OC4_SetConfig+0xa4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC4_SetConfig+0x68>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a11      	ldr	r2, [pc, #68]	@ (800571c <TIM_OC4_SetConfig+0xa8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d109      	bne.n	80056f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e05a      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a17      	ldr	r2, [pc, #92]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40001800 	.word	0x40001800

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <__cvt>:
 800588c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	ec57 6b10 	vmov	r6, r7, d0
 8005894:	2f00      	cmp	r7, #0
 8005896:	460c      	mov	r4, r1
 8005898:	4619      	mov	r1, r3
 800589a:	463b      	mov	r3, r7
 800589c:	bfbb      	ittet	lt
 800589e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80058a2:	461f      	movlt	r7, r3
 80058a4:	2300      	movge	r3, #0
 80058a6:	232d      	movlt	r3, #45	@ 0x2d
 80058a8:	700b      	strb	r3, [r1, #0]
 80058aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80058b0:	4691      	mov	r9, r2
 80058b2:	f023 0820 	bic.w	r8, r3, #32
 80058b6:	bfbc      	itt	lt
 80058b8:	4632      	movlt	r2, r6
 80058ba:	4616      	movlt	r6, r2
 80058bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058c0:	d005      	beq.n	80058ce <__cvt+0x42>
 80058c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058c6:	d100      	bne.n	80058ca <__cvt+0x3e>
 80058c8:	3401      	adds	r4, #1
 80058ca:	2102      	movs	r1, #2
 80058cc:	e000      	b.n	80058d0 <__cvt+0x44>
 80058ce:	2103      	movs	r1, #3
 80058d0:	ab03      	add	r3, sp, #12
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	ab02      	add	r3, sp, #8
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	ec47 6b10 	vmov	d0, r6, r7
 80058dc:	4653      	mov	r3, sl
 80058de:	4622      	mov	r2, r4
 80058e0:	f001 f86e 	bl	80069c0 <_dtoa_r>
 80058e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058e8:	4605      	mov	r5, r0
 80058ea:	d119      	bne.n	8005920 <__cvt+0x94>
 80058ec:	f019 0f01 	tst.w	r9, #1
 80058f0:	d00e      	beq.n	8005910 <__cvt+0x84>
 80058f2:	eb00 0904 	add.w	r9, r0, r4
 80058f6:	2200      	movs	r2, #0
 80058f8:	2300      	movs	r3, #0
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fb f903 	bl	8000b08 <__aeabi_dcmpeq>
 8005902:	b108      	cbz	r0, 8005908 <__cvt+0x7c>
 8005904:	f8cd 900c 	str.w	r9, [sp, #12]
 8005908:	2230      	movs	r2, #48	@ 0x30
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	454b      	cmp	r3, r9
 800590e:	d31e      	bcc.n	800594e <__cvt+0xc2>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005914:	1b5b      	subs	r3, r3, r5
 8005916:	4628      	mov	r0, r5
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	b004      	add	sp, #16
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005924:	eb00 0904 	add.w	r9, r0, r4
 8005928:	d1e5      	bne.n	80058f6 <__cvt+0x6a>
 800592a:	7803      	ldrb	r3, [r0, #0]
 800592c:	2b30      	cmp	r3, #48	@ 0x30
 800592e:	d10a      	bne.n	8005946 <__cvt+0xba>
 8005930:	2200      	movs	r2, #0
 8005932:	2300      	movs	r3, #0
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	f7fb f8e6 	bl	8000b08 <__aeabi_dcmpeq>
 800593c:	b918      	cbnz	r0, 8005946 <__cvt+0xba>
 800593e:	f1c4 0401 	rsb	r4, r4, #1
 8005942:	f8ca 4000 	str.w	r4, [sl]
 8005946:	f8da 3000 	ldr.w	r3, [sl]
 800594a:	4499      	add	r9, r3
 800594c:	e7d3      	b.n	80058f6 <__cvt+0x6a>
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e7d9      	b.n	800590a <__cvt+0x7e>

08005956 <__exponent>:
 8005956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005958:	2900      	cmp	r1, #0
 800595a:	bfba      	itte	lt
 800595c:	4249      	neglt	r1, r1
 800595e:	232d      	movlt	r3, #45	@ 0x2d
 8005960:	232b      	movge	r3, #43	@ 0x2b
 8005962:	2909      	cmp	r1, #9
 8005964:	7002      	strb	r2, [r0, #0]
 8005966:	7043      	strb	r3, [r0, #1]
 8005968:	dd29      	ble.n	80059be <__exponent+0x68>
 800596a:	f10d 0307 	add.w	r3, sp, #7
 800596e:	461d      	mov	r5, r3
 8005970:	270a      	movs	r7, #10
 8005972:	461a      	mov	r2, r3
 8005974:	fbb1 f6f7 	udiv	r6, r1, r7
 8005978:	fb07 1416 	mls	r4, r7, r6, r1
 800597c:	3430      	adds	r4, #48	@ 0x30
 800597e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005982:	460c      	mov	r4, r1
 8005984:	2c63      	cmp	r4, #99	@ 0x63
 8005986:	f103 33ff 	add.w	r3, r3, #4294967295
 800598a:	4631      	mov	r1, r6
 800598c:	dcf1      	bgt.n	8005972 <__exponent+0x1c>
 800598e:	3130      	adds	r1, #48	@ 0x30
 8005990:	1e94      	subs	r4, r2, #2
 8005992:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005996:	1c41      	adds	r1, r0, #1
 8005998:	4623      	mov	r3, r4
 800599a:	42ab      	cmp	r3, r5
 800599c:	d30a      	bcc.n	80059b4 <__exponent+0x5e>
 800599e:	f10d 0309 	add.w	r3, sp, #9
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	42ac      	cmp	r4, r5
 80059a6:	bf88      	it	hi
 80059a8:	2300      	movhi	r3, #0
 80059aa:	3302      	adds	r3, #2
 80059ac:	4403      	add	r3, r0
 80059ae:	1a18      	subs	r0, r3, r0
 80059b0:	b003      	add	sp, #12
 80059b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80059b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80059bc:	e7ed      	b.n	800599a <__exponent+0x44>
 80059be:	2330      	movs	r3, #48	@ 0x30
 80059c0:	3130      	adds	r1, #48	@ 0x30
 80059c2:	7083      	strb	r3, [r0, #2]
 80059c4:	70c1      	strb	r1, [r0, #3]
 80059c6:	1d03      	adds	r3, r0, #4
 80059c8:	e7f1      	b.n	80059ae <__exponent+0x58>
	...

080059cc <_printf_float>:
 80059cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	b08d      	sub	sp, #52	@ 0x34
 80059d2:	460c      	mov	r4, r1
 80059d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80059d8:	4616      	mov	r6, r2
 80059da:	461f      	mov	r7, r3
 80059dc:	4605      	mov	r5, r0
 80059de:	f000 fee9 	bl	80067b4 <_localeconv_r>
 80059e2:	6803      	ldr	r3, [r0, #0]
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fc62 	bl	80002b0 <strlen>
 80059ec:	2300      	movs	r3, #0
 80059ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80059f0:	f8d8 3000 	ldr.w	r3, [r8]
 80059f4:	9005      	str	r0, [sp, #20]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	f103 0208 	add.w	r2, r3, #8
 8005a00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a04:	f8d4 b000 	ldr.w	fp, [r4]
 8005a08:	f8c8 2000 	str.w	r2, [r8]
 8005a0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a22:	4b9c      	ldr	r3, [pc, #624]	@ (8005c94 <_printf_float+0x2c8>)
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	f7fb f8a0 	bl	8000b6c <__aeabi_dcmpun>
 8005a2c:	bb70      	cbnz	r0, 8005a8c <_printf_float+0xc0>
 8005a2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a32:	4b98      	ldr	r3, [pc, #608]	@ (8005c94 <_printf_float+0x2c8>)
 8005a34:	f04f 32ff 	mov.w	r2, #4294967295
 8005a38:	f7fb f87a 	bl	8000b30 <__aeabi_dcmple>
 8005a3c:	bb30      	cbnz	r0, 8005a8c <_printf_float+0xc0>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2300      	movs	r3, #0
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	f7fb f869 	bl	8000b1c <__aeabi_dcmplt>
 8005a4a:	b110      	cbz	r0, 8005a52 <_printf_float+0x86>
 8005a4c:	232d      	movs	r3, #45	@ 0x2d
 8005a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a52:	4a91      	ldr	r2, [pc, #580]	@ (8005c98 <_printf_float+0x2cc>)
 8005a54:	4b91      	ldr	r3, [pc, #580]	@ (8005c9c <_printf_float+0x2d0>)
 8005a56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a5a:	bf8c      	ite	hi
 8005a5c:	4690      	movhi	r8, r2
 8005a5e:	4698      	movls	r8, r3
 8005a60:	2303      	movs	r3, #3
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	f02b 0304 	bic.w	r3, fp, #4
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	f04f 0900 	mov.w	r9, #0
 8005a6e:	9700      	str	r7, [sp, #0]
 8005a70:	4633      	mov	r3, r6
 8005a72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a74:	4621      	mov	r1, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 f9d2 	bl	8005e20 <_printf_common>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f040 808d 	bne.w	8005b9c <_printf_float+0x1d0>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	b00d      	add	sp, #52	@ 0x34
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	4649      	mov	r1, r9
 8005a94:	f7fb f86a 	bl	8000b6c <__aeabi_dcmpun>
 8005a98:	b140      	cbz	r0, 8005aac <_printf_float+0xe0>
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbc      	itt	lt
 8005aa0:	232d      	movlt	r3, #45	@ 0x2d
 8005aa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ca0 <_printf_float+0x2d4>)
 8005aa8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca4 <_printf_float+0x2d8>)
 8005aaa:	e7d4      	b.n	8005a56 <_printf_float+0x8a>
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ab2:	9206      	str	r2, [sp, #24]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	d13b      	bne.n	8005b30 <_printf_float+0x164>
 8005ab8:	2306      	movs	r3, #6
 8005aba:	6063      	str	r3, [r4, #4]
 8005abc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	9303      	str	r3, [sp, #12]
 8005ac6:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ac8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005acc:	ab09      	add	r3, sp, #36	@ 0x24
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	ec49 8b10 	vmov	d0, r8, r9
 8005ad6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff fed6 	bl	800588c <__cvt>
 8005ae0:	9b06      	ldr	r3, [sp, #24]
 8005ae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ae4:	2b47      	cmp	r3, #71	@ 0x47
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	d129      	bne.n	8005b3e <_printf_float+0x172>
 8005aea:	1cc8      	adds	r0, r1, #3
 8005aec:	db02      	blt.n	8005af4 <_printf_float+0x128>
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	4299      	cmp	r1, r3
 8005af2:	dd41      	ble.n	8005b78 <_printf_float+0x1ac>
 8005af4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005af8:	fa5f fa8a 	uxtb.w	sl, sl
 8005afc:	3901      	subs	r1, #1
 8005afe:	4652      	mov	r2, sl
 8005b00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b04:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b06:	f7ff ff26 	bl	8005956 <__exponent>
 8005b0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b0c:	1813      	adds	r3, r2, r0
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	4681      	mov	r9, r0
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	dc02      	bgt.n	8005b1c <_printf_float+0x150>
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	07d2      	lsls	r2, r2, #31
 8005b1a:	d501      	bpl.n	8005b20 <_printf_float+0x154>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0a2      	beq.n	8005a6e <_printf_float+0xa2>
 8005b28:	232d      	movs	r3, #45	@ 0x2d
 8005b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b2e:	e79e      	b.n	8005a6e <_printf_float+0xa2>
 8005b30:	9a06      	ldr	r2, [sp, #24]
 8005b32:	2a47      	cmp	r2, #71	@ 0x47
 8005b34:	d1c2      	bne.n	8005abc <_printf_float+0xf0>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1c0      	bne.n	8005abc <_printf_float+0xf0>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7bd      	b.n	8005aba <_printf_float+0xee>
 8005b3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b42:	d9db      	bls.n	8005afc <_printf_float+0x130>
 8005b44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b48:	d118      	bne.n	8005b7c <_printf_float+0x1b0>
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	6863      	ldr	r3, [r4, #4]
 8005b4e:	dd0b      	ble.n	8005b68 <_printf_float+0x19c>
 8005b50:	6121      	str	r1, [r4, #16]
 8005b52:	b913      	cbnz	r3, 8005b5a <_printf_float+0x18e>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	07d0      	lsls	r0, r2, #31
 8005b58:	d502      	bpl.n	8005b60 <_printf_float+0x194>
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	440b      	add	r3, r1
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b62:	f04f 0900 	mov.w	r9, #0
 8005b66:	e7db      	b.n	8005b20 <_printf_float+0x154>
 8005b68:	b913      	cbnz	r3, 8005b70 <_printf_float+0x1a4>
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	07d2      	lsls	r2, r2, #31
 8005b6e:	d501      	bpl.n	8005b74 <_printf_float+0x1a8>
 8005b70:	3302      	adds	r3, #2
 8005b72:	e7f4      	b.n	8005b5e <_printf_float+0x192>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e7f2      	b.n	8005b5e <_printf_float+0x192>
 8005b78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	db05      	blt.n	8005b8e <_printf_float+0x1c2>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6121      	str	r1, [r4, #16]
 8005b86:	07d8      	lsls	r0, r3, #31
 8005b88:	d5ea      	bpl.n	8005b60 <_printf_float+0x194>
 8005b8a:	1c4b      	adds	r3, r1, #1
 8005b8c:	e7e7      	b.n	8005b5e <_printf_float+0x192>
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	bfd4      	ite	le
 8005b92:	f1c1 0202 	rsble	r2, r1, #2
 8005b96:	2201      	movgt	r2, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	e7e0      	b.n	8005b5e <_printf_float+0x192>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	055a      	lsls	r2, r3, #21
 8005ba0:	d407      	bmi.n	8005bb2 <_printf_float+0x1e6>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	d12b      	bne.n	8005c08 <_printf_float+0x23c>
 8005bb0:	e767      	b.n	8005a82 <_printf_float+0xb6>
 8005bb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bb6:	f240 80dd 	bls.w	8005d74 <_printf_float+0x3a8>
 8005bba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f7fa ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d033      	beq.n	8005c32 <_printf_float+0x266>
 8005bca:	4a37      	ldr	r2, [pc, #220]	@ (8005ca8 <_printf_float+0x2dc>)
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f af54 	beq.w	8005a82 <_printf_float+0xb6>
 8005bda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005bde:	4543      	cmp	r3, r8
 8005be0:	db02      	blt.n	8005be8 <_printf_float+0x21c>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	07d8      	lsls	r0, r3, #31
 8005be6:	d50f      	bpl.n	8005c08 <_printf_float+0x23c>
 8005be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af45 	beq.w	8005a82 <_printf_float+0xb6>
 8005bf8:	f04f 0900 	mov.w	r9, #0
 8005bfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c00:	f104 0a1a 	add.w	sl, r4, #26
 8005c04:	45c8      	cmp	r8, r9
 8005c06:	dc09      	bgt.n	8005c1c <_printf_float+0x250>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	079b      	lsls	r3, r3, #30
 8005c0c:	f100 8103 	bmi.w	8005e16 <_printf_float+0x44a>
 8005c10:	68e0      	ldr	r0, [r4, #12]
 8005c12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c14:	4298      	cmp	r0, r3
 8005c16:	bfb8      	it	lt
 8005c18:	4618      	movlt	r0, r3
 8005c1a:	e734      	b.n	8005a86 <_printf_float+0xba>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4652      	mov	r2, sl
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f af2b 	beq.w	8005a82 <_printf_float+0xb6>
 8005c2c:	f109 0901 	add.w	r9, r9, #1
 8005c30:	e7e8      	b.n	8005c04 <_printf_float+0x238>
 8005c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dc39      	bgt.n	8005cac <_printf_float+0x2e0>
 8005c38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <_printf_float+0x2dc>)
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f af1d 	beq.w	8005a82 <_printf_float+0xb6>
 8005c48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005c4c:	ea59 0303 	orrs.w	r3, r9, r3
 8005c50:	d102      	bne.n	8005c58 <_printf_float+0x28c>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	07d9      	lsls	r1, r3, #31
 8005c56:	d5d7      	bpl.n	8005c08 <_printf_float+0x23c>
 8005c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af0d 	beq.w	8005a82 <_printf_float+0xb6>
 8005c68:	f04f 0a00 	mov.w	sl, #0
 8005c6c:	f104 0b1a 	add.w	fp, r4, #26
 8005c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c72:	425b      	negs	r3, r3
 8005c74:	4553      	cmp	r3, sl
 8005c76:	dc01      	bgt.n	8005c7c <_printf_float+0x2b0>
 8005c78:	464b      	mov	r3, r9
 8005c7a:	e793      	b.n	8005ba4 <_printf_float+0x1d8>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	465a      	mov	r2, fp
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f aefb 	beq.w	8005a82 <_printf_float+0xb6>
 8005c8c:	f10a 0a01 	add.w	sl, sl, #1
 8005c90:	e7ee      	b.n	8005c70 <_printf_float+0x2a4>
 8005c92:	bf00      	nop
 8005c94:	7fefffff 	.word	0x7fefffff
 8005c98:	0800b2e8 	.word	0x0800b2e8
 8005c9c:	0800b2e4 	.word	0x0800b2e4
 8005ca0:	0800b2f0 	.word	0x0800b2f0
 8005ca4:	0800b2ec 	.word	0x0800b2ec
 8005ca8:	0800b2f4 	.word	0x0800b2f4
 8005cac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cb2:	4553      	cmp	r3, sl
 8005cb4:	bfa8      	it	ge
 8005cb6:	4653      	movge	r3, sl
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	4699      	mov	r9, r3
 8005cbc:	dc36      	bgt.n	8005d2c <_printf_float+0x360>
 8005cbe:	f04f 0b00 	mov.w	fp, #0
 8005cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc6:	f104 021a 	add.w	r2, r4, #26
 8005cca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ccc:	9306      	str	r3, [sp, #24]
 8005cce:	eba3 0309 	sub.w	r3, r3, r9
 8005cd2:	455b      	cmp	r3, fp
 8005cd4:	dc31      	bgt.n	8005d3a <_printf_float+0x36e>
 8005cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd8:	459a      	cmp	sl, r3
 8005cda:	dc3a      	bgt.n	8005d52 <_printf_float+0x386>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	07da      	lsls	r2, r3, #31
 8005ce0:	d437      	bmi.n	8005d52 <_printf_float+0x386>
 8005ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce4:	ebaa 0903 	sub.w	r9, sl, r3
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	ebaa 0303 	sub.w	r3, sl, r3
 8005cee:	4599      	cmp	r9, r3
 8005cf0:	bfa8      	it	ge
 8005cf2:	4699      	movge	r9, r3
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	dc33      	bgt.n	8005d62 <_printf_float+0x396>
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d02:	f104 0b1a 	add.w	fp, r4, #26
 8005d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d08:	ebaa 0303 	sub.w	r3, sl, r3
 8005d0c:	eba3 0309 	sub.w	r3, r3, r9
 8005d10:	4543      	cmp	r3, r8
 8005d12:	f77f af79 	ble.w	8005c08 <_printf_float+0x23c>
 8005d16:	2301      	movs	r3, #1
 8005d18:	465a      	mov	r2, fp
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	f43f aeae 	beq.w	8005a82 <_printf_float+0xb6>
 8005d26:	f108 0801 	add.w	r8, r8, #1
 8005d2a:	e7ec      	b.n	8005d06 <_printf_float+0x33a>
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	d1c2      	bne.n	8005cbe <_printf_float+0x2f2>
 8005d38:	e6a3      	b.n	8005a82 <_printf_float+0xb6>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	9206      	str	r2, [sp, #24]
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae9c 	beq.w	8005a82 <_printf_float+0xb6>
 8005d4a:	9a06      	ldr	r2, [sp, #24]
 8005d4c:	f10b 0b01 	add.w	fp, fp, #1
 8005d50:	e7bb      	b.n	8005cca <_printf_float+0x2fe>
 8005d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1c0      	bne.n	8005ce2 <_printf_float+0x316>
 8005d60:	e68f      	b.n	8005a82 <_printf_float+0xb6>
 8005d62:	9a06      	ldr	r2, [sp, #24]
 8005d64:	464b      	mov	r3, r9
 8005d66:	4442      	add	r2, r8
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d1c3      	bne.n	8005cfa <_printf_float+0x32e>
 8005d72:	e686      	b.n	8005a82 <_printf_float+0xb6>
 8005d74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d78:	f1ba 0f01 	cmp.w	sl, #1
 8005d7c:	dc01      	bgt.n	8005d82 <_printf_float+0x3b6>
 8005d7e:	07db      	lsls	r3, r3, #31
 8005d80:	d536      	bpl.n	8005df0 <_printf_float+0x424>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4642      	mov	r2, r8
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae78 	beq.w	8005a82 <_printf_float+0xb6>
 8005d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f ae70 	beq.w	8005a82 <_printf_float+0xb6>
 8005da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dae:	f7fa feab 	bl	8000b08 <__aeabi_dcmpeq>
 8005db2:	b9c0      	cbnz	r0, 8005de6 <_printf_float+0x41a>
 8005db4:	4653      	mov	r3, sl
 8005db6:	f108 0201 	add.w	r2, r8, #1
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d10c      	bne.n	8005dde <_printf_float+0x412>
 8005dc4:	e65d      	b.n	8005a82 <_printf_float+0xb6>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	465a      	mov	r2, fp
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f ae56 	beq.w	8005a82 <_printf_float+0xb6>
 8005dd6:	f108 0801 	add.w	r8, r8, #1
 8005dda:	45d0      	cmp	r8, sl
 8005ddc:	dbf3      	blt.n	8005dc6 <_printf_float+0x3fa>
 8005dde:	464b      	mov	r3, r9
 8005de0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005de4:	e6df      	b.n	8005ba6 <_printf_float+0x1da>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0b1a 	add.w	fp, r4, #26
 8005dee:	e7f4      	b.n	8005dda <_printf_float+0x40e>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	e7e1      	b.n	8005dba <_printf_float+0x3ee>
 8005df6:	2301      	movs	r3, #1
 8005df8:	464a      	mov	r2, r9
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae3e 	beq.w	8005a82 <_printf_float+0xb6>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	4543      	cmp	r3, r8
 8005e12:	dcf0      	bgt.n	8005df6 <_printf_float+0x42a>
 8005e14:	e6fc      	b.n	8005c10 <_printf_float+0x244>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	f104 0919 	add.w	r9, r4, #25
 8005e1e:	e7f4      	b.n	8005e0a <_printf_float+0x43e>

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4698      	mov	r8, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	3b00      	subs	r3, #0
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c8      	blx	r9
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf02      	ittt	eq
 8005e92:	68e5      	ldreq	r5, [r4, #12]
 8005e94:	6833      	ldreq	r3, [r6, #0]
 8005e96:	1aed      	subeq	r5, r5, r3
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4641      	mov	r1, r8
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c8      	blx	r9
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	@ 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f04:	2f78      	cmp	r7, #120	@ 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	@ 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d1 	beq.w	80060c0 <_printf_i+0x1c4>
 8005f1e:	2f58      	cmp	r7, #88	@ 0x58
 8005f20:	f000 80b8 	beq.w	8006094 <_printf_i+0x198>
 8005f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	@ (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060a7 	.word	0x080060a7
 8005f6c:	08005fd3 	.word	0x08005fd3
 8005f70:	08006061 	.word	0x08006061
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060c9 	.word	0x080060c9
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	08006069 	.word	0x08006069
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e09c      	b.n	80060e2 <_printf_i+0x1e6>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	6031      	str	r1, [r6, #0]
 8005fb0:	0606      	lsls	r6, r0, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xbc>
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	e003      	b.n	8005fc0 <_printf_i+0xc4>
 8005fb8:	0645      	lsls	r5, r0, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xb8>
 8005fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	da03      	bge.n	8005fcc <_printf_i+0xd0>
 8005fc4:	232d      	movs	r3, #45	@ 0x2d
 8005fc6:	426d      	negs	r5, r5
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fcc:	4858      	ldr	r0, [pc, #352]	@ (8006130 <_printf_i+0x234>)
 8005fce:	230a      	movs	r3, #10
 8005fd0:	e011      	b.n	8005ff6 <_printf_i+0xfa>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	0608      	lsls	r0, r1, #24
 8005fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fdc:	d402      	bmi.n	8005fe4 <_printf_i+0xe8>
 8005fde:	0649      	lsls	r1, r1, #25
 8005fe0:	bf48      	it	mi
 8005fe2:	b2ad      	uxthmi	r5, r5
 8005fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fe6:	4852      	ldr	r0, [pc, #328]	@ (8006130 <_printf_i+0x234>)
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	bf14      	ite	ne
 8005fec:	230a      	movne	r3, #10
 8005fee:	2308      	moveq	r3, #8
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ff6:	6866      	ldr	r6, [r4, #4]
 8005ff8:	60a6      	str	r6, [r4, #8]
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	db05      	blt.n	800600a <_printf_i+0x10e>
 8005ffe:	6821      	ldr	r1, [r4, #0]
 8006000:	432e      	orrs	r6, r5
 8006002:	f021 0104 	bic.w	r1, r1, #4
 8006006:	6021      	str	r1, [r4, #0]
 8006008:	d04b      	beq.n	80060a2 <_printf_i+0x1a6>
 800600a:	4616      	mov	r6, r2
 800600c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006010:	fb03 5711 	mls	r7, r3, r1, r5
 8006014:	5dc7      	ldrb	r7, [r0, r7]
 8006016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800601a:	462f      	mov	r7, r5
 800601c:	42bb      	cmp	r3, r7
 800601e:	460d      	mov	r5, r1
 8006020:	d9f4      	bls.n	800600c <_printf_i+0x110>
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10b      	bne.n	800603e <_printf_i+0x142>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	07df      	lsls	r7, r3, #31
 800602a:	d508      	bpl.n	800603e <_printf_i+0x142>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	6861      	ldr	r1, [r4, #4]
 8006030:	4299      	cmp	r1, r3
 8006032:	bfde      	ittt	le
 8006034:	2330      	movle	r3, #48	@ 0x30
 8006036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800603a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800603e:	1b92      	subs	r2, r2, r6
 8006040:	6122      	str	r2, [r4, #16]
 8006042:	f8cd a000 	str.w	sl, [sp]
 8006046:	464b      	mov	r3, r9
 8006048:	aa03      	add	r2, sp, #12
 800604a:	4621      	mov	r1, r4
 800604c:	4640      	mov	r0, r8
 800604e:	f7ff fee7 	bl	8005e20 <_printf_common>
 8006052:	3001      	adds	r0, #1
 8006054:	d14a      	bne.n	80060ec <_printf_i+0x1f0>
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	b004      	add	sp, #16
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	f043 0320 	orr.w	r3, r3, #32
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	4832      	ldr	r0, [pc, #200]	@ (8006134 <_printf_i+0x238>)
 800606a:	2778      	movs	r7, #120	@ 0x78
 800606c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	6831      	ldr	r1, [r6, #0]
 8006074:	061f      	lsls	r7, r3, #24
 8006076:	f851 5b04 	ldr.w	r5, [r1], #4
 800607a:	d402      	bmi.n	8006082 <_printf_i+0x186>
 800607c:	065f      	lsls	r7, r3, #25
 800607e:	bf48      	it	mi
 8006080:	b2ad      	uxthmi	r5, r5
 8006082:	6031      	str	r1, [r6, #0]
 8006084:	07d9      	lsls	r1, r3, #31
 8006086:	bf44      	itt	mi
 8006088:	f043 0320 	orrmi.w	r3, r3, #32
 800608c:	6023      	strmi	r3, [r4, #0]
 800608e:	b11d      	cbz	r5, 8006098 <_printf_i+0x19c>
 8006090:	2310      	movs	r3, #16
 8006092:	e7ad      	b.n	8005ff0 <_printf_i+0xf4>
 8006094:	4826      	ldr	r0, [pc, #152]	@ (8006130 <_printf_i+0x234>)
 8006096:	e7e9      	b.n	800606c <_printf_i+0x170>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e7f6      	b.n	8006090 <_printf_i+0x194>
 80060a2:	4616      	mov	r6, r2
 80060a4:	e7bd      	b.n	8006022 <_printf_i+0x126>
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	6825      	ldr	r5, [r4, #0]
 80060aa:	6961      	ldr	r1, [r4, #20]
 80060ac:	1d18      	adds	r0, r3, #4
 80060ae:	6030      	str	r0, [r6, #0]
 80060b0:	062e      	lsls	r6, r5, #24
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	d501      	bpl.n	80060ba <_printf_i+0x1be>
 80060b6:	6019      	str	r1, [r3, #0]
 80060b8:	e002      	b.n	80060c0 <_printf_i+0x1c4>
 80060ba:	0668      	lsls	r0, r5, #25
 80060bc:	d5fb      	bpl.n	80060b6 <_printf_i+0x1ba>
 80060be:	8019      	strh	r1, [r3, #0]
 80060c0:	2300      	movs	r3, #0
 80060c2:	6123      	str	r3, [r4, #16]
 80060c4:	4616      	mov	r6, r2
 80060c6:	e7bc      	b.n	8006042 <_printf_i+0x146>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	6032      	str	r2, [r6, #0]
 80060ce:	681e      	ldr	r6, [r3, #0]
 80060d0:	6862      	ldr	r2, [r4, #4]
 80060d2:	2100      	movs	r1, #0
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7fa f89b 	bl	8000210 <memchr>
 80060da:	b108      	cbz	r0, 80060e0 <_printf_i+0x1e4>
 80060dc:	1b80      	subs	r0, r0, r6
 80060de:	6060      	str	r0, [r4, #4]
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	2300      	movs	r3, #0
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ea:	e7aa      	b.n	8006042 <_printf_i+0x146>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	4632      	mov	r2, r6
 80060f0:	4649      	mov	r1, r9
 80060f2:	4640      	mov	r0, r8
 80060f4:	47d0      	blx	sl
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0ad      	beq.n	8006056 <_printf_i+0x15a>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	079b      	lsls	r3, r3, #30
 80060fe:	d413      	bmi.n	8006128 <_printf_i+0x22c>
 8006100:	68e0      	ldr	r0, [r4, #12]
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	4298      	cmp	r0, r3
 8006106:	bfb8      	it	lt
 8006108:	4618      	movlt	r0, r3
 800610a:	e7a6      	b.n	800605a <_printf_i+0x15e>
 800610c:	2301      	movs	r3, #1
 800610e:	4632      	mov	r2, r6
 8006110:	4649      	mov	r1, r9
 8006112:	4640      	mov	r0, r8
 8006114:	47d0      	blx	sl
 8006116:	3001      	adds	r0, #1
 8006118:	d09d      	beq.n	8006056 <_printf_i+0x15a>
 800611a:	3501      	adds	r5, #1
 800611c:	68e3      	ldr	r3, [r4, #12]
 800611e:	9903      	ldr	r1, [sp, #12]
 8006120:	1a5b      	subs	r3, r3, r1
 8006122:	42ab      	cmp	r3, r5
 8006124:	dcf2      	bgt.n	800610c <_printf_i+0x210>
 8006126:	e7eb      	b.n	8006100 <_printf_i+0x204>
 8006128:	2500      	movs	r5, #0
 800612a:	f104 0619 	add.w	r6, r4, #25
 800612e:	e7f5      	b.n	800611c <_printf_i+0x220>
 8006130:	0800b2f6 	.word	0x0800b2f6
 8006134:	0800b307 	.word	0x0800b307

08006138 <_scanf_float>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	b087      	sub	sp, #28
 800613e:	4691      	mov	r9, r2
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	688b      	ldr	r3, [r1, #8]
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800614a:	bf81      	itttt	hi
 800614c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006150:	eb03 0b05 	addhi.w	fp, r3, r5
 8006154:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006158:	608b      	strhi	r3, [r1, #8]
 800615a:	680b      	ldr	r3, [r1, #0]
 800615c:	460a      	mov	r2, r1
 800615e:	f04f 0500 	mov.w	r5, #0
 8006162:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006166:	f842 3b1c 	str.w	r3, [r2], #28
 800616a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800616e:	4680      	mov	r8, r0
 8006170:	460c      	mov	r4, r1
 8006172:	bf98      	it	ls
 8006174:	f04f 0b00 	movls.w	fp, #0
 8006178:	9201      	str	r2, [sp, #4]
 800617a:	4616      	mov	r6, r2
 800617c:	46aa      	mov	sl, r5
 800617e:	462f      	mov	r7, r5
 8006180:	9502      	str	r5, [sp, #8]
 8006182:	68a2      	ldr	r2, [r4, #8]
 8006184:	b15a      	cbz	r2, 800619e <_scanf_float+0x66>
 8006186:	f8d9 3000 	ldr.w	r3, [r9]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b4e      	cmp	r3, #78	@ 0x4e
 800618e:	d863      	bhi.n	8006258 <_scanf_float+0x120>
 8006190:	2b40      	cmp	r3, #64	@ 0x40
 8006192:	d83b      	bhi.n	800620c <_scanf_float+0xd4>
 8006194:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006198:	b2c8      	uxtb	r0, r1
 800619a:	280e      	cmp	r0, #14
 800619c:	d939      	bls.n	8006212 <_scanf_float+0xda>
 800619e:	b11f      	cbz	r7, 80061a8 <_scanf_float+0x70>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061ac:	f1ba 0f01 	cmp.w	sl, #1
 80061b0:	f200 8114 	bhi.w	80063dc <_scanf_float+0x2a4>
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	429e      	cmp	r6, r3
 80061b8:	f200 8105 	bhi.w	80063c6 <_scanf_float+0x28e>
 80061bc:	2001      	movs	r0, #1
 80061be:	b007      	add	sp, #28
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80061c8:	2a0d      	cmp	r2, #13
 80061ca:	d8e8      	bhi.n	800619e <_scanf_float+0x66>
 80061cc:	a101      	add	r1, pc, #4	@ (adr r1, 80061d4 <_scanf_float+0x9c>)
 80061ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	0800631d 	.word	0x0800631d
 80061d8:	0800619f 	.word	0x0800619f
 80061dc:	0800619f 	.word	0x0800619f
 80061e0:	0800619f 	.word	0x0800619f
 80061e4:	08006379 	.word	0x08006379
 80061e8:	08006353 	.word	0x08006353
 80061ec:	0800619f 	.word	0x0800619f
 80061f0:	0800619f 	.word	0x0800619f
 80061f4:	0800632b 	.word	0x0800632b
 80061f8:	0800619f 	.word	0x0800619f
 80061fc:	0800619f 	.word	0x0800619f
 8006200:	0800619f 	.word	0x0800619f
 8006204:	0800619f 	.word	0x0800619f
 8006208:	080062e7 	.word	0x080062e7
 800620c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006210:	e7da      	b.n	80061c8 <_scanf_float+0x90>
 8006212:	290e      	cmp	r1, #14
 8006214:	d8c3      	bhi.n	800619e <_scanf_float+0x66>
 8006216:	a001      	add	r0, pc, #4	@ (adr r0, 800621c <_scanf_float+0xe4>)
 8006218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800621c:	080062d7 	.word	0x080062d7
 8006220:	0800619f 	.word	0x0800619f
 8006224:	080062d7 	.word	0x080062d7
 8006228:	08006367 	.word	0x08006367
 800622c:	0800619f 	.word	0x0800619f
 8006230:	08006279 	.word	0x08006279
 8006234:	080062bd 	.word	0x080062bd
 8006238:	080062bd 	.word	0x080062bd
 800623c:	080062bd 	.word	0x080062bd
 8006240:	080062bd 	.word	0x080062bd
 8006244:	080062bd 	.word	0x080062bd
 8006248:	080062bd 	.word	0x080062bd
 800624c:	080062bd 	.word	0x080062bd
 8006250:	080062bd 	.word	0x080062bd
 8006254:	080062bd 	.word	0x080062bd
 8006258:	2b6e      	cmp	r3, #110	@ 0x6e
 800625a:	d809      	bhi.n	8006270 <_scanf_float+0x138>
 800625c:	2b60      	cmp	r3, #96	@ 0x60
 800625e:	d8b1      	bhi.n	80061c4 <_scanf_float+0x8c>
 8006260:	2b54      	cmp	r3, #84	@ 0x54
 8006262:	d07b      	beq.n	800635c <_scanf_float+0x224>
 8006264:	2b59      	cmp	r3, #89	@ 0x59
 8006266:	d19a      	bne.n	800619e <_scanf_float+0x66>
 8006268:	2d07      	cmp	r5, #7
 800626a:	d198      	bne.n	800619e <_scanf_float+0x66>
 800626c:	2508      	movs	r5, #8
 800626e:	e02f      	b.n	80062d0 <_scanf_float+0x198>
 8006270:	2b74      	cmp	r3, #116	@ 0x74
 8006272:	d073      	beq.n	800635c <_scanf_float+0x224>
 8006274:	2b79      	cmp	r3, #121	@ 0x79
 8006276:	e7f6      	b.n	8006266 <_scanf_float+0x12e>
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	05c8      	lsls	r0, r1, #23
 800627c:	d51e      	bpl.n	80062bc <_scanf_float+0x184>
 800627e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006282:	6021      	str	r1, [r4, #0]
 8006284:	3701      	adds	r7, #1
 8006286:	f1bb 0f00 	cmp.w	fp, #0
 800628a:	d003      	beq.n	8006294 <_scanf_float+0x15c>
 800628c:	3201      	adds	r2, #1
 800628e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006292:	60a2      	str	r2, [r4, #8]
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	3b01      	subs	r3, #1
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	3301      	adds	r3, #1
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f8c9 3004 	str.w	r3, [r9, #4]
 80062ac:	f340 8082 	ble.w	80063b4 <_scanf_float+0x27c>
 80062b0:	f8d9 3000 	ldr.w	r3, [r9]
 80062b4:	3301      	adds	r3, #1
 80062b6:	f8c9 3000 	str.w	r3, [r9]
 80062ba:	e762      	b.n	8006182 <_scanf_float+0x4a>
 80062bc:	eb1a 0105 	adds.w	r1, sl, r5
 80062c0:	f47f af6d 	bne.w	800619e <_scanf_float+0x66>
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80062ca:	6022      	str	r2, [r4, #0]
 80062cc:	460d      	mov	r5, r1
 80062ce:	468a      	mov	sl, r1
 80062d0:	f806 3b01 	strb.w	r3, [r6], #1
 80062d4:	e7de      	b.n	8006294 <_scanf_float+0x15c>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	0610      	lsls	r0, r2, #24
 80062da:	f57f af60 	bpl.w	800619e <_scanf_float+0x66>
 80062de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062e2:	6022      	str	r2, [r4, #0]
 80062e4:	e7f4      	b.n	80062d0 <_scanf_float+0x198>
 80062e6:	f1ba 0f00 	cmp.w	sl, #0
 80062ea:	d10c      	bne.n	8006306 <_scanf_float+0x1ce>
 80062ec:	b977      	cbnz	r7, 800630c <_scanf_float+0x1d4>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80062f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80062f8:	d108      	bne.n	800630c <_scanf_float+0x1d4>
 80062fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	f04f 0a01 	mov.w	sl, #1
 8006304:	e7e4      	b.n	80062d0 <_scanf_float+0x198>
 8006306:	f1ba 0f02 	cmp.w	sl, #2
 800630a:	d050      	beq.n	80063ae <_scanf_float+0x276>
 800630c:	2d01      	cmp	r5, #1
 800630e:	d002      	beq.n	8006316 <_scanf_float+0x1de>
 8006310:	2d04      	cmp	r5, #4
 8006312:	f47f af44 	bne.w	800619e <_scanf_float+0x66>
 8006316:	3501      	adds	r5, #1
 8006318:	b2ed      	uxtb	r5, r5
 800631a:	e7d9      	b.n	80062d0 <_scanf_float+0x198>
 800631c:	f1ba 0f01 	cmp.w	sl, #1
 8006320:	f47f af3d 	bne.w	800619e <_scanf_float+0x66>
 8006324:	f04f 0a02 	mov.w	sl, #2
 8006328:	e7d2      	b.n	80062d0 <_scanf_float+0x198>
 800632a:	b975      	cbnz	r5, 800634a <_scanf_float+0x212>
 800632c:	2f00      	cmp	r7, #0
 800632e:	f47f af37 	bne.w	80061a0 <_scanf_float+0x68>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006338:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800633c:	f040 8103 	bne.w	8006546 <_scanf_float+0x40e>
 8006340:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	2501      	movs	r5, #1
 8006348:	e7c2      	b.n	80062d0 <_scanf_float+0x198>
 800634a:	2d03      	cmp	r5, #3
 800634c:	d0e3      	beq.n	8006316 <_scanf_float+0x1de>
 800634e:	2d05      	cmp	r5, #5
 8006350:	e7df      	b.n	8006312 <_scanf_float+0x1da>
 8006352:	2d02      	cmp	r5, #2
 8006354:	f47f af23 	bne.w	800619e <_scanf_float+0x66>
 8006358:	2503      	movs	r5, #3
 800635a:	e7b9      	b.n	80062d0 <_scanf_float+0x198>
 800635c:	2d06      	cmp	r5, #6
 800635e:	f47f af1e 	bne.w	800619e <_scanf_float+0x66>
 8006362:	2507      	movs	r5, #7
 8006364:	e7b4      	b.n	80062d0 <_scanf_float+0x198>
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	0591      	lsls	r1, r2, #22
 800636a:	f57f af18 	bpl.w	800619e <_scanf_float+0x66>
 800636e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	9702      	str	r7, [sp, #8]
 8006376:	e7ab      	b.n	80062d0 <_scanf_float+0x198>
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800637e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006382:	d005      	beq.n	8006390 <_scanf_float+0x258>
 8006384:	0550      	lsls	r0, r2, #21
 8006386:	f57f af0a 	bpl.w	800619e <_scanf_float+0x66>
 800638a:	2f00      	cmp	r7, #0
 800638c:	f000 80db 	beq.w	8006546 <_scanf_float+0x40e>
 8006390:	0591      	lsls	r1, r2, #22
 8006392:	bf58      	it	pl
 8006394:	9902      	ldrpl	r1, [sp, #8]
 8006396:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800639a:	bf58      	it	pl
 800639c:	1a79      	subpl	r1, r7, r1
 800639e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80063a2:	bf58      	it	pl
 80063a4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063a8:	6022      	str	r2, [r4, #0]
 80063aa:	2700      	movs	r7, #0
 80063ac:	e790      	b.n	80062d0 <_scanf_float+0x198>
 80063ae:	f04f 0a03 	mov.w	sl, #3
 80063b2:	e78d      	b.n	80062d0 <_scanf_float+0x198>
 80063b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063b8:	4649      	mov	r1, r9
 80063ba:	4640      	mov	r0, r8
 80063bc:	4798      	blx	r3
 80063be:	2800      	cmp	r0, #0
 80063c0:	f43f aedf 	beq.w	8006182 <_scanf_float+0x4a>
 80063c4:	e6eb      	b.n	800619e <_scanf_float+0x66>
 80063c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ce:	464a      	mov	r2, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	4798      	blx	r3
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	e6eb      	b.n	80061b4 <_scanf_float+0x7c>
 80063dc:	1e6b      	subs	r3, r5, #1
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d824      	bhi.n	800642c <_scanf_float+0x2f4>
 80063e2:	2d02      	cmp	r5, #2
 80063e4:	d836      	bhi.n	8006454 <_scanf_float+0x31c>
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	429e      	cmp	r6, r3
 80063ea:	f67f aee7 	bls.w	80061bc <_scanf_float+0x84>
 80063ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063f6:	464a      	mov	r2, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	4798      	blx	r3
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	3b01      	subs	r3, #1
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	e7f0      	b.n	80063e6 <_scanf_float+0x2ae>
 8006404:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006408:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800640c:	464a      	mov	r2, r9
 800640e:	4640      	mov	r0, r8
 8006410:	4798      	blx	r3
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641c:	fa5f fa8a 	uxtb.w	sl, sl
 8006420:	f1ba 0f02 	cmp.w	sl, #2
 8006424:	d1ee      	bne.n	8006404 <_scanf_float+0x2cc>
 8006426:	3d03      	subs	r5, #3
 8006428:	b2ed      	uxtb	r5, r5
 800642a:	1b76      	subs	r6, r6, r5
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	05da      	lsls	r2, r3, #23
 8006430:	d530      	bpl.n	8006494 <_scanf_float+0x35c>
 8006432:	055b      	lsls	r3, r3, #21
 8006434:	d511      	bpl.n	800645a <_scanf_float+0x322>
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	429e      	cmp	r6, r3
 800643a:	f67f aebf 	bls.w	80061bc <_scanf_float+0x84>
 800643e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006446:	464a      	mov	r2, r9
 8006448:	4640      	mov	r0, r8
 800644a:	4798      	blx	r3
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	3b01      	subs	r3, #1
 8006450:	6123      	str	r3, [r4, #16]
 8006452:	e7f0      	b.n	8006436 <_scanf_float+0x2fe>
 8006454:	46aa      	mov	sl, r5
 8006456:	46b3      	mov	fp, r6
 8006458:	e7de      	b.n	8006418 <_scanf_float+0x2e0>
 800645a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	2965      	cmp	r1, #101	@ 0x65
 8006462:	f103 33ff 	add.w	r3, r3, #4294967295
 8006466:	f106 35ff 	add.w	r5, r6, #4294967295
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	d00c      	beq.n	8006488 <_scanf_float+0x350>
 800646e:	2945      	cmp	r1, #69	@ 0x45
 8006470:	d00a      	beq.n	8006488 <_scanf_float+0x350>
 8006472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006476:	464a      	mov	r2, r9
 8006478:	4640      	mov	r0, r8
 800647a:	4798      	blx	r3
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006482:	3b01      	subs	r3, #1
 8006484:	1eb5      	subs	r5, r6, #2
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800648c:	464a      	mov	r2, r9
 800648e:	4640      	mov	r0, r8
 8006490:	4798      	blx	r3
 8006492:	462e      	mov	r6, r5
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	f012 0210 	ands.w	r2, r2, #16
 800649a:	d001      	beq.n	80064a0 <_scanf_float+0x368>
 800649c:	2000      	movs	r0, #0
 800649e:	e68e      	b.n	80061be <_scanf_float+0x86>
 80064a0:	7032      	strb	r2, [r6, #0]
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ac:	d125      	bne.n	80064fa <_scanf_float+0x3c2>
 80064ae:	9b02      	ldr	r3, [sp, #8]
 80064b0:	429f      	cmp	r7, r3
 80064b2:	d00a      	beq.n	80064ca <_scanf_float+0x392>
 80064b4:	1bda      	subs	r2, r3, r7
 80064b6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80064ba:	429e      	cmp	r6, r3
 80064bc:	bf28      	it	cs
 80064be:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80064c2:	4922      	ldr	r1, [pc, #136]	@ (800654c <_scanf_float+0x414>)
 80064c4:	4630      	mov	r0, r6
 80064c6:	f000 f907 	bl	80066d8 <siprintf>
 80064ca:	9901      	ldr	r1, [sp, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	4640      	mov	r0, r8
 80064d0:	f002 fbf2 	bl	8008cb8 <_strtod_r>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f011 0f02 	tst.w	r1, #2
 80064de:	ec57 6b10 	vmov	r6, r7, d0
 80064e2:	f103 0204 	add.w	r2, r3, #4
 80064e6:	d015      	beq.n	8006514 <_scanf_float+0x3dc>
 80064e8:	9903      	ldr	r1, [sp, #12]
 80064ea:	600a      	str	r2, [r1, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	e9c3 6700 	strd	r6, r7, [r3]
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60e3      	str	r3, [r4, #12]
 80064f8:	e7d0      	b.n	800649c <_scanf_float+0x364>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0e4      	beq.n	80064ca <_scanf_float+0x392>
 8006500:	9905      	ldr	r1, [sp, #20]
 8006502:	230a      	movs	r3, #10
 8006504:	3101      	adds	r1, #1
 8006506:	4640      	mov	r0, r8
 8006508:	f002 fc56 	bl	8008db8 <_strtol_r>
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	9e05      	ldr	r6, [sp, #20]
 8006510:	1ac2      	subs	r2, r0, r3
 8006512:	e7d0      	b.n	80064b6 <_scanf_float+0x37e>
 8006514:	f011 0f04 	tst.w	r1, #4
 8006518:	9903      	ldr	r1, [sp, #12]
 800651a:	600a      	str	r2, [r1, #0]
 800651c:	d1e6      	bne.n	80064ec <_scanf_float+0x3b4>
 800651e:	681d      	ldr	r5, [r3, #0]
 8006520:	4632      	mov	r2, r6
 8006522:	463b      	mov	r3, r7
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa fb20 	bl	8000b6c <__aeabi_dcmpun>
 800652c:	b128      	cbz	r0, 800653a <_scanf_float+0x402>
 800652e:	4808      	ldr	r0, [pc, #32]	@ (8006550 <_scanf_float+0x418>)
 8006530:	f000 f9b8 	bl	80068a4 <nanf>
 8006534:	ed85 0a00 	vstr	s0, [r5]
 8006538:	e7db      	b.n	80064f2 <_scanf_float+0x3ba>
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f7fa fb73 	bl	8000c28 <__aeabi_d2f>
 8006542:	6028      	str	r0, [r5, #0]
 8006544:	e7d5      	b.n	80064f2 <_scanf_float+0x3ba>
 8006546:	2700      	movs	r7, #0
 8006548:	e62e      	b.n	80061a8 <_scanf_float+0x70>
 800654a:	bf00      	nop
 800654c:	0800b318 	.word	0x0800b318
 8006550:	0800b459 	.word	0x0800b459

08006554 <std>:
 8006554:	2300      	movs	r3, #0
 8006556:	b510      	push	{r4, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	e9c0 3300 	strd	r3, r3, [r0]
 800655e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006562:	6083      	str	r3, [r0, #8]
 8006564:	8181      	strh	r1, [r0, #12]
 8006566:	6643      	str	r3, [r0, #100]	@ 0x64
 8006568:	81c2      	strh	r2, [r0, #14]
 800656a:	6183      	str	r3, [r0, #24]
 800656c:	4619      	mov	r1, r3
 800656e:	2208      	movs	r2, #8
 8006570:	305c      	adds	r0, #92	@ 0x5c
 8006572:	f000 f916 	bl	80067a2 <memset>
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <std+0x58>)
 8006578:	6263      	str	r3, [r4, #36]	@ 0x24
 800657a:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <std+0x5c>)
 800657c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <std+0x60>)
 8006580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006582:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <std+0x64>)
 8006584:	6323      	str	r3, [r4, #48]	@ 0x30
 8006586:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <std+0x68>)
 8006588:	6224      	str	r4, [r4, #32]
 800658a:	429c      	cmp	r4, r3
 800658c:	d006      	beq.n	800659c <std+0x48>
 800658e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006592:	4294      	cmp	r4, r2
 8006594:	d002      	beq.n	800659c <std+0x48>
 8006596:	33d0      	adds	r3, #208	@ 0xd0
 8006598:	429c      	cmp	r4, r3
 800659a:	d105      	bne.n	80065a8 <std+0x54>
 800659c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	f000 b97a 	b.w	800689c <__retarget_lock_init_recursive>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	bf00      	nop
 80065ac:	0800671d 	.word	0x0800671d
 80065b0:	0800673f 	.word	0x0800673f
 80065b4:	08006777 	.word	0x08006777
 80065b8:	0800679b 	.word	0x0800679b
 80065bc:	20000748 	.word	0x20000748

080065c0 <stdio_exit_handler>:
 80065c0:	4a02      	ldr	r2, [pc, #8]	@ (80065cc <stdio_exit_handler+0xc>)
 80065c2:	4903      	ldr	r1, [pc, #12]	@ (80065d0 <stdio_exit_handler+0x10>)
 80065c4:	4803      	ldr	r0, [pc, #12]	@ (80065d4 <stdio_exit_handler+0x14>)
 80065c6:	f000 b869 	b.w	800669c <_fwalk_sglue>
 80065ca:	bf00      	nop
 80065cc:	20000014 	.word	0x20000014
 80065d0:	08009175 	.word	0x08009175
 80065d4:	20000024 	.word	0x20000024

080065d8 <cleanup_stdio>:
 80065d8:	6841      	ldr	r1, [r0, #4]
 80065da:	4b0c      	ldr	r3, [pc, #48]	@ (800660c <cleanup_stdio+0x34>)
 80065dc:	4299      	cmp	r1, r3
 80065de:	b510      	push	{r4, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	d001      	beq.n	80065e8 <cleanup_stdio+0x10>
 80065e4:	f002 fdc6 	bl	8009174 <_fflush_r>
 80065e8:	68a1      	ldr	r1, [r4, #8]
 80065ea:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <cleanup_stdio+0x38>)
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <cleanup_stdio+0x1e>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f002 fdbf 	bl	8009174 <_fflush_r>
 80065f6:	68e1      	ldr	r1, [r4, #12]
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <cleanup_stdio+0x3c>)
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d004      	beq.n	8006608 <cleanup_stdio+0x30>
 80065fe:	4620      	mov	r0, r4
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f002 bdb6 	b.w	8009174 <_fflush_r>
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	20000748 	.word	0x20000748
 8006610:	200007b0 	.word	0x200007b0
 8006614:	20000818 	.word	0x20000818

08006618 <global_stdio_init.part.0>:
 8006618:	b510      	push	{r4, lr}
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <global_stdio_init.part.0+0x30>)
 800661c:	4c0b      	ldr	r4, [pc, #44]	@ (800664c <global_stdio_init.part.0+0x34>)
 800661e:	4a0c      	ldr	r2, [pc, #48]	@ (8006650 <global_stdio_init.part.0+0x38>)
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	4620      	mov	r0, r4
 8006624:	2200      	movs	r2, #0
 8006626:	2104      	movs	r1, #4
 8006628:	f7ff ff94 	bl	8006554 <std>
 800662c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006630:	2201      	movs	r2, #1
 8006632:	2109      	movs	r1, #9
 8006634:	f7ff ff8e 	bl	8006554 <std>
 8006638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800663c:	2202      	movs	r2, #2
 800663e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006642:	2112      	movs	r1, #18
 8006644:	f7ff bf86 	b.w	8006554 <std>
 8006648:	20000880 	.word	0x20000880
 800664c:	20000748 	.word	0x20000748
 8006650:	080065c1 	.word	0x080065c1

08006654 <__sfp_lock_acquire>:
 8006654:	4801      	ldr	r0, [pc, #4]	@ (800665c <__sfp_lock_acquire+0x8>)
 8006656:	f000 b922 	b.w	800689e <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	20000889 	.word	0x20000889

08006660 <__sfp_lock_release>:
 8006660:	4801      	ldr	r0, [pc, #4]	@ (8006668 <__sfp_lock_release+0x8>)
 8006662:	f000 b91d 	b.w	80068a0 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	20000889 	.word	0x20000889

0800666c <__sinit>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4604      	mov	r4, r0
 8006670:	f7ff fff0 	bl	8006654 <__sfp_lock_acquire>
 8006674:	6a23      	ldr	r3, [r4, #32]
 8006676:	b11b      	cbz	r3, 8006680 <__sinit+0x14>
 8006678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667c:	f7ff bff0 	b.w	8006660 <__sfp_lock_release>
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <__sinit+0x28>)
 8006682:	6223      	str	r3, [r4, #32]
 8006684:	4b04      	ldr	r3, [pc, #16]	@ (8006698 <__sinit+0x2c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f5      	bne.n	8006678 <__sinit+0xc>
 800668c:	f7ff ffc4 	bl	8006618 <global_stdio_init.part.0>
 8006690:	e7f2      	b.n	8006678 <__sinit+0xc>
 8006692:	bf00      	nop
 8006694:	080065d9 	.word	0x080065d9
 8006698:	20000880 	.word	0x20000880

0800669c <_fwalk_sglue>:
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	4607      	mov	r7, r0
 80066a2:	4688      	mov	r8, r1
 80066a4:	4614      	mov	r4, r2
 80066a6:	2600      	movs	r6, #0
 80066a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ac:	f1b9 0901 	subs.w	r9, r9, #1
 80066b0:	d505      	bpl.n	80066be <_fwalk_sglue+0x22>
 80066b2:	6824      	ldr	r4, [r4, #0]
 80066b4:	2c00      	cmp	r4, #0
 80066b6:	d1f7      	bne.n	80066a8 <_fwalk_sglue+0xc>
 80066b8:	4630      	mov	r0, r6
 80066ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d907      	bls.n	80066d4 <_fwalk_sglue+0x38>
 80066c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c8:	3301      	adds	r3, #1
 80066ca:	d003      	beq.n	80066d4 <_fwalk_sglue+0x38>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4638      	mov	r0, r7
 80066d0:	47c0      	blx	r8
 80066d2:	4306      	orrs	r6, r0
 80066d4:	3568      	adds	r5, #104	@ 0x68
 80066d6:	e7e9      	b.n	80066ac <_fwalk_sglue+0x10>

080066d8 <siprintf>:
 80066d8:	b40e      	push	{r1, r2, r3}
 80066da:	b510      	push	{r4, lr}
 80066dc:	b09d      	sub	sp, #116	@ 0x74
 80066de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80066e0:	9002      	str	r0, [sp, #8]
 80066e2:	9006      	str	r0, [sp, #24]
 80066e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066e8:	480a      	ldr	r0, [pc, #40]	@ (8006714 <siprintf+0x3c>)
 80066ea:	9107      	str	r1, [sp, #28]
 80066ec:	9104      	str	r1, [sp, #16]
 80066ee:	490a      	ldr	r1, [pc, #40]	@ (8006718 <siprintf+0x40>)
 80066f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f4:	9105      	str	r1, [sp, #20]
 80066f6:	2400      	movs	r4, #0
 80066f8:	a902      	add	r1, sp, #8
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006700:	f002 fbb8 	bl	8008e74 <_svfiprintf_r>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	701c      	strb	r4, [r3, #0]
 8006708:	b01d      	add	sp, #116	@ 0x74
 800670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670e:	b003      	add	sp, #12
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000020 	.word	0x20000020
 8006718:	ffff0208 	.word	0xffff0208

0800671c <__sread>:
 800671c:	b510      	push	{r4, lr}
 800671e:	460c      	mov	r4, r1
 8006720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006724:	f000 f86c 	bl	8006800 <_read_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	bfab      	itete	ge
 800672c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800672e:	89a3      	ldrhlt	r3, [r4, #12]
 8006730:	181b      	addge	r3, r3, r0
 8006732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006736:	bfac      	ite	ge
 8006738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800673a:	81a3      	strhlt	r3, [r4, #12]
 800673c:	bd10      	pop	{r4, pc}

0800673e <__swrite>:
 800673e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006742:	461f      	mov	r7, r3
 8006744:	898b      	ldrh	r3, [r1, #12]
 8006746:	05db      	lsls	r3, r3, #23
 8006748:	4605      	mov	r5, r0
 800674a:	460c      	mov	r4, r1
 800674c:	4616      	mov	r6, r2
 800674e:	d505      	bpl.n	800675c <__swrite+0x1e>
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	2302      	movs	r3, #2
 8006756:	2200      	movs	r2, #0
 8006758:	f000 f840 	bl	80067dc <_lseek_r>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	4632      	mov	r2, r6
 800676a:	463b      	mov	r3, r7
 800676c:	4628      	mov	r0, r5
 800676e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006772:	f000 b857 	b.w	8006824 <_write_r>

08006776 <__sseek>:
 8006776:	b510      	push	{r4, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677e:	f000 f82d 	bl	80067dc <_lseek_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	bf15      	itete	ne
 8006788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800678a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800678e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006792:	81a3      	strheq	r3, [r4, #12]
 8006794:	bf18      	it	ne
 8006796:	81a3      	strhne	r3, [r4, #12]
 8006798:	bd10      	pop	{r4, pc}

0800679a <__sclose>:
 800679a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679e:	f000 b80d 	b.w	80067bc <_close_r>

080067a2 <memset>:
 80067a2:	4402      	add	r2, r0
 80067a4:	4603      	mov	r3, r0
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d100      	bne.n	80067ac <memset+0xa>
 80067aa:	4770      	bx	lr
 80067ac:	f803 1b01 	strb.w	r1, [r3], #1
 80067b0:	e7f9      	b.n	80067a6 <memset+0x4>
	...

080067b4 <_localeconv_r>:
 80067b4:	4800      	ldr	r0, [pc, #0]	@ (80067b8 <_localeconv_r+0x4>)
 80067b6:	4770      	bx	lr
 80067b8:	20000160 	.word	0x20000160

080067bc <_close_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d06      	ldr	r5, [pc, #24]	@ (80067d8 <_close_r+0x1c>)
 80067c0:	2300      	movs	r3, #0
 80067c2:	4604      	mov	r4, r0
 80067c4:	4608      	mov	r0, r1
 80067c6:	602b      	str	r3, [r5, #0]
 80067c8:	f7fb fbba 	bl	8001f40 <_close>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_close_r+0x1a>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_close_r+0x1a>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000884 	.word	0x20000884

080067dc <_lseek_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d07      	ldr	r5, [pc, #28]	@ (80067fc <_lseek_r+0x20>)
 80067e0:	4604      	mov	r4, r0
 80067e2:	4608      	mov	r0, r1
 80067e4:	4611      	mov	r1, r2
 80067e6:	2200      	movs	r2, #0
 80067e8:	602a      	str	r2, [r5, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f7fb fbcf 	bl	8001f8e <_lseek>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_lseek_r+0x1e>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_lseek_r+0x1e>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20000884 	.word	0x20000884

08006800 <_read_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	@ (8006820 <_read_r+0x20>)
 8006804:	4604      	mov	r4, r0
 8006806:	4608      	mov	r0, r1
 8006808:	4611      	mov	r1, r2
 800680a:	2200      	movs	r2, #0
 800680c:	602a      	str	r2, [r5, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f7fb fb5d 	bl	8001ece <_read>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_read_r+0x1e>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_read_r+0x1e>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20000884 	.word	0x20000884

08006824 <_write_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d07      	ldr	r5, [pc, #28]	@ (8006844 <_write_r+0x20>)
 8006828:	4604      	mov	r4, r0
 800682a:	4608      	mov	r0, r1
 800682c:	4611      	mov	r1, r2
 800682e:	2200      	movs	r2, #0
 8006830:	602a      	str	r2, [r5, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	f7fb fb68 	bl	8001f08 <_write>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_write_r+0x1e>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_write_r+0x1e>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20000884 	.word	0x20000884

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	@ (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000020 	.word	0x20000020

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4d0d      	ldr	r5, [pc, #52]	@ (800688c <__libc_init_array+0x38>)
 8006858:	4c0d      	ldr	r4, [pc, #52]	@ (8006890 <__libc_init_array+0x3c>)
 800685a:	1b64      	subs	r4, r4, r5
 800685c:	10a4      	asrs	r4, r4, #2
 800685e:	2600      	movs	r6, #0
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	4d0b      	ldr	r5, [pc, #44]	@ (8006894 <__libc_init_array+0x40>)
 8006866:	4c0c      	ldr	r4, [pc, #48]	@ (8006898 <__libc_init_array+0x44>)
 8006868:	f003 fb74 	bl	8009f54 <_init>
 800686c:	1b64      	subs	r4, r4, r5
 800686e:	10a4      	asrs	r4, r4, #2
 8006870:	2600      	movs	r6, #0
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	f855 3b04 	ldr.w	r3, [r5], #4
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	f855 3b04 	ldr.w	r3, [r5], #4
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	0800b714 	.word	0x0800b714
 8006890:	0800b714 	.word	0x0800b714
 8006894:	0800b714 	.word	0x0800b714
 8006898:	0800b718 	.word	0x0800b718

0800689c <__retarget_lock_init_recursive>:
 800689c:	4770      	bx	lr

0800689e <__retarget_lock_acquire_recursive>:
 800689e:	4770      	bx	lr

080068a0 <__retarget_lock_release_recursive>:
 80068a0:	4770      	bx	lr
	...

080068a4 <nanf>:
 80068a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068ac <nanf+0x8>
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	7fc00000 	.word	0x7fc00000

080068b0 <quorem>:
 80068b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	6903      	ldr	r3, [r0, #16]
 80068b6:	690c      	ldr	r4, [r1, #16]
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	4607      	mov	r7, r0
 80068bc:	db7e      	blt.n	80069bc <quorem+0x10c>
 80068be:	3c01      	subs	r4, #1
 80068c0:	f101 0814 	add.w	r8, r1, #20
 80068c4:	00a3      	lsls	r3, r4, #2
 80068c6:	f100 0514 	add.w	r5, r0, #20
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068da:	3301      	adds	r3, #1
 80068dc:	429a      	cmp	r2, r3
 80068de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80068e6:	d32e      	bcc.n	8006946 <quorem+0x96>
 80068e8:	f04f 0a00 	mov.w	sl, #0
 80068ec:	46c4      	mov	ip, r8
 80068ee:	46ae      	mov	lr, r5
 80068f0:	46d3      	mov	fp, sl
 80068f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068f6:	b298      	uxth	r0, r3
 80068f8:	fb06 a000 	mla	r0, r6, r0, sl
 80068fc:	0c02      	lsrs	r2, r0, #16
 80068fe:	0c1b      	lsrs	r3, r3, #16
 8006900:	fb06 2303 	mla	r3, r6, r3, r2
 8006904:	f8de 2000 	ldr.w	r2, [lr]
 8006908:	b280      	uxth	r0, r0
 800690a:	b292      	uxth	r2, r2
 800690c:	1a12      	subs	r2, r2, r0
 800690e:	445a      	add	r2, fp
 8006910:	f8de 0000 	ldr.w	r0, [lr]
 8006914:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006918:	b29b      	uxth	r3, r3
 800691a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800691e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006922:	b292      	uxth	r2, r2
 8006924:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006928:	45e1      	cmp	r9, ip
 800692a:	f84e 2b04 	str.w	r2, [lr], #4
 800692e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006932:	d2de      	bcs.n	80068f2 <quorem+0x42>
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	58eb      	ldr	r3, [r5, r3]
 8006938:	b92b      	cbnz	r3, 8006946 <quorem+0x96>
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	3b04      	subs	r3, #4
 800693e:	429d      	cmp	r5, r3
 8006940:	461a      	mov	r2, r3
 8006942:	d32f      	bcc.n	80069a4 <quorem+0xf4>
 8006944:	613c      	str	r4, [r7, #16]
 8006946:	4638      	mov	r0, r7
 8006948:	f001 f9c6 	bl	8007cd8 <__mcmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	db25      	blt.n	800699c <quorem+0xec>
 8006950:	4629      	mov	r1, r5
 8006952:	2000      	movs	r0, #0
 8006954:	f858 2b04 	ldr.w	r2, [r8], #4
 8006958:	f8d1 c000 	ldr.w	ip, [r1]
 800695c:	fa1f fe82 	uxth.w	lr, r2
 8006960:	fa1f f38c 	uxth.w	r3, ip
 8006964:	eba3 030e 	sub.w	r3, r3, lr
 8006968:	4403      	add	r3, r0
 800696a:	0c12      	lsrs	r2, r2, #16
 800696c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006970:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006974:	b29b      	uxth	r3, r3
 8006976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800697a:	45c1      	cmp	r9, r8
 800697c:	f841 3b04 	str.w	r3, [r1], #4
 8006980:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006984:	d2e6      	bcs.n	8006954 <quorem+0xa4>
 8006986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800698a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800698e:	b922      	cbnz	r2, 800699a <quorem+0xea>
 8006990:	3b04      	subs	r3, #4
 8006992:	429d      	cmp	r5, r3
 8006994:	461a      	mov	r2, r3
 8006996:	d30b      	bcc.n	80069b0 <quorem+0x100>
 8006998:	613c      	str	r4, [r7, #16]
 800699a:	3601      	adds	r6, #1
 800699c:	4630      	mov	r0, r6
 800699e:	b003      	add	sp, #12
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	3b04      	subs	r3, #4
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d1cb      	bne.n	8006944 <quorem+0x94>
 80069ac:	3c01      	subs	r4, #1
 80069ae:	e7c6      	b.n	800693e <quorem+0x8e>
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	3b04      	subs	r3, #4
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d1ef      	bne.n	8006998 <quorem+0xe8>
 80069b8:	3c01      	subs	r4, #1
 80069ba:	e7ea      	b.n	8006992 <quorem+0xe2>
 80069bc:	2000      	movs	r0, #0
 80069be:	e7ee      	b.n	800699e <quorem+0xee>

080069c0 <_dtoa_r>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	69c7      	ldr	r7, [r0, #28]
 80069c6:	b097      	sub	sp, #92	@ 0x5c
 80069c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80069cc:	ec55 4b10 	vmov	r4, r5, d0
 80069d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80069d2:	9107      	str	r1, [sp, #28]
 80069d4:	4681      	mov	r9, r0
 80069d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80069d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80069da:	b97f      	cbnz	r7, 80069fc <_dtoa_r+0x3c>
 80069dc:	2010      	movs	r0, #16
 80069de:	f000 fe09 	bl	80075f4 <malloc>
 80069e2:	4602      	mov	r2, r0
 80069e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80069e8:	b920      	cbnz	r0, 80069f4 <_dtoa_r+0x34>
 80069ea:	4ba9      	ldr	r3, [pc, #676]	@ (8006c90 <_dtoa_r+0x2d0>)
 80069ec:	21ef      	movs	r1, #239	@ 0xef
 80069ee:	48a9      	ldr	r0, [pc, #676]	@ (8006c94 <_dtoa_r+0x2d4>)
 80069f0:	f002 fc3a 	bl	8009268 <__assert_func>
 80069f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80069f8:	6007      	str	r7, [r0, #0]
 80069fa:	60c7      	str	r7, [r0, #12]
 80069fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	b159      	cbz	r1, 8006a1c <_dtoa_r+0x5c>
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	604a      	str	r2, [r1, #4]
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
 8006a0e:	4648      	mov	r0, r9
 8006a10:	f000 fee6 	bl	80077e0 <_Bfree>
 8006a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	1e2b      	subs	r3, r5, #0
 8006a1e:	bfb9      	ittee	lt
 8006a20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a24:	9305      	strlt	r3, [sp, #20]
 8006a26:	2300      	movge	r3, #0
 8006a28:	6033      	strge	r3, [r6, #0]
 8006a2a:	9f05      	ldr	r7, [sp, #20]
 8006a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8006c98 <_dtoa_r+0x2d8>)
 8006a2e:	bfbc      	itt	lt
 8006a30:	2201      	movlt	r2, #1
 8006a32:	6032      	strlt	r2, [r6, #0]
 8006a34:	43bb      	bics	r3, r7
 8006a36:	d112      	bne.n	8006a5e <_dtoa_r+0x9e>
 8006a38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a44:	4323      	orrs	r3, r4
 8006a46:	f000 855a 	beq.w	80074fe <_dtoa_r+0xb3e>
 8006a4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006cac <_dtoa_r+0x2ec>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 855c 	beq.w	800750e <_dtoa_r+0xb4e>
 8006a56:	f10a 0303 	add.w	r3, sl, #3
 8006a5a:	f000 bd56 	b.w	800750a <_dtoa_r+0xb4a>
 8006a5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006a62:	2200      	movs	r2, #0
 8006a64:	ec51 0b17 	vmov	r0, r1, d7
 8006a68:	2300      	movs	r3, #0
 8006a6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006a6e:	f7fa f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8006a72:	4680      	mov	r8, r0
 8006a74:	b158      	cbz	r0, 8006a8e <_dtoa_r+0xce>
 8006a76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a78:	2301      	movs	r3, #1
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a7e:	b113      	cbz	r3, 8006a86 <_dtoa_r+0xc6>
 8006a80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006a82:	4b86      	ldr	r3, [pc, #536]	@ (8006c9c <_dtoa_r+0x2dc>)
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006cb0 <_dtoa_r+0x2f0>
 8006a8a:	f000 bd40 	b.w	800750e <_dtoa_r+0xb4e>
 8006a8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006a92:	aa14      	add	r2, sp, #80	@ 0x50
 8006a94:	a915      	add	r1, sp, #84	@ 0x54
 8006a96:	4648      	mov	r0, r9
 8006a98:	f001 fa3e 	bl	8007f18 <__d2b>
 8006a9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006aa0:	9002      	str	r0, [sp, #8]
 8006aa2:	2e00      	cmp	r6, #0
 8006aa4:	d078      	beq.n	8006b98 <_dtoa_r+0x1d8>
 8006aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aa8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ab4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ab8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006abc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	4b76      	ldr	r3, [pc, #472]	@ (8006ca0 <_dtoa_r+0x2e0>)
 8006ac6:	f7f9 fbff 	bl	80002c8 <__aeabi_dsub>
 8006aca:	a36b      	add	r3, pc, #428	@ (adr r3, 8006c78 <_dtoa_r+0x2b8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fdb2 	bl	8000638 <__aeabi_dmul>
 8006ad4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006c80 <_dtoa_r+0x2c0>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fbf7 	bl	80002cc <__adddf3>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	f7f9 fd3e 	bl	8000564 <__aeabi_i2d>
 8006ae8:	a367      	add	r3, pc, #412	@ (adr r3, 8006c88 <_dtoa_r+0x2c8>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fda3 	bl	8000638 <__aeabi_dmul>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4620      	mov	r0, r4
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7f9 fbe7 	bl	80002cc <__adddf3>
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	f7fa f849 	bl	8000b98 <__aeabi_d2iz>
 8006b06:	2200      	movs	r2, #0
 8006b08:	4607      	mov	r7, r0
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7fa f804 	bl	8000b1c <__aeabi_dcmplt>
 8006b14:	b140      	cbz	r0, 8006b28 <_dtoa_r+0x168>
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7f9 fd24 	bl	8000564 <__aeabi_i2d>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	462b      	mov	r3, r5
 8006b20:	f7f9 fff2 	bl	8000b08 <__aeabi_dcmpeq>
 8006b24:	b900      	cbnz	r0, 8006b28 <_dtoa_r+0x168>
 8006b26:	3f01      	subs	r7, #1
 8006b28:	2f16      	cmp	r7, #22
 8006b2a:	d852      	bhi.n	8006bd2 <_dtoa_r+0x212>
 8006b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca4 <_dtoa_r+0x2e4>)
 8006b2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b3a:	f7f9 ffef 	bl	8000b1c <__aeabi_dcmplt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d049      	beq.n	8006bd6 <_dtoa_r+0x216>
 8006b42:	3f01      	subs	r7, #1
 8006b44:	2300      	movs	r3, #0
 8006b46:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b4a:	1b9b      	subs	r3, r3, r6
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	bf45      	ittet	mi
 8006b50:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b54:	9300      	strmi	r3, [sp, #0]
 8006b56:	2300      	movpl	r3, #0
 8006b58:	2300      	movmi	r3, #0
 8006b5a:	9206      	str	r2, [sp, #24]
 8006b5c:	bf54      	ite	pl
 8006b5e:	9300      	strpl	r3, [sp, #0]
 8006b60:	9306      	strmi	r3, [sp, #24]
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	db39      	blt.n	8006bda <_dtoa_r+0x21a>
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	970d      	str	r7, [sp, #52]	@ 0x34
 8006b6a:	443b      	add	r3, r7
 8006b6c:	9306      	str	r3, [sp, #24]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d863      	bhi.n	8006c40 <_dtoa_r+0x280>
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	bfc4      	itt	gt
 8006b7c:	3b04      	subgt	r3, #4
 8006b7e:	9307      	strgt	r3, [sp, #28]
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	f1a3 0302 	sub.w	r3, r3, #2
 8006b86:	bfcc      	ite	gt
 8006b88:	2400      	movgt	r4, #0
 8006b8a:	2401      	movle	r4, #1
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d863      	bhi.n	8006c58 <_dtoa_r+0x298>
 8006b90:	e8df f003 	tbb	[pc, r3]
 8006b94:	2b375452 	.word	0x2b375452
 8006b98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006b9c:	441e      	add	r6, r3
 8006b9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	bfc1      	itttt	gt
 8006ba6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006baa:	409f      	lslgt	r7, r3
 8006bac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bb4:	bfd6      	itet	le
 8006bb6:	f1c3 0320 	rsble	r3, r3, #32
 8006bba:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bbe:	fa04 f003 	lslle.w	r0, r4, r3
 8006bc2:	f7f9 fcbf 	bl	8000544 <__aeabi_ui2d>
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006bcc:	3e01      	subs	r6, #1
 8006bce:	9212      	str	r2, [sp, #72]	@ 0x48
 8006bd0:	e776      	b.n	8006ac0 <_dtoa_r+0x100>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7b7      	b.n	8006b46 <_dtoa_r+0x186>
 8006bd6:	9010      	str	r0, [sp, #64]	@ 0x40
 8006bd8:	e7b6      	b.n	8006b48 <_dtoa_r+0x188>
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	1bdb      	subs	r3, r3, r7
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	427b      	negs	r3, r7
 8006be2:	9308      	str	r3, [sp, #32]
 8006be4:	2300      	movs	r3, #0
 8006be6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006be8:	e7c3      	b.n	8006b72 <_dtoa_r+0x1b2>
 8006bea:	2301      	movs	r3, #1
 8006bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bf0:	eb07 0b03 	add.w	fp, r7, r3
 8006bf4:	f10b 0301 	add.w	r3, fp, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	bfb8      	it	lt
 8006bfe:	2301      	movlt	r3, #1
 8006c00:	e006      	b.n	8006c10 <_dtoa_r+0x250>
 8006c02:	2301      	movs	r3, #1
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd28      	ble.n	8006c5e <_dtoa_r+0x29e>
 8006c0c:	469b      	mov	fp, r3
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c14:	2100      	movs	r1, #0
 8006c16:	2204      	movs	r2, #4
 8006c18:	f102 0514 	add.w	r5, r2, #20
 8006c1c:	429d      	cmp	r5, r3
 8006c1e:	d926      	bls.n	8006c6e <_dtoa_r+0x2ae>
 8006c20:	6041      	str	r1, [r0, #4]
 8006c22:	4648      	mov	r0, r9
 8006c24:	f000 fd9c 	bl	8007760 <_Balloc>
 8006c28:	4682      	mov	sl, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d142      	bne.n	8006cb4 <_dtoa_r+0x2f4>
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca8 <_dtoa_r+0x2e8>)
 8006c30:	4602      	mov	r2, r0
 8006c32:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c36:	e6da      	b.n	80069ee <_dtoa_r+0x2e>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e7e3      	b.n	8006c04 <_dtoa_r+0x244>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e7d5      	b.n	8006bec <_dtoa_r+0x22c>
 8006c40:	2401      	movs	r4, #1
 8006c42:	2300      	movs	r3, #0
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	9409      	str	r4, [sp, #36]	@ 0x24
 8006c48:	f04f 3bff 	mov.w	fp, #4294967295
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c52:	2312      	movs	r3, #18
 8006c54:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c56:	e7db      	b.n	8006c10 <_dtoa_r+0x250>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5c:	e7f4      	b.n	8006c48 <_dtoa_r+0x288>
 8006c5e:	f04f 0b01 	mov.w	fp, #1
 8006c62:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c66:	465b      	mov	r3, fp
 8006c68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006c6c:	e7d0      	b.n	8006c10 <_dtoa_r+0x250>
 8006c6e:	3101      	adds	r1, #1
 8006c70:	0052      	lsls	r2, r2, #1
 8006c72:	e7d1      	b.n	8006c18 <_dtoa_r+0x258>
 8006c74:	f3af 8000 	nop.w
 8006c78:	636f4361 	.word	0x636f4361
 8006c7c:	3fd287a7 	.word	0x3fd287a7
 8006c80:	8b60c8b3 	.word	0x8b60c8b3
 8006c84:	3fc68a28 	.word	0x3fc68a28
 8006c88:	509f79fb 	.word	0x509f79fb
 8006c8c:	3fd34413 	.word	0x3fd34413
 8006c90:	0800b32a 	.word	0x0800b32a
 8006c94:	0800b341 	.word	0x0800b341
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	0800b2f5 	.word	0x0800b2f5
 8006ca0:	3ff80000 	.word	0x3ff80000
 8006ca4:	0800b4f0 	.word	0x0800b4f0
 8006ca8:	0800b399 	.word	0x0800b399
 8006cac:	0800b326 	.word	0x0800b326
 8006cb0:	0800b2f4 	.word	0x0800b2f4
 8006cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cb8:	6018      	str	r0, [r3, #0]
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	2b0e      	cmp	r3, #14
 8006cbe:	f200 80a1 	bhi.w	8006e04 <_dtoa_r+0x444>
 8006cc2:	2c00      	cmp	r4, #0
 8006cc4:	f000 809e 	beq.w	8006e04 <_dtoa_r+0x444>
 8006cc8:	2f00      	cmp	r7, #0
 8006cca:	dd33      	ble.n	8006d34 <_dtoa_r+0x374>
 8006ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8006f40 <_dtoa_r+0x580>)
 8006cce:	f007 020f 	and.w	r2, r7, #15
 8006cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd6:	ed93 7b00 	vldr	d7, [r3]
 8006cda:	05f8      	lsls	r0, r7, #23
 8006cdc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006ce0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ce4:	d516      	bpl.n	8006d14 <_dtoa_r+0x354>
 8006ce6:	4b97      	ldr	r3, [pc, #604]	@ (8006f44 <_dtoa_r+0x584>)
 8006ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf0:	f7f9 fdcc 	bl	800088c <__aeabi_ddiv>
 8006cf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf8:	f004 040f 	and.w	r4, r4, #15
 8006cfc:	2603      	movs	r6, #3
 8006cfe:	4d91      	ldr	r5, [pc, #580]	@ (8006f44 <_dtoa_r+0x584>)
 8006d00:	b954      	cbnz	r4, 8006d18 <_dtoa_r+0x358>
 8006d02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0a:	f7f9 fdbf 	bl	800088c <__aeabi_ddiv>
 8006d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d12:	e028      	b.n	8006d66 <_dtoa_r+0x3a6>
 8006d14:	2602      	movs	r6, #2
 8006d16:	e7f2      	b.n	8006cfe <_dtoa_r+0x33e>
 8006d18:	07e1      	lsls	r1, r4, #31
 8006d1a:	d508      	bpl.n	8006d2e <_dtoa_r+0x36e>
 8006d1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d24:	f7f9 fc88 	bl	8000638 <__aeabi_dmul>
 8006d28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	1064      	asrs	r4, r4, #1
 8006d30:	3508      	adds	r5, #8
 8006d32:	e7e5      	b.n	8006d00 <_dtoa_r+0x340>
 8006d34:	f000 80af 	beq.w	8006e96 <_dtoa_r+0x4d6>
 8006d38:	427c      	negs	r4, r7
 8006d3a:	4b81      	ldr	r3, [pc, #516]	@ (8006f40 <_dtoa_r+0x580>)
 8006d3c:	4d81      	ldr	r5, [pc, #516]	@ (8006f44 <_dtoa_r+0x584>)
 8006d3e:	f004 020f 	and.w	r2, r4, #15
 8006d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d4e:	f7f9 fc73 	bl	8000638 <__aeabi_dmul>
 8006d52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d56:	1124      	asrs	r4, r4, #4
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2602      	movs	r6, #2
 8006d5c:	2c00      	cmp	r4, #0
 8006d5e:	f040 808f 	bne.w	8006e80 <_dtoa_r+0x4c0>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1d3      	bne.n	8006d0e <_dtoa_r+0x34e>
 8006d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8094 	beq.w	8006e9a <_dtoa_r+0x4da>
 8006d72:	4b75      	ldr	r3, [pc, #468]	@ (8006f48 <_dtoa_r+0x588>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fecf 	bl	8000b1c <__aeabi_dcmplt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f000 808b 	beq.w	8006e9a <_dtoa_r+0x4da>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8087 	beq.w	8006e9a <_dtoa_r+0x4da>
 8006d8c:	f1bb 0f00 	cmp.w	fp, #0
 8006d90:	dd34      	ble.n	8006dfc <_dtoa_r+0x43c>
 8006d92:	4620      	mov	r0, r4
 8006d94:	4b6d      	ldr	r3, [pc, #436]	@ (8006f4c <_dtoa_r+0x58c>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fc4d 	bl	8000638 <__aeabi_dmul>
 8006d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006da2:	f107 38ff 	add.w	r8, r7, #4294967295
 8006da6:	3601      	adds	r6, #1
 8006da8:	465c      	mov	r4, fp
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7f9 fbda 	bl	8000564 <__aeabi_i2d>
 8006db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db4:	f7f9 fc40 	bl	8000638 <__aeabi_dmul>
 8006db8:	4b65      	ldr	r3, [pc, #404]	@ (8006f50 <_dtoa_r+0x590>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f7f9 fa86 	bl	80002cc <__adddf3>
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dc6:	2c00      	cmp	r4, #0
 8006dc8:	d16a      	bne.n	8006ea0 <_dtoa_r+0x4e0>
 8006dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dce:	4b61      	ldr	r3, [pc, #388]	@ (8006f54 <_dtoa_r+0x594>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fa79 	bl	80002c8 <__aeabi_dsub>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dde:	462a      	mov	r2, r5
 8006de0:	4633      	mov	r3, r6
 8006de2:	f7f9 feb9 	bl	8000b58 <__aeabi_dcmpgt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f040 8298 	bne.w	800731c <_dtoa_r+0x95c>
 8006dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df0:	462a      	mov	r2, r5
 8006df2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006df6:	f7f9 fe91 	bl	8000b1c <__aeabi_dcmplt>
 8006dfa:	bb38      	cbnz	r0, 8006e4c <_dtoa_r+0x48c>
 8006dfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f2c0 8157 	blt.w	80070ba <_dtoa_r+0x6fa>
 8006e0c:	2f0e      	cmp	r7, #14
 8006e0e:	f300 8154 	bgt.w	80070ba <_dtoa_r+0x6fa>
 8006e12:	4b4b      	ldr	r3, [pc, #300]	@ (8006f40 <_dtoa_r+0x580>)
 8006e14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e18:	ed93 7b00 	vldr	d7, [r3]
 8006e1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	ed8d 7b00 	vstr	d7, [sp]
 8006e24:	f280 80e5 	bge.w	8006ff2 <_dtoa_r+0x632>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f300 80e1 	bgt.w	8006ff2 <_dtoa_r+0x632>
 8006e30:	d10c      	bne.n	8006e4c <_dtoa_r+0x48c>
 8006e32:	4b48      	ldr	r3, [pc, #288]	@ (8006f54 <_dtoa_r+0x594>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	ec51 0b17 	vmov	r0, r1, d7
 8006e3a:	f7f9 fbfd 	bl	8000638 <__aeabi_dmul>
 8006e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e42:	f7f9 fe7f 	bl	8000b44 <__aeabi_dcmpge>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f000 8266 	beq.w	8007318 <_dtoa_r+0x958>
 8006e4c:	2400      	movs	r4, #0
 8006e4e:	4625      	mov	r5, r4
 8006e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e52:	4656      	mov	r6, sl
 8006e54:	ea6f 0803 	mvn.w	r8, r3
 8006e58:	2700      	movs	r7, #0
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4648      	mov	r0, r9
 8006e5e:	f000 fcbf 	bl	80077e0 <_Bfree>
 8006e62:	2d00      	cmp	r5, #0
 8006e64:	f000 80bd 	beq.w	8006fe2 <_dtoa_r+0x622>
 8006e68:	b12f      	cbz	r7, 8006e76 <_dtoa_r+0x4b6>
 8006e6a:	42af      	cmp	r7, r5
 8006e6c:	d003      	beq.n	8006e76 <_dtoa_r+0x4b6>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4648      	mov	r0, r9
 8006e72:	f000 fcb5 	bl	80077e0 <_Bfree>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4648      	mov	r0, r9
 8006e7a:	f000 fcb1 	bl	80077e0 <_Bfree>
 8006e7e:	e0b0      	b.n	8006fe2 <_dtoa_r+0x622>
 8006e80:	07e2      	lsls	r2, r4, #31
 8006e82:	d505      	bpl.n	8006e90 <_dtoa_r+0x4d0>
 8006e84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e88:	f7f9 fbd6 	bl	8000638 <__aeabi_dmul>
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	2301      	movs	r3, #1
 8006e90:	1064      	asrs	r4, r4, #1
 8006e92:	3508      	adds	r5, #8
 8006e94:	e762      	b.n	8006d5c <_dtoa_r+0x39c>
 8006e96:	2602      	movs	r6, #2
 8006e98:	e765      	b.n	8006d66 <_dtoa_r+0x3a6>
 8006e9a:	9c03      	ldr	r4, [sp, #12]
 8006e9c:	46b8      	mov	r8, r7
 8006e9e:	e784      	b.n	8006daa <_dtoa_r+0x3ea>
 8006ea0:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <_dtoa_r+0x580>)
 8006ea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ea4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eac:	4454      	add	r4, sl
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d054      	beq.n	8006f5c <_dtoa_r+0x59c>
 8006eb2:	4929      	ldr	r1, [pc, #164]	@ (8006f58 <_dtoa_r+0x598>)
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7f9 fce9 	bl	800088c <__aeabi_ddiv>
 8006eba:	4633      	mov	r3, r6
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	f7f9 fa03 	bl	80002c8 <__aeabi_dsub>
 8006ec2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ec6:	4656      	mov	r6, sl
 8006ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ecc:	f7f9 fe64 	bl	8000b98 <__aeabi_d2iz>
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f7f9 fb47 	bl	8000564 <__aeabi_i2d>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ede:	f7f9 f9f3 	bl	80002c8 <__aeabi_dsub>
 8006ee2:	3530      	adds	r5, #48	@ 0x30
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006eec:	f806 5b01 	strb.w	r5, [r6], #1
 8006ef0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ef4:	f7f9 fe12 	bl	8000b1c <__aeabi_dcmplt>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d172      	bne.n	8006fe2 <_dtoa_r+0x622>
 8006efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f00:	4911      	ldr	r1, [pc, #68]	@ (8006f48 <_dtoa_r+0x588>)
 8006f02:	2000      	movs	r0, #0
 8006f04:	f7f9 f9e0 	bl	80002c8 <__aeabi_dsub>
 8006f08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f0c:	f7f9 fe06 	bl	8000b1c <__aeabi_dcmplt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f040 80b4 	bne.w	800707e <_dtoa_r+0x6be>
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	f43f af70 	beq.w	8006dfc <_dtoa_r+0x43c>
 8006f1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f20:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <_dtoa_r+0x58c>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	f7f9 fb88 	bl	8000638 <__aeabi_dmul>
 8006f28:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <_dtoa_r+0x58c>)
 8006f2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f2e:	2200      	movs	r2, #0
 8006f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f34:	f7f9 fb80 	bl	8000638 <__aeabi_dmul>
 8006f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f3c:	e7c4      	b.n	8006ec8 <_dtoa_r+0x508>
 8006f3e:	bf00      	nop
 8006f40:	0800b4f0 	.word	0x0800b4f0
 8006f44:	0800b4c8 	.word	0x0800b4c8
 8006f48:	3ff00000 	.word	0x3ff00000
 8006f4c:	40240000 	.word	0x40240000
 8006f50:	401c0000 	.word	0x401c0000
 8006f54:	40140000 	.word	0x40140000
 8006f58:	3fe00000 	.word	0x3fe00000
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7f9 fb6a 	bl	8000638 <__aeabi_dmul>
 8006f64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006f6a:	4656      	mov	r6, sl
 8006f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f70:	f7f9 fe12 	bl	8000b98 <__aeabi_d2iz>
 8006f74:	4605      	mov	r5, r0
 8006f76:	f7f9 faf5 	bl	8000564 <__aeabi_i2d>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f82:	f7f9 f9a1 	bl	80002c8 <__aeabi_dsub>
 8006f86:	3530      	adds	r5, #48	@ 0x30
 8006f88:	f806 5b01 	strb.w	r5, [r6], #1
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	d124      	bne.n	8006fe6 <_dtoa_r+0x626>
 8006f9c:	4baf      	ldr	r3, [pc, #700]	@ (800725c <_dtoa_r+0x89c>)
 8006f9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fa2:	f7f9 f993 	bl	80002cc <__adddf3>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fae:	f7f9 fdd3 	bl	8000b58 <__aeabi_dcmpgt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d163      	bne.n	800707e <_dtoa_r+0x6be>
 8006fb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006fba:	49a8      	ldr	r1, [pc, #672]	@ (800725c <_dtoa_r+0x89c>)
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f7f9 f983 	bl	80002c8 <__aeabi_dsub>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fca:	f7f9 fda7 	bl	8000b1c <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f43f af14 	beq.w	8006dfc <_dtoa_r+0x43c>
 8006fd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006fd6:	1e73      	subs	r3, r6, #1
 8006fd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fde:	2b30      	cmp	r3, #48	@ 0x30
 8006fe0:	d0f8      	beq.n	8006fd4 <_dtoa_r+0x614>
 8006fe2:	4647      	mov	r7, r8
 8006fe4:	e03b      	b.n	800705e <_dtoa_r+0x69e>
 8006fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8007260 <_dtoa_r+0x8a0>)
 8006fe8:	f7f9 fb26 	bl	8000638 <__aeabi_dmul>
 8006fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff0:	e7bc      	b.n	8006f6c <_dtoa_r+0x5ac>
 8006ff2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ff6:	4656      	mov	r6, sl
 8006ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 fc44 	bl	800088c <__aeabi_ddiv>
 8007004:	f7f9 fdc8 	bl	8000b98 <__aeabi_d2iz>
 8007008:	4680      	mov	r8, r0
 800700a:	f7f9 faab 	bl	8000564 <__aeabi_i2d>
 800700e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007012:	f7f9 fb11 	bl	8000638 <__aeabi_dmul>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007022:	f7f9 f951 	bl	80002c8 <__aeabi_dsub>
 8007026:	f806 4b01 	strb.w	r4, [r6], #1
 800702a:	9d03      	ldr	r5, [sp, #12]
 800702c:	eba6 040a 	sub.w	r4, r6, sl
 8007030:	42a5      	cmp	r5, r4
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	d133      	bne.n	80070a0 <_dtoa_r+0x6e0>
 8007038:	f7f9 f948 	bl	80002cc <__adddf3>
 800703c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	f7f9 fd88 	bl	8000b58 <__aeabi_dcmpgt>
 8007048:	b9c0      	cbnz	r0, 800707c <_dtoa_r+0x6bc>
 800704a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd59 	bl	8000b08 <__aeabi_dcmpeq>
 8007056:	b110      	cbz	r0, 800705e <_dtoa_r+0x69e>
 8007058:	f018 0f01 	tst.w	r8, #1
 800705c:	d10e      	bne.n	800707c <_dtoa_r+0x6bc>
 800705e:	9902      	ldr	r1, [sp, #8]
 8007060:	4648      	mov	r0, r9
 8007062:	f000 fbbd 	bl	80077e0 <_Bfree>
 8007066:	2300      	movs	r3, #0
 8007068:	7033      	strb	r3, [r6, #0]
 800706a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800706c:	3701      	adds	r7, #1
 800706e:	601f      	str	r7, [r3, #0]
 8007070:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 824b 	beq.w	800750e <_dtoa_r+0xb4e>
 8007078:	601e      	str	r6, [r3, #0]
 800707a:	e248      	b.n	800750e <_dtoa_r+0xb4e>
 800707c:	46b8      	mov	r8, r7
 800707e:	4633      	mov	r3, r6
 8007080:	461e      	mov	r6, r3
 8007082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007086:	2a39      	cmp	r2, #57	@ 0x39
 8007088:	d106      	bne.n	8007098 <_dtoa_r+0x6d8>
 800708a:	459a      	cmp	sl, r3
 800708c:	d1f8      	bne.n	8007080 <_dtoa_r+0x6c0>
 800708e:	2230      	movs	r2, #48	@ 0x30
 8007090:	f108 0801 	add.w	r8, r8, #1
 8007094:	f88a 2000 	strb.w	r2, [sl]
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	3201      	adds	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e7a0      	b.n	8006fe2 <_dtoa_r+0x622>
 80070a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007260 <_dtoa_r+0x8a0>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	f7f9 fac8 	bl	8000638 <__aeabi_dmul>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	f7f9 fd2a 	bl	8000b08 <__aeabi_dcmpeq>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d09f      	beq.n	8006ff8 <_dtoa_r+0x638>
 80070b8:	e7d1      	b.n	800705e <_dtoa_r+0x69e>
 80070ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070bc:	2a00      	cmp	r2, #0
 80070be:	f000 80ea 	beq.w	8007296 <_dtoa_r+0x8d6>
 80070c2:	9a07      	ldr	r2, [sp, #28]
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	f300 80cd 	bgt.w	8007264 <_dtoa_r+0x8a4>
 80070ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	f000 80c1 	beq.w	8007254 <_dtoa_r+0x894>
 80070d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070d6:	9c08      	ldr	r4, [sp, #32]
 80070d8:	9e00      	ldr	r6, [sp, #0]
 80070da:	9a00      	ldr	r2, [sp, #0]
 80070dc:	441a      	add	r2, r3
 80070de:	9200      	str	r2, [sp, #0]
 80070e0:	9a06      	ldr	r2, [sp, #24]
 80070e2:	2101      	movs	r1, #1
 80070e4:	441a      	add	r2, r3
 80070e6:	4648      	mov	r0, r9
 80070e8:	9206      	str	r2, [sp, #24]
 80070ea:	f000 fc77 	bl	80079dc <__i2b>
 80070ee:	4605      	mov	r5, r0
 80070f0:	b166      	cbz	r6, 800710c <_dtoa_r+0x74c>
 80070f2:	9b06      	ldr	r3, [sp, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	dd09      	ble.n	800710c <_dtoa_r+0x74c>
 80070f8:	42b3      	cmp	r3, r6
 80070fa:	9a00      	ldr	r2, [sp, #0]
 80070fc:	bfa8      	it	ge
 80070fe:	4633      	movge	r3, r6
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	9200      	str	r2, [sp, #0]
 8007104:	9a06      	ldr	r2, [sp, #24]
 8007106:	1af6      	subs	r6, r6, r3
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	9306      	str	r3, [sp, #24]
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	b30b      	cbz	r3, 8007154 <_dtoa_r+0x794>
 8007110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80c6 	beq.w	80072a4 <_dtoa_r+0x8e4>
 8007118:	2c00      	cmp	r4, #0
 800711a:	f000 80c0 	beq.w	800729e <_dtoa_r+0x8de>
 800711e:	4629      	mov	r1, r5
 8007120:	4622      	mov	r2, r4
 8007122:	4648      	mov	r0, r9
 8007124:	f000 fd12 	bl	8007b4c <__pow5mult>
 8007128:	9a02      	ldr	r2, [sp, #8]
 800712a:	4601      	mov	r1, r0
 800712c:	4605      	mov	r5, r0
 800712e:	4648      	mov	r0, r9
 8007130:	f000 fc6a 	bl	8007a08 <__multiply>
 8007134:	9902      	ldr	r1, [sp, #8]
 8007136:	4680      	mov	r8, r0
 8007138:	4648      	mov	r0, r9
 800713a:	f000 fb51 	bl	80077e0 <_Bfree>
 800713e:	9b08      	ldr	r3, [sp, #32]
 8007140:	1b1b      	subs	r3, r3, r4
 8007142:	9308      	str	r3, [sp, #32]
 8007144:	f000 80b1 	beq.w	80072aa <_dtoa_r+0x8ea>
 8007148:	9a08      	ldr	r2, [sp, #32]
 800714a:	4641      	mov	r1, r8
 800714c:	4648      	mov	r0, r9
 800714e:	f000 fcfd 	bl	8007b4c <__pow5mult>
 8007152:	9002      	str	r0, [sp, #8]
 8007154:	2101      	movs	r1, #1
 8007156:	4648      	mov	r0, r9
 8007158:	f000 fc40 	bl	80079dc <__i2b>
 800715c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800715e:	4604      	mov	r4, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 81d8 	beq.w	8007516 <_dtoa_r+0xb56>
 8007166:	461a      	mov	r2, r3
 8007168:	4601      	mov	r1, r0
 800716a:	4648      	mov	r0, r9
 800716c:	f000 fcee 	bl	8007b4c <__pow5mult>
 8007170:	9b07      	ldr	r3, [sp, #28]
 8007172:	2b01      	cmp	r3, #1
 8007174:	4604      	mov	r4, r0
 8007176:	f300 809f 	bgt.w	80072b8 <_dtoa_r+0x8f8>
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8097 	bne.w	80072b0 <_dtoa_r+0x8f0>
 8007182:	9b05      	ldr	r3, [sp, #20]
 8007184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007188:	2b00      	cmp	r3, #0
 800718a:	f040 8093 	bne.w	80072b4 <_dtoa_r+0x8f4>
 800718e:	9b05      	ldr	r3, [sp, #20]
 8007190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	051b      	lsls	r3, r3, #20
 8007198:	b133      	cbz	r3, 80071a8 <_dtoa_r+0x7e8>
 800719a:	9b00      	ldr	r3, [sp, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	3301      	adds	r3, #1
 80071a4:	9306      	str	r3, [sp, #24]
 80071a6:	2301      	movs	r3, #1
 80071a8:	9308      	str	r3, [sp, #32]
 80071aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 81b8 	beq.w	8007522 <_dtoa_r+0xb62>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071b8:	6918      	ldr	r0, [r3, #16]
 80071ba:	f000 fbc3 	bl	8007944 <__hi0bits>
 80071be:	f1c0 0020 	rsb	r0, r0, #32
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	4418      	add	r0, r3
 80071c6:	f010 001f 	ands.w	r0, r0, #31
 80071ca:	f000 8082 	beq.w	80072d2 <_dtoa_r+0x912>
 80071ce:	f1c0 0320 	rsb	r3, r0, #32
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	dd73      	ble.n	80072be <_dtoa_r+0x8fe>
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	f1c0 001c 	rsb	r0, r0, #28
 80071dc:	4403      	add	r3, r0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	4403      	add	r3, r0
 80071e4:	4406      	add	r6, r0
 80071e6:	9306      	str	r3, [sp, #24]
 80071e8:	9b00      	ldr	r3, [sp, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dd05      	ble.n	80071fa <_dtoa_r+0x83a>
 80071ee:	9902      	ldr	r1, [sp, #8]
 80071f0:	461a      	mov	r2, r3
 80071f2:	4648      	mov	r0, r9
 80071f4:	f000 fd04 	bl	8007c00 <__lshift>
 80071f8:	9002      	str	r0, [sp, #8]
 80071fa:	9b06      	ldr	r3, [sp, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dd05      	ble.n	800720c <_dtoa_r+0x84c>
 8007200:	4621      	mov	r1, r4
 8007202:	461a      	mov	r2, r3
 8007204:	4648      	mov	r0, r9
 8007206:	f000 fcfb 	bl	8007c00 <__lshift>
 800720a:	4604      	mov	r4, r0
 800720c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d061      	beq.n	80072d6 <_dtoa_r+0x916>
 8007212:	9802      	ldr	r0, [sp, #8]
 8007214:	4621      	mov	r1, r4
 8007216:	f000 fd5f 	bl	8007cd8 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	da5b      	bge.n	80072d6 <_dtoa_r+0x916>
 800721e:	2300      	movs	r3, #0
 8007220:	9902      	ldr	r1, [sp, #8]
 8007222:	220a      	movs	r2, #10
 8007224:	4648      	mov	r0, r9
 8007226:	f000 fafd 	bl	8007824 <__multadd>
 800722a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722c:	9002      	str	r0, [sp, #8]
 800722e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8177 	beq.w	8007526 <_dtoa_r+0xb66>
 8007238:	4629      	mov	r1, r5
 800723a:	2300      	movs	r3, #0
 800723c:	220a      	movs	r2, #10
 800723e:	4648      	mov	r0, r9
 8007240:	f000 faf0 	bl	8007824 <__multadd>
 8007244:	f1bb 0f00 	cmp.w	fp, #0
 8007248:	4605      	mov	r5, r0
 800724a:	dc6f      	bgt.n	800732c <_dtoa_r+0x96c>
 800724c:	9b07      	ldr	r3, [sp, #28]
 800724e:	2b02      	cmp	r3, #2
 8007250:	dc49      	bgt.n	80072e6 <_dtoa_r+0x926>
 8007252:	e06b      	b.n	800732c <_dtoa_r+0x96c>
 8007254:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800725a:	e73c      	b.n	80070d6 <_dtoa_r+0x716>
 800725c:	3fe00000 	.word	0x3fe00000
 8007260:	40240000 	.word	0x40240000
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1e5c      	subs	r4, r3, #1
 8007268:	9b08      	ldr	r3, [sp, #32]
 800726a:	42a3      	cmp	r3, r4
 800726c:	db09      	blt.n	8007282 <_dtoa_r+0x8c2>
 800726e:	1b1c      	subs	r4, r3, r4
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f6bf af30 	bge.w	80070d8 <_dtoa_r+0x718>
 8007278:	9b00      	ldr	r3, [sp, #0]
 800727a:	9a03      	ldr	r2, [sp, #12]
 800727c:	1a9e      	subs	r6, r3, r2
 800727e:	2300      	movs	r3, #0
 8007280:	e72b      	b.n	80070da <_dtoa_r+0x71a>
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007286:	9408      	str	r4, [sp, #32]
 8007288:	1ae3      	subs	r3, r4, r3
 800728a:	441a      	add	r2, r3
 800728c:	9e00      	ldr	r6, [sp, #0]
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	920d      	str	r2, [sp, #52]	@ 0x34
 8007292:	2400      	movs	r4, #0
 8007294:	e721      	b.n	80070da <_dtoa_r+0x71a>
 8007296:	9c08      	ldr	r4, [sp, #32]
 8007298:	9e00      	ldr	r6, [sp, #0]
 800729a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800729c:	e728      	b.n	80070f0 <_dtoa_r+0x730>
 800729e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80072a2:	e751      	b.n	8007148 <_dtoa_r+0x788>
 80072a4:	9a08      	ldr	r2, [sp, #32]
 80072a6:	9902      	ldr	r1, [sp, #8]
 80072a8:	e750      	b.n	800714c <_dtoa_r+0x78c>
 80072aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80072ae:	e751      	b.n	8007154 <_dtoa_r+0x794>
 80072b0:	2300      	movs	r3, #0
 80072b2:	e779      	b.n	80071a8 <_dtoa_r+0x7e8>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	e777      	b.n	80071a8 <_dtoa_r+0x7e8>
 80072b8:	2300      	movs	r3, #0
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	e779      	b.n	80071b2 <_dtoa_r+0x7f2>
 80072be:	d093      	beq.n	80071e8 <_dtoa_r+0x828>
 80072c0:	9a00      	ldr	r2, [sp, #0]
 80072c2:	331c      	adds	r3, #28
 80072c4:	441a      	add	r2, r3
 80072c6:	9200      	str	r2, [sp, #0]
 80072c8:	9a06      	ldr	r2, [sp, #24]
 80072ca:	441a      	add	r2, r3
 80072cc:	441e      	add	r6, r3
 80072ce:	9206      	str	r2, [sp, #24]
 80072d0:	e78a      	b.n	80071e8 <_dtoa_r+0x828>
 80072d2:	4603      	mov	r3, r0
 80072d4:	e7f4      	b.n	80072c0 <_dtoa_r+0x900>
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	46b8      	mov	r8, r7
 80072dc:	dc20      	bgt.n	8007320 <_dtoa_r+0x960>
 80072de:	469b      	mov	fp, r3
 80072e0:	9b07      	ldr	r3, [sp, #28]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	dd1e      	ble.n	8007324 <_dtoa_r+0x964>
 80072e6:	f1bb 0f00 	cmp.w	fp, #0
 80072ea:	f47f adb1 	bne.w	8006e50 <_dtoa_r+0x490>
 80072ee:	4621      	mov	r1, r4
 80072f0:	465b      	mov	r3, fp
 80072f2:	2205      	movs	r2, #5
 80072f4:	4648      	mov	r0, r9
 80072f6:	f000 fa95 	bl	8007824 <__multadd>
 80072fa:	4601      	mov	r1, r0
 80072fc:	4604      	mov	r4, r0
 80072fe:	9802      	ldr	r0, [sp, #8]
 8007300:	f000 fcea 	bl	8007cd8 <__mcmp>
 8007304:	2800      	cmp	r0, #0
 8007306:	f77f ada3 	ble.w	8006e50 <_dtoa_r+0x490>
 800730a:	4656      	mov	r6, sl
 800730c:	2331      	movs	r3, #49	@ 0x31
 800730e:	f806 3b01 	strb.w	r3, [r6], #1
 8007312:	f108 0801 	add.w	r8, r8, #1
 8007316:	e59f      	b.n	8006e58 <_dtoa_r+0x498>
 8007318:	9c03      	ldr	r4, [sp, #12]
 800731a:	46b8      	mov	r8, r7
 800731c:	4625      	mov	r5, r4
 800731e:	e7f4      	b.n	800730a <_dtoa_r+0x94a>
 8007320:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8101 	beq.w	800752e <_dtoa_r+0xb6e>
 800732c:	2e00      	cmp	r6, #0
 800732e:	dd05      	ble.n	800733c <_dtoa_r+0x97c>
 8007330:	4629      	mov	r1, r5
 8007332:	4632      	mov	r2, r6
 8007334:	4648      	mov	r0, r9
 8007336:	f000 fc63 	bl	8007c00 <__lshift>
 800733a:	4605      	mov	r5, r0
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d05c      	beq.n	80073fc <_dtoa_r+0xa3c>
 8007342:	6869      	ldr	r1, [r5, #4]
 8007344:	4648      	mov	r0, r9
 8007346:	f000 fa0b 	bl	8007760 <_Balloc>
 800734a:	4606      	mov	r6, r0
 800734c:	b928      	cbnz	r0, 800735a <_dtoa_r+0x99a>
 800734e:	4b82      	ldr	r3, [pc, #520]	@ (8007558 <_dtoa_r+0xb98>)
 8007350:	4602      	mov	r2, r0
 8007352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007356:	f7ff bb4a 	b.w	80069ee <_dtoa_r+0x2e>
 800735a:	692a      	ldr	r2, [r5, #16]
 800735c:	3202      	adds	r2, #2
 800735e:	0092      	lsls	r2, r2, #2
 8007360:	f105 010c 	add.w	r1, r5, #12
 8007364:	300c      	adds	r0, #12
 8007366:	f001 ff69 	bl	800923c <memcpy>
 800736a:	2201      	movs	r2, #1
 800736c:	4631      	mov	r1, r6
 800736e:	4648      	mov	r0, r9
 8007370:	f000 fc46 	bl	8007c00 <__lshift>
 8007374:	f10a 0301 	add.w	r3, sl, #1
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	eb0a 030b 	add.w	r3, sl, fp
 800737e:	9308      	str	r3, [sp, #32]
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	462f      	mov	r7, r5
 8007388:	9306      	str	r3, [sp, #24]
 800738a:	4605      	mov	r5, r0
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	9802      	ldr	r0, [sp, #8]
 8007390:	4621      	mov	r1, r4
 8007392:	f103 3bff 	add.w	fp, r3, #4294967295
 8007396:	f7ff fa8b 	bl	80068b0 <quorem>
 800739a:	4603      	mov	r3, r0
 800739c:	3330      	adds	r3, #48	@ 0x30
 800739e:	9003      	str	r0, [sp, #12]
 80073a0:	4639      	mov	r1, r7
 80073a2:	9802      	ldr	r0, [sp, #8]
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	f000 fc97 	bl	8007cd8 <__mcmp>
 80073aa:	462a      	mov	r2, r5
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	4621      	mov	r1, r4
 80073b0:	4648      	mov	r0, r9
 80073b2:	f000 fcad 	bl	8007d10 <__mdiff>
 80073b6:	68c2      	ldr	r2, [r0, #12]
 80073b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ba:	4606      	mov	r6, r0
 80073bc:	bb02      	cbnz	r2, 8007400 <_dtoa_r+0xa40>
 80073be:	4601      	mov	r1, r0
 80073c0:	9802      	ldr	r0, [sp, #8]
 80073c2:	f000 fc89 	bl	8007cd8 <__mcmp>
 80073c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c8:	4602      	mov	r2, r0
 80073ca:	4631      	mov	r1, r6
 80073cc:	4648      	mov	r0, r9
 80073ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80073d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d2:	f000 fa05 	bl	80077e0 <_Bfree>
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073da:	9e00      	ldr	r6, [sp, #0]
 80073dc:	ea42 0103 	orr.w	r1, r2, r3
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	4319      	orrs	r1, r3
 80073e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e6:	d10d      	bne.n	8007404 <_dtoa_r+0xa44>
 80073e8:	2b39      	cmp	r3, #57	@ 0x39
 80073ea:	d027      	beq.n	800743c <_dtoa_r+0xa7c>
 80073ec:	9a04      	ldr	r2, [sp, #16]
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	dd01      	ble.n	80073f6 <_dtoa_r+0xa36>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	3331      	adds	r3, #49	@ 0x31
 80073f6:	f88b 3000 	strb.w	r3, [fp]
 80073fa:	e52e      	b.n	8006e5a <_dtoa_r+0x49a>
 80073fc:	4628      	mov	r0, r5
 80073fe:	e7b9      	b.n	8007374 <_dtoa_r+0x9b4>
 8007400:	2201      	movs	r2, #1
 8007402:	e7e2      	b.n	80073ca <_dtoa_r+0xa0a>
 8007404:	9904      	ldr	r1, [sp, #16]
 8007406:	2900      	cmp	r1, #0
 8007408:	db04      	blt.n	8007414 <_dtoa_r+0xa54>
 800740a:	9807      	ldr	r0, [sp, #28]
 800740c:	4301      	orrs	r1, r0
 800740e:	9806      	ldr	r0, [sp, #24]
 8007410:	4301      	orrs	r1, r0
 8007412:	d120      	bne.n	8007456 <_dtoa_r+0xa96>
 8007414:	2a00      	cmp	r2, #0
 8007416:	ddee      	ble.n	80073f6 <_dtoa_r+0xa36>
 8007418:	9902      	ldr	r1, [sp, #8]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	4648      	mov	r0, r9
 8007420:	f000 fbee 	bl	8007c00 <__lshift>
 8007424:	4621      	mov	r1, r4
 8007426:	9002      	str	r0, [sp, #8]
 8007428:	f000 fc56 	bl	8007cd8 <__mcmp>
 800742c:	2800      	cmp	r0, #0
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	dc02      	bgt.n	8007438 <_dtoa_r+0xa78>
 8007432:	d1e0      	bne.n	80073f6 <_dtoa_r+0xa36>
 8007434:	07da      	lsls	r2, r3, #31
 8007436:	d5de      	bpl.n	80073f6 <_dtoa_r+0xa36>
 8007438:	2b39      	cmp	r3, #57	@ 0x39
 800743a:	d1da      	bne.n	80073f2 <_dtoa_r+0xa32>
 800743c:	2339      	movs	r3, #57	@ 0x39
 800743e:	f88b 3000 	strb.w	r3, [fp]
 8007442:	4633      	mov	r3, r6
 8007444:	461e      	mov	r6, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800744c:	2a39      	cmp	r2, #57	@ 0x39
 800744e:	d04e      	beq.n	80074ee <_dtoa_r+0xb2e>
 8007450:	3201      	adds	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e501      	b.n	8006e5a <_dtoa_r+0x49a>
 8007456:	2a00      	cmp	r2, #0
 8007458:	dd03      	ble.n	8007462 <_dtoa_r+0xaa2>
 800745a:	2b39      	cmp	r3, #57	@ 0x39
 800745c:	d0ee      	beq.n	800743c <_dtoa_r+0xa7c>
 800745e:	3301      	adds	r3, #1
 8007460:	e7c9      	b.n	80073f6 <_dtoa_r+0xa36>
 8007462:	9a00      	ldr	r2, [sp, #0]
 8007464:	9908      	ldr	r1, [sp, #32]
 8007466:	f802 3c01 	strb.w	r3, [r2, #-1]
 800746a:	428a      	cmp	r2, r1
 800746c:	d028      	beq.n	80074c0 <_dtoa_r+0xb00>
 800746e:	9902      	ldr	r1, [sp, #8]
 8007470:	2300      	movs	r3, #0
 8007472:	220a      	movs	r2, #10
 8007474:	4648      	mov	r0, r9
 8007476:	f000 f9d5 	bl	8007824 <__multadd>
 800747a:	42af      	cmp	r7, r5
 800747c:	9002      	str	r0, [sp, #8]
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	f04f 020a 	mov.w	r2, #10
 8007486:	4639      	mov	r1, r7
 8007488:	4648      	mov	r0, r9
 800748a:	d107      	bne.n	800749c <_dtoa_r+0xadc>
 800748c:	f000 f9ca 	bl	8007824 <__multadd>
 8007490:	4607      	mov	r7, r0
 8007492:	4605      	mov	r5, r0
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	e777      	b.n	800738c <_dtoa_r+0x9cc>
 800749c:	f000 f9c2 	bl	8007824 <__multadd>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4607      	mov	r7, r0
 80074a4:	2300      	movs	r3, #0
 80074a6:	220a      	movs	r2, #10
 80074a8:	4648      	mov	r0, r9
 80074aa:	f000 f9bb 	bl	8007824 <__multadd>
 80074ae:	4605      	mov	r5, r0
 80074b0:	e7f0      	b.n	8007494 <_dtoa_r+0xad4>
 80074b2:	f1bb 0f00 	cmp.w	fp, #0
 80074b6:	bfcc      	ite	gt
 80074b8:	465e      	movgt	r6, fp
 80074ba:	2601      	movle	r6, #1
 80074bc:	4456      	add	r6, sl
 80074be:	2700      	movs	r7, #0
 80074c0:	9902      	ldr	r1, [sp, #8]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2201      	movs	r2, #1
 80074c6:	4648      	mov	r0, r9
 80074c8:	f000 fb9a 	bl	8007c00 <__lshift>
 80074cc:	4621      	mov	r1, r4
 80074ce:	9002      	str	r0, [sp, #8]
 80074d0:	f000 fc02 	bl	8007cd8 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dcb4      	bgt.n	8007442 <_dtoa_r+0xa82>
 80074d8:	d102      	bne.n	80074e0 <_dtoa_r+0xb20>
 80074da:	9b00      	ldr	r3, [sp, #0]
 80074dc:	07db      	lsls	r3, r3, #31
 80074de:	d4b0      	bmi.n	8007442 <_dtoa_r+0xa82>
 80074e0:	4633      	mov	r3, r6
 80074e2:	461e      	mov	r6, r3
 80074e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074e8:	2a30      	cmp	r2, #48	@ 0x30
 80074ea:	d0fa      	beq.n	80074e2 <_dtoa_r+0xb22>
 80074ec:	e4b5      	b.n	8006e5a <_dtoa_r+0x49a>
 80074ee:	459a      	cmp	sl, r3
 80074f0:	d1a8      	bne.n	8007444 <_dtoa_r+0xa84>
 80074f2:	2331      	movs	r3, #49	@ 0x31
 80074f4:	f108 0801 	add.w	r8, r8, #1
 80074f8:	f88a 3000 	strb.w	r3, [sl]
 80074fc:	e4ad      	b.n	8006e5a <_dtoa_r+0x49a>
 80074fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007500:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800755c <_dtoa_r+0xb9c>
 8007504:	b11b      	cbz	r3, 800750e <_dtoa_r+0xb4e>
 8007506:	f10a 0308 	add.w	r3, sl, #8
 800750a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	4650      	mov	r0, sl
 8007510:	b017      	add	sp, #92	@ 0x5c
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007516:	9b07      	ldr	r3, [sp, #28]
 8007518:	2b01      	cmp	r3, #1
 800751a:	f77f ae2e 	ble.w	800717a <_dtoa_r+0x7ba>
 800751e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007520:	9308      	str	r3, [sp, #32]
 8007522:	2001      	movs	r0, #1
 8007524:	e64d      	b.n	80071c2 <_dtoa_r+0x802>
 8007526:	f1bb 0f00 	cmp.w	fp, #0
 800752a:	f77f aed9 	ble.w	80072e0 <_dtoa_r+0x920>
 800752e:	4656      	mov	r6, sl
 8007530:	9802      	ldr	r0, [sp, #8]
 8007532:	4621      	mov	r1, r4
 8007534:	f7ff f9bc 	bl	80068b0 <quorem>
 8007538:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800753c:	f806 3b01 	strb.w	r3, [r6], #1
 8007540:	eba6 020a 	sub.w	r2, r6, sl
 8007544:	4593      	cmp	fp, r2
 8007546:	ddb4      	ble.n	80074b2 <_dtoa_r+0xaf2>
 8007548:	9902      	ldr	r1, [sp, #8]
 800754a:	2300      	movs	r3, #0
 800754c:	220a      	movs	r2, #10
 800754e:	4648      	mov	r0, r9
 8007550:	f000 f968 	bl	8007824 <__multadd>
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	e7eb      	b.n	8007530 <_dtoa_r+0xb70>
 8007558:	0800b399 	.word	0x0800b399
 800755c:	0800b31d 	.word	0x0800b31d

08007560 <_free_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	2900      	cmp	r1, #0
 8007566:	d041      	beq.n	80075ec <_free_r+0x8c>
 8007568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756c:	1f0c      	subs	r4, r1, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfb8      	it	lt
 8007572:	18e4      	addlt	r4, r4, r3
 8007574:	f000 f8e8 	bl	8007748 <__malloc_lock>
 8007578:	4a1d      	ldr	r2, [pc, #116]	@ (80075f0 <_free_r+0x90>)
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	b933      	cbnz	r3, 800758c <_free_r+0x2c>
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	6014      	str	r4, [r2, #0]
 8007582:	4628      	mov	r0, r5
 8007584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007588:	f000 b8e4 	b.w	8007754 <__malloc_unlock>
 800758c:	42a3      	cmp	r3, r4
 800758e:	d908      	bls.n	80075a2 <_free_r+0x42>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	1821      	adds	r1, r4, r0
 8007594:	428b      	cmp	r3, r1
 8007596:	bf01      	itttt	eq
 8007598:	6819      	ldreq	r1, [r3, #0]
 800759a:	685b      	ldreq	r3, [r3, #4]
 800759c:	1809      	addeq	r1, r1, r0
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	e7ed      	b.n	800757e <_free_r+0x1e>
 80075a2:	461a      	mov	r2, r3
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	b10b      	cbz	r3, 80075ac <_free_r+0x4c>
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d9fa      	bls.n	80075a2 <_free_r+0x42>
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	1850      	adds	r0, r2, r1
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	d10b      	bne.n	80075cc <_free_r+0x6c>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	4401      	add	r1, r0
 80075b8:	1850      	adds	r0, r2, r1
 80075ba:	4283      	cmp	r3, r0
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	d1e0      	bne.n	8007582 <_free_r+0x22>
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	4408      	add	r0, r1
 80075c8:	6010      	str	r0, [r2, #0]
 80075ca:	e7da      	b.n	8007582 <_free_r+0x22>
 80075cc:	d902      	bls.n	80075d4 <_free_r+0x74>
 80075ce:	230c      	movs	r3, #12
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	e7d6      	b.n	8007582 <_free_r+0x22>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	1821      	adds	r1, r4, r0
 80075d8:	428b      	cmp	r3, r1
 80075da:	bf04      	itt	eq
 80075dc:	6819      	ldreq	r1, [r3, #0]
 80075de:	685b      	ldreq	r3, [r3, #4]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	bf04      	itt	eq
 80075e4:	1809      	addeq	r1, r1, r0
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	6054      	str	r4, [r2, #4]
 80075ea:	e7ca      	b.n	8007582 <_free_r+0x22>
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	20000890 	.word	0x20000890

080075f4 <malloc>:
 80075f4:	4b02      	ldr	r3, [pc, #8]	@ (8007600 <malloc+0xc>)
 80075f6:	4601      	mov	r1, r0
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	f000 b825 	b.w	8007648 <_malloc_r>
 80075fe:	bf00      	nop
 8007600:	20000020 	.word	0x20000020

08007604 <sbrk_aligned>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	4e0f      	ldr	r6, [pc, #60]	@ (8007644 <sbrk_aligned+0x40>)
 8007608:	460c      	mov	r4, r1
 800760a:	6831      	ldr	r1, [r6, #0]
 800760c:	4605      	mov	r5, r0
 800760e:	b911      	cbnz	r1, 8007616 <sbrk_aligned+0x12>
 8007610:	f001 fe04 	bl	800921c <_sbrk_r>
 8007614:	6030      	str	r0, [r6, #0]
 8007616:	4621      	mov	r1, r4
 8007618:	4628      	mov	r0, r5
 800761a:	f001 fdff 	bl	800921c <_sbrk_r>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d103      	bne.n	800762a <sbrk_aligned+0x26>
 8007622:	f04f 34ff 	mov.w	r4, #4294967295
 8007626:	4620      	mov	r0, r4
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	1cc4      	adds	r4, r0, #3
 800762c:	f024 0403 	bic.w	r4, r4, #3
 8007630:	42a0      	cmp	r0, r4
 8007632:	d0f8      	beq.n	8007626 <sbrk_aligned+0x22>
 8007634:	1a21      	subs	r1, r4, r0
 8007636:	4628      	mov	r0, r5
 8007638:	f001 fdf0 	bl	800921c <_sbrk_r>
 800763c:	3001      	adds	r0, #1
 800763e:	d1f2      	bne.n	8007626 <sbrk_aligned+0x22>
 8007640:	e7ef      	b.n	8007622 <sbrk_aligned+0x1e>
 8007642:	bf00      	nop
 8007644:	2000088c 	.word	0x2000088c

08007648 <_malloc_r>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	1ccd      	adds	r5, r1, #3
 800764e:	f025 0503 	bic.w	r5, r5, #3
 8007652:	3508      	adds	r5, #8
 8007654:	2d0c      	cmp	r5, #12
 8007656:	bf38      	it	cc
 8007658:	250c      	movcc	r5, #12
 800765a:	2d00      	cmp	r5, #0
 800765c:	4606      	mov	r6, r0
 800765e:	db01      	blt.n	8007664 <_malloc_r+0x1c>
 8007660:	42a9      	cmp	r1, r5
 8007662:	d904      	bls.n	800766e <_malloc_r+0x26>
 8007664:	230c      	movs	r3, #12
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	2000      	movs	r0, #0
 800766a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007744 <_malloc_r+0xfc>
 8007672:	f000 f869 	bl	8007748 <__malloc_lock>
 8007676:	f8d8 3000 	ldr.w	r3, [r8]
 800767a:	461c      	mov	r4, r3
 800767c:	bb44      	cbnz	r4, 80076d0 <_malloc_r+0x88>
 800767e:	4629      	mov	r1, r5
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ffbf 	bl	8007604 <sbrk_aligned>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	4604      	mov	r4, r0
 800768a:	d158      	bne.n	800773e <_malloc_r+0xf6>
 800768c:	f8d8 4000 	ldr.w	r4, [r8]
 8007690:	4627      	mov	r7, r4
 8007692:	2f00      	cmp	r7, #0
 8007694:	d143      	bne.n	800771e <_malloc_r+0xd6>
 8007696:	2c00      	cmp	r4, #0
 8007698:	d04b      	beq.n	8007732 <_malloc_r+0xea>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	4639      	mov	r1, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	eb04 0903 	add.w	r9, r4, r3
 80076a4:	f001 fdba 	bl	800921c <_sbrk_r>
 80076a8:	4581      	cmp	r9, r0
 80076aa:	d142      	bne.n	8007732 <_malloc_r+0xea>
 80076ac:	6821      	ldr	r1, [r4, #0]
 80076ae:	1a6d      	subs	r5, r5, r1
 80076b0:	4629      	mov	r1, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ffa6 	bl	8007604 <sbrk_aligned>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d03a      	beq.n	8007732 <_malloc_r+0xea>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	442b      	add	r3, r5
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	f8d8 3000 	ldr.w	r3, [r8]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	bb62      	cbnz	r2, 8007724 <_malloc_r+0xdc>
 80076ca:	f8c8 7000 	str.w	r7, [r8]
 80076ce:	e00f      	b.n	80076f0 <_malloc_r+0xa8>
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	1b52      	subs	r2, r2, r5
 80076d4:	d420      	bmi.n	8007718 <_malloc_r+0xd0>
 80076d6:	2a0b      	cmp	r2, #11
 80076d8:	d917      	bls.n	800770a <_malloc_r+0xc2>
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	42a3      	cmp	r3, r4
 80076de:	6025      	str	r5, [r4, #0]
 80076e0:	bf18      	it	ne
 80076e2:	6059      	strne	r1, [r3, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	bf08      	it	eq
 80076e8:	f8c8 1000 	streq.w	r1, [r8]
 80076ec:	5162      	str	r2, [r4, r5]
 80076ee:	604b      	str	r3, [r1, #4]
 80076f0:	4630      	mov	r0, r6
 80076f2:	f000 f82f 	bl	8007754 <__malloc_unlock>
 80076f6:	f104 000b 	add.w	r0, r4, #11
 80076fa:	1d23      	adds	r3, r4, #4
 80076fc:	f020 0007 	bic.w	r0, r0, #7
 8007700:	1ac2      	subs	r2, r0, r3
 8007702:	bf1c      	itt	ne
 8007704:	1a1b      	subne	r3, r3, r0
 8007706:	50a3      	strne	r3, [r4, r2]
 8007708:	e7af      	b.n	800766a <_malloc_r+0x22>
 800770a:	6862      	ldr	r2, [r4, #4]
 800770c:	42a3      	cmp	r3, r4
 800770e:	bf0c      	ite	eq
 8007710:	f8c8 2000 	streq.w	r2, [r8]
 8007714:	605a      	strne	r2, [r3, #4]
 8007716:	e7eb      	b.n	80076f0 <_malloc_r+0xa8>
 8007718:	4623      	mov	r3, r4
 800771a:	6864      	ldr	r4, [r4, #4]
 800771c:	e7ae      	b.n	800767c <_malloc_r+0x34>
 800771e:	463c      	mov	r4, r7
 8007720:	687f      	ldr	r7, [r7, #4]
 8007722:	e7b6      	b.n	8007692 <_malloc_r+0x4a>
 8007724:	461a      	mov	r2, r3
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	42a3      	cmp	r3, r4
 800772a:	d1fb      	bne.n	8007724 <_malloc_r+0xdc>
 800772c:	2300      	movs	r3, #0
 800772e:	6053      	str	r3, [r2, #4]
 8007730:	e7de      	b.n	80076f0 <_malloc_r+0xa8>
 8007732:	230c      	movs	r3, #12
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	4630      	mov	r0, r6
 8007738:	f000 f80c 	bl	8007754 <__malloc_unlock>
 800773c:	e794      	b.n	8007668 <_malloc_r+0x20>
 800773e:	6005      	str	r5, [r0, #0]
 8007740:	e7d6      	b.n	80076f0 <_malloc_r+0xa8>
 8007742:	bf00      	nop
 8007744:	20000890 	.word	0x20000890

08007748 <__malloc_lock>:
 8007748:	4801      	ldr	r0, [pc, #4]	@ (8007750 <__malloc_lock+0x8>)
 800774a:	f7ff b8a8 	b.w	800689e <__retarget_lock_acquire_recursive>
 800774e:	bf00      	nop
 8007750:	20000888 	.word	0x20000888

08007754 <__malloc_unlock>:
 8007754:	4801      	ldr	r0, [pc, #4]	@ (800775c <__malloc_unlock+0x8>)
 8007756:	f7ff b8a3 	b.w	80068a0 <__retarget_lock_release_recursive>
 800775a:	bf00      	nop
 800775c:	20000888 	.word	0x20000888

08007760 <_Balloc>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	69c6      	ldr	r6, [r0, #28]
 8007764:	4604      	mov	r4, r0
 8007766:	460d      	mov	r5, r1
 8007768:	b976      	cbnz	r6, 8007788 <_Balloc+0x28>
 800776a:	2010      	movs	r0, #16
 800776c:	f7ff ff42 	bl	80075f4 <malloc>
 8007770:	4602      	mov	r2, r0
 8007772:	61e0      	str	r0, [r4, #28]
 8007774:	b920      	cbnz	r0, 8007780 <_Balloc+0x20>
 8007776:	4b18      	ldr	r3, [pc, #96]	@ (80077d8 <_Balloc+0x78>)
 8007778:	4818      	ldr	r0, [pc, #96]	@ (80077dc <_Balloc+0x7c>)
 800777a:	216b      	movs	r1, #107	@ 0x6b
 800777c:	f001 fd74 	bl	8009268 <__assert_func>
 8007780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007784:	6006      	str	r6, [r0, #0]
 8007786:	60c6      	str	r6, [r0, #12]
 8007788:	69e6      	ldr	r6, [r4, #28]
 800778a:	68f3      	ldr	r3, [r6, #12]
 800778c:	b183      	cbz	r3, 80077b0 <_Balloc+0x50>
 800778e:	69e3      	ldr	r3, [r4, #28]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007796:	b9b8      	cbnz	r0, 80077c8 <_Balloc+0x68>
 8007798:	2101      	movs	r1, #1
 800779a:	fa01 f605 	lsl.w	r6, r1, r5
 800779e:	1d72      	adds	r2, r6, #5
 80077a0:	0092      	lsls	r2, r2, #2
 80077a2:	4620      	mov	r0, r4
 80077a4:	f001 fd7e 	bl	80092a4 <_calloc_r>
 80077a8:	b160      	cbz	r0, 80077c4 <_Balloc+0x64>
 80077aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ae:	e00e      	b.n	80077ce <_Balloc+0x6e>
 80077b0:	2221      	movs	r2, #33	@ 0x21
 80077b2:	2104      	movs	r1, #4
 80077b4:	4620      	mov	r0, r4
 80077b6:	f001 fd75 	bl	80092a4 <_calloc_r>
 80077ba:	69e3      	ldr	r3, [r4, #28]
 80077bc:	60f0      	str	r0, [r6, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e4      	bne.n	800778e <_Balloc+0x2e>
 80077c4:	2000      	movs	r0, #0
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	6802      	ldr	r2, [r0, #0]
 80077ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ce:	2300      	movs	r3, #0
 80077d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077d4:	e7f7      	b.n	80077c6 <_Balloc+0x66>
 80077d6:	bf00      	nop
 80077d8:	0800b32a 	.word	0x0800b32a
 80077dc:	0800b3aa 	.word	0x0800b3aa

080077e0 <_Bfree>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	69c6      	ldr	r6, [r0, #28]
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	b976      	cbnz	r6, 8007808 <_Bfree+0x28>
 80077ea:	2010      	movs	r0, #16
 80077ec:	f7ff ff02 	bl	80075f4 <malloc>
 80077f0:	4602      	mov	r2, r0
 80077f2:	61e8      	str	r0, [r5, #28]
 80077f4:	b920      	cbnz	r0, 8007800 <_Bfree+0x20>
 80077f6:	4b09      	ldr	r3, [pc, #36]	@ (800781c <_Bfree+0x3c>)
 80077f8:	4809      	ldr	r0, [pc, #36]	@ (8007820 <_Bfree+0x40>)
 80077fa:	218f      	movs	r1, #143	@ 0x8f
 80077fc:	f001 fd34 	bl	8009268 <__assert_func>
 8007800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007804:	6006      	str	r6, [r0, #0]
 8007806:	60c6      	str	r6, [r0, #12]
 8007808:	b13c      	cbz	r4, 800781a <_Bfree+0x3a>
 800780a:	69eb      	ldr	r3, [r5, #28]
 800780c:	6862      	ldr	r2, [r4, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007814:	6021      	str	r1, [r4, #0]
 8007816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	0800b32a 	.word	0x0800b32a
 8007820:	0800b3aa 	.word	0x0800b3aa

08007824 <__multadd>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	690d      	ldr	r5, [r1, #16]
 800782a:	4607      	mov	r7, r0
 800782c:	460c      	mov	r4, r1
 800782e:	461e      	mov	r6, r3
 8007830:	f101 0c14 	add.w	ip, r1, #20
 8007834:	2000      	movs	r0, #0
 8007836:	f8dc 3000 	ldr.w	r3, [ip]
 800783a:	b299      	uxth	r1, r3
 800783c:	fb02 6101 	mla	r1, r2, r1, r6
 8007840:	0c1e      	lsrs	r6, r3, #16
 8007842:	0c0b      	lsrs	r3, r1, #16
 8007844:	fb02 3306 	mla	r3, r2, r6, r3
 8007848:	b289      	uxth	r1, r1
 800784a:	3001      	adds	r0, #1
 800784c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007850:	4285      	cmp	r5, r0
 8007852:	f84c 1b04 	str.w	r1, [ip], #4
 8007856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800785a:	dcec      	bgt.n	8007836 <__multadd+0x12>
 800785c:	b30e      	cbz	r6, 80078a2 <__multadd+0x7e>
 800785e:	68a3      	ldr	r3, [r4, #8]
 8007860:	42ab      	cmp	r3, r5
 8007862:	dc19      	bgt.n	8007898 <__multadd+0x74>
 8007864:	6861      	ldr	r1, [r4, #4]
 8007866:	4638      	mov	r0, r7
 8007868:	3101      	adds	r1, #1
 800786a:	f7ff ff79 	bl	8007760 <_Balloc>
 800786e:	4680      	mov	r8, r0
 8007870:	b928      	cbnz	r0, 800787e <__multadd+0x5a>
 8007872:	4602      	mov	r2, r0
 8007874:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <__multadd+0x84>)
 8007876:	480d      	ldr	r0, [pc, #52]	@ (80078ac <__multadd+0x88>)
 8007878:	21ba      	movs	r1, #186	@ 0xba
 800787a:	f001 fcf5 	bl	8009268 <__assert_func>
 800787e:	6922      	ldr	r2, [r4, #16]
 8007880:	3202      	adds	r2, #2
 8007882:	f104 010c 	add.w	r1, r4, #12
 8007886:	0092      	lsls	r2, r2, #2
 8007888:	300c      	adds	r0, #12
 800788a:	f001 fcd7 	bl	800923c <memcpy>
 800788e:	4621      	mov	r1, r4
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa5 	bl	80077e0 <_Bfree>
 8007896:	4644      	mov	r4, r8
 8007898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800789c:	3501      	adds	r5, #1
 800789e:	615e      	str	r6, [r3, #20]
 80078a0:	6125      	str	r5, [r4, #16]
 80078a2:	4620      	mov	r0, r4
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	0800b399 	.word	0x0800b399
 80078ac:	0800b3aa 	.word	0x0800b3aa

080078b0 <__s2b>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	4615      	mov	r5, r2
 80078b8:	461f      	mov	r7, r3
 80078ba:	2209      	movs	r2, #9
 80078bc:	3308      	adds	r3, #8
 80078be:	4606      	mov	r6, r0
 80078c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c4:	2100      	movs	r1, #0
 80078c6:	2201      	movs	r2, #1
 80078c8:	429a      	cmp	r2, r3
 80078ca:	db09      	blt.n	80078e0 <__s2b+0x30>
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff ff47 	bl	8007760 <_Balloc>
 80078d2:	b940      	cbnz	r0, 80078e6 <__s2b+0x36>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b19      	ldr	r3, [pc, #100]	@ (800793c <__s2b+0x8c>)
 80078d8:	4819      	ldr	r0, [pc, #100]	@ (8007940 <__s2b+0x90>)
 80078da:	21d3      	movs	r1, #211	@ 0xd3
 80078dc:	f001 fcc4 	bl	8009268 <__assert_func>
 80078e0:	0052      	lsls	r2, r2, #1
 80078e2:	3101      	adds	r1, #1
 80078e4:	e7f0      	b.n	80078c8 <__s2b+0x18>
 80078e6:	9b08      	ldr	r3, [sp, #32]
 80078e8:	6143      	str	r3, [r0, #20]
 80078ea:	2d09      	cmp	r5, #9
 80078ec:	f04f 0301 	mov.w	r3, #1
 80078f0:	6103      	str	r3, [r0, #16]
 80078f2:	dd16      	ble.n	8007922 <__s2b+0x72>
 80078f4:	f104 0909 	add.w	r9, r4, #9
 80078f8:	46c8      	mov	r8, r9
 80078fa:	442c      	add	r4, r5
 80078fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007900:	4601      	mov	r1, r0
 8007902:	3b30      	subs	r3, #48	@ 0x30
 8007904:	220a      	movs	r2, #10
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ff8c 	bl	8007824 <__multadd>
 800790c:	45a0      	cmp	r8, r4
 800790e:	d1f5      	bne.n	80078fc <__s2b+0x4c>
 8007910:	f1a5 0408 	sub.w	r4, r5, #8
 8007914:	444c      	add	r4, r9
 8007916:	1b2d      	subs	r5, r5, r4
 8007918:	1963      	adds	r3, r4, r5
 800791a:	42bb      	cmp	r3, r7
 800791c:	db04      	blt.n	8007928 <__s2b+0x78>
 800791e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007922:	340a      	adds	r4, #10
 8007924:	2509      	movs	r5, #9
 8007926:	e7f6      	b.n	8007916 <__s2b+0x66>
 8007928:	f814 3b01 	ldrb.w	r3, [r4], #1
 800792c:	4601      	mov	r1, r0
 800792e:	3b30      	subs	r3, #48	@ 0x30
 8007930:	220a      	movs	r2, #10
 8007932:	4630      	mov	r0, r6
 8007934:	f7ff ff76 	bl	8007824 <__multadd>
 8007938:	e7ee      	b.n	8007918 <__s2b+0x68>
 800793a:	bf00      	nop
 800793c:	0800b399 	.word	0x0800b399
 8007940:	0800b3aa 	.word	0x0800b3aa

08007944 <__hi0bits>:
 8007944:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007948:	4603      	mov	r3, r0
 800794a:	bf36      	itet	cc
 800794c:	0403      	lslcc	r3, r0, #16
 800794e:	2000      	movcs	r0, #0
 8007950:	2010      	movcc	r0, #16
 8007952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007956:	bf3c      	itt	cc
 8007958:	021b      	lslcc	r3, r3, #8
 800795a:	3008      	addcc	r0, #8
 800795c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007960:	bf3c      	itt	cc
 8007962:	011b      	lslcc	r3, r3, #4
 8007964:	3004      	addcc	r0, #4
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796a:	bf3c      	itt	cc
 800796c:	009b      	lslcc	r3, r3, #2
 800796e:	3002      	addcc	r0, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	db05      	blt.n	8007980 <__hi0bits+0x3c>
 8007974:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007978:	f100 0001 	add.w	r0, r0, #1
 800797c:	bf08      	it	eq
 800797e:	2020      	moveq	r0, #32
 8007980:	4770      	bx	lr

08007982 <__lo0bits>:
 8007982:	6803      	ldr	r3, [r0, #0]
 8007984:	4602      	mov	r2, r0
 8007986:	f013 0007 	ands.w	r0, r3, #7
 800798a:	d00b      	beq.n	80079a4 <__lo0bits+0x22>
 800798c:	07d9      	lsls	r1, r3, #31
 800798e:	d421      	bmi.n	80079d4 <__lo0bits+0x52>
 8007990:	0798      	lsls	r0, r3, #30
 8007992:	bf49      	itett	mi
 8007994:	085b      	lsrmi	r3, r3, #1
 8007996:	089b      	lsrpl	r3, r3, #2
 8007998:	2001      	movmi	r0, #1
 800799a:	6013      	strmi	r3, [r2, #0]
 800799c:	bf5c      	itt	pl
 800799e:	6013      	strpl	r3, [r2, #0]
 80079a0:	2002      	movpl	r0, #2
 80079a2:	4770      	bx	lr
 80079a4:	b299      	uxth	r1, r3
 80079a6:	b909      	cbnz	r1, 80079ac <__lo0bits+0x2a>
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	2010      	movs	r0, #16
 80079ac:	b2d9      	uxtb	r1, r3
 80079ae:	b909      	cbnz	r1, 80079b4 <__lo0bits+0x32>
 80079b0:	3008      	adds	r0, #8
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	0719      	lsls	r1, r3, #28
 80079b6:	bf04      	itt	eq
 80079b8:	091b      	lsreq	r3, r3, #4
 80079ba:	3004      	addeq	r0, #4
 80079bc:	0799      	lsls	r1, r3, #30
 80079be:	bf04      	itt	eq
 80079c0:	089b      	lsreq	r3, r3, #2
 80079c2:	3002      	addeq	r0, #2
 80079c4:	07d9      	lsls	r1, r3, #31
 80079c6:	d403      	bmi.n	80079d0 <__lo0bits+0x4e>
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	f100 0001 	add.w	r0, r0, #1
 80079ce:	d003      	beq.n	80079d8 <__lo0bits+0x56>
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	4770      	bx	lr
 80079d4:	2000      	movs	r0, #0
 80079d6:	4770      	bx	lr
 80079d8:	2020      	movs	r0, #32
 80079da:	4770      	bx	lr

080079dc <__i2b>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	460c      	mov	r4, r1
 80079e0:	2101      	movs	r1, #1
 80079e2:	f7ff febd 	bl	8007760 <_Balloc>
 80079e6:	4602      	mov	r2, r0
 80079e8:	b928      	cbnz	r0, 80079f6 <__i2b+0x1a>
 80079ea:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <__i2b+0x24>)
 80079ec:	4805      	ldr	r0, [pc, #20]	@ (8007a04 <__i2b+0x28>)
 80079ee:	f240 1145 	movw	r1, #325	@ 0x145
 80079f2:	f001 fc39 	bl	8009268 <__assert_func>
 80079f6:	2301      	movs	r3, #1
 80079f8:	6144      	str	r4, [r0, #20]
 80079fa:	6103      	str	r3, [r0, #16]
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	0800b399 	.word	0x0800b399
 8007a04:	0800b3aa 	.word	0x0800b3aa

08007a08 <__multiply>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4617      	mov	r7, r2
 8007a0e:	690a      	ldr	r2, [r1, #16]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	bfa8      	it	ge
 8007a16:	463b      	movge	r3, r7
 8007a18:	4689      	mov	r9, r1
 8007a1a:	bfa4      	itt	ge
 8007a1c:	460f      	movge	r7, r1
 8007a1e:	4699      	movge	r9, r3
 8007a20:	693d      	ldr	r5, [r7, #16]
 8007a22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	eb05 060a 	add.w	r6, r5, sl
 8007a2e:	42b3      	cmp	r3, r6
 8007a30:	b085      	sub	sp, #20
 8007a32:	bfb8      	it	lt
 8007a34:	3101      	addlt	r1, #1
 8007a36:	f7ff fe93 	bl	8007760 <_Balloc>
 8007a3a:	b930      	cbnz	r0, 8007a4a <__multiply+0x42>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4b41      	ldr	r3, [pc, #260]	@ (8007b44 <__multiply+0x13c>)
 8007a40:	4841      	ldr	r0, [pc, #260]	@ (8007b48 <__multiply+0x140>)
 8007a42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a46:	f001 fc0f 	bl	8009268 <__assert_func>
 8007a4a:	f100 0414 	add.w	r4, r0, #20
 8007a4e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a52:	4623      	mov	r3, r4
 8007a54:	2200      	movs	r2, #0
 8007a56:	4573      	cmp	r3, lr
 8007a58:	d320      	bcc.n	8007a9c <__multiply+0x94>
 8007a5a:	f107 0814 	add.w	r8, r7, #20
 8007a5e:	f109 0114 	add.w	r1, r9, #20
 8007a62:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a66:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	1beb      	subs	r3, r5, r7
 8007a6e:	3b15      	subs	r3, #21
 8007a70:	f023 0303 	bic.w	r3, r3, #3
 8007a74:	3304      	adds	r3, #4
 8007a76:	3715      	adds	r7, #21
 8007a78:	42bd      	cmp	r5, r7
 8007a7a:	bf38      	it	cc
 8007a7c:	2304      	movcc	r3, #4
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d80c      	bhi.n	8007aa2 <__multiply+0x9a>
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	dd03      	ble.n	8007a94 <__multiply+0x8c>
 8007a8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d055      	beq.n	8007b40 <__multiply+0x138>
 8007a94:	6106      	str	r6, [r0, #16]
 8007a96:	b005      	add	sp, #20
 8007a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9c:	f843 2b04 	str.w	r2, [r3], #4
 8007aa0:	e7d9      	b.n	8007a56 <__multiply+0x4e>
 8007aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007aa6:	f1ba 0f00 	cmp.w	sl, #0
 8007aaa:	d01f      	beq.n	8007aec <__multiply+0xe4>
 8007aac:	46c4      	mov	ip, r8
 8007aae:	46a1      	mov	r9, r4
 8007ab0:	2700      	movs	r7, #0
 8007ab2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ab6:	f8d9 3000 	ldr.w	r3, [r9]
 8007aba:	fa1f fb82 	uxth.w	fp, r2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ac4:	443b      	add	r3, r7
 8007ac6:	f8d9 7000 	ldr.w	r7, [r9]
 8007aca:	0c12      	lsrs	r2, r2, #16
 8007acc:	0c3f      	lsrs	r7, r7, #16
 8007ace:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ad2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007adc:	4565      	cmp	r5, ip
 8007ade:	f849 3b04 	str.w	r3, [r9], #4
 8007ae2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007ae6:	d8e4      	bhi.n	8007ab2 <__multiply+0xaa>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	50e7      	str	r7, [r4, r3]
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007af2:	3104      	adds	r1, #4
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	d020      	beq.n	8007b3c <__multiply+0x134>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	4647      	mov	r7, r8
 8007afe:	46a4      	mov	ip, r4
 8007b00:	f04f 0a00 	mov.w	sl, #0
 8007b04:	f8b7 b000 	ldrh.w	fp, [r7]
 8007b08:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007b0c:	fb09 220b 	mla	r2, r9, fp, r2
 8007b10:	4452      	add	r2, sl
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b18:	f84c 3b04 	str.w	r3, [ip], #4
 8007b1c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b24:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b28:	fb09 330a 	mla	r3, r9, sl, r3
 8007b2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b30:	42bd      	cmp	r5, r7
 8007b32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b36:	d8e5      	bhi.n	8007b04 <__multiply+0xfc>
 8007b38:	9a01      	ldr	r2, [sp, #4]
 8007b3a:	50a3      	str	r3, [r4, r2]
 8007b3c:	3404      	adds	r4, #4
 8007b3e:	e79f      	b.n	8007a80 <__multiply+0x78>
 8007b40:	3e01      	subs	r6, #1
 8007b42:	e7a1      	b.n	8007a88 <__multiply+0x80>
 8007b44:	0800b399 	.word	0x0800b399
 8007b48:	0800b3aa 	.word	0x0800b3aa

08007b4c <__pow5mult>:
 8007b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b50:	4615      	mov	r5, r2
 8007b52:	f012 0203 	ands.w	r2, r2, #3
 8007b56:	4607      	mov	r7, r0
 8007b58:	460e      	mov	r6, r1
 8007b5a:	d007      	beq.n	8007b6c <__pow5mult+0x20>
 8007b5c:	4c25      	ldr	r4, [pc, #148]	@ (8007bf4 <__pow5mult+0xa8>)
 8007b5e:	3a01      	subs	r2, #1
 8007b60:	2300      	movs	r3, #0
 8007b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b66:	f7ff fe5d 	bl	8007824 <__multadd>
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	10ad      	asrs	r5, r5, #2
 8007b6e:	d03d      	beq.n	8007bec <__pow5mult+0xa0>
 8007b70:	69fc      	ldr	r4, [r7, #28]
 8007b72:	b97c      	cbnz	r4, 8007b94 <__pow5mult+0x48>
 8007b74:	2010      	movs	r0, #16
 8007b76:	f7ff fd3d 	bl	80075f4 <malloc>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	61f8      	str	r0, [r7, #28]
 8007b7e:	b928      	cbnz	r0, 8007b8c <__pow5mult+0x40>
 8007b80:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <__pow5mult+0xac>)
 8007b82:	481e      	ldr	r0, [pc, #120]	@ (8007bfc <__pow5mult+0xb0>)
 8007b84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b88:	f001 fb6e 	bl	8009268 <__assert_func>
 8007b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b90:	6004      	str	r4, [r0, #0]
 8007b92:	60c4      	str	r4, [r0, #12]
 8007b94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b9c:	b94c      	cbnz	r4, 8007bb2 <__pow5mult+0x66>
 8007b9e:	f240 2171 	movw	r1, #625	@ 0x271
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7ff ff1a 	bl	80079dc <__i2b>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bae:	4604      	mov	r4, r0
 8007bb0:	6003      	str	r3, [r0, #0]
 8007bb2:	f04f 0900 	mov.w	r9, #0
 8007bb6:	07eb      	lsls	r3, r5, #31
 8007bb8:	d50a      	bpl.n	8007bd0 <__pow5mult+0x84>
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7ff ff22 	bl	8007a08 <__multiply>
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff fe09 	bl	80077e0 <_Bfree>
 8007bce:	4646      	mov	r6, r8
 8007bd0:	106d      	asrs	r5, r5, #1
 8007bd2:	d00b      	beq.n	8007bec <__pow5mult+0xa0>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	b938      	cbnz	r0, 8007be8 <__pow5mult+0x9c>
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff ff13 	bl	8007a08 <__multiply>
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	f8c0 9000 	str.w	r9, [r0]
 8007be8:	4604      	mov	r4, r0
 8007bea:	e7e4      	b.n	8007bb6 <__pow5mult+0x6a>
 8007bec:	4630      	mov	r0, r6
 8007bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	bf00      	nop
 8007bf4:	0800b4bc 	.word	0x0800b4bc
 8007bf8:	0800b32a 	.word	0x0800b32a
 8007bfc:	0800b3aa 	.word	0x0800b3aa

08007c00 <__lshift>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	6849      	ldr	r1, [r1, #4]
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	4607      	mov	r7, r0
 8007c12:	4691      	mov	r9, r2
 8007c14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c18:	f108 0601 	add.w	r6, r8, #1
 8007c1c:	42b3      	cmp	r3, r6
 8007c1e:	db0b      	blt.n	8007c38 <__lshift+0x38>
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff fd9d 	bl	8007760 <_Balloc>
 8007c26:	4605      	mov	r5, r0
 8007c28:	b948      	cbnz	r0, 8007c3e <__lshift+0x3e>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4b28      	ldr	r3, [pc, #160]	@ (8007cd0 <__lshift+0xd0>)
 8007c2e:	4829      	ldr	r0, [pc, #164]	@ (8007cd4 <__lshift+0xd4>)
 8007c30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c34:	f001 fb18 	bl	8009268 <__assert_func>
 8007c38:	3101      	adds	r1, #1
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	e7ee      	b.n	8007c1c <__lshift+0x1c>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f100 0114 	add.w	r1, r0, #20
 8007c44:	f100 0210 	add.w	r2, r0, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	4553      	cmp	r3, sl
 8007c4c:	db33      	blt.n	8007cb6 <__lshift+0xb6>
 8007c4e:	6920      	ldr	r0, [r4, #16]
 8007c50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c54:	f104 0314 	add.w	r3, r4, #20
 8007c58:	f019 091f 	ands.w	r9, r9, #31
 8007c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c64:	d02b      	beq.n	8007cbe <__lshift+0xbe>
 8007c66:	f1c9 0e20 	rsb	lr, r9, #32
 8007c6a:	468a      	mov	sl, r1
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	fa00 f009 	lsl.w	r0, r0, r9
 8007c74:	4310      	orrs	r0, r2
 8007c76:	f84a 0b04 	str.w	r0, [sl], #4
 8007c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7e:	459c      	cmp	ip, r3
 8007c80:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c84:	d8f3      	bhi.n	8007c6e <__lshift+0x6e>
 8007c86:	ebac 0304 	sub.w	r3, ip, r4
 8007c8a:	3b15      	subs	r3, #21
 8007c8c:	f023 0303 	bic.w	r3, r3, #3
 8007c90:	3304      	adds	r3, #4
 8007c92:	f104 0015 	add.w	r0, r4, #21
 8007c96:	4560      	cmp	r0, ip
 8007c98:	bf88      	it	hi
 8007c9a:	2304      	movhi	r3, #4
 8007c9c:	50ca      	str	r2, [r1, r3]
 8007c9e:	b10a      	cbz	r2, 8007ca4 <__lshift+0xa4>
 8007ca0:	f108 0602 	add.w	r6, r8, #2
 8007ca4:	3e01      	subs	r6, #1
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	612e      	str	r6, [r5, #16]
 8007caa:	4621      	mov	r1, r4
 8007cac:	f7ff fd98 	bl	80077e0 <_Bfree>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cba:	3301      	adds	r3, #1
 8007cbc:	e7c5      	b.n	8007c4a <__lshift+0x4a>
 8007cbe:	3904      	subs	r1, #4
 8007cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cc8:	459c      	cmp	ip, r3
 8007cca:	d8f9      	bhi.n	8007cc0 <__lshift+0xc0>
 8007ccc:	e7ea      	b.n	8007ca4 <__lshift+0xa4>
 8007cce:	bf00      	nop
 8007cd0:	0800b399 	.word	0x0800b399
 8007cd4:	0800b3aa 	.word	0x0800b3aa

08007cd8 <__mcmp>:
 8007cd8:	690a      	ldr	r2, [r1, #16]
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6900      	ldr	r0, [r0, #16]
 8007cde:	1a80      	subs	r0, r0, r2
 8007ce0:	b530      	push	{r4, r5, lr}
 8007ce2:	d10e      	bne.n	8007d02 <__mcmp+0x2a>
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	3114      	adds	r1, #20
 8007ce8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cf8:	4295      	cmp	r5, r2
 8007cfa:	d003      	beq.n	8007d04 <__mcmp+0x2c>
 8007cfc:	d205      	bcs.n	8007d0a <__mcmp+0x32>
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d3f3      	bcc.n	8007cf0 <__mcmp+0x18>
 8007d08:	e7fb      	b.n	8007d02 <__mcmp+0x2a>
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e7f9      	b.n	8007d02 <__mcmp+0x2a>
	...

08007d10 <__mdiff>:
 8007d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4689      	mov	r9, r1
 8007d16:	4606      	mov	r6, r0
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4648      	mov	r0, r9
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	f7ff ffdb 	bl	8007cd8 <__mcmp>
 8007d22:	1e05      	subs	r5, r0, #0
 8007d24:	d112      	bne.n	8007d4c <__mdiff+0x3c>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff fd19 	bl	8007760 <_Balloc>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	b928      	cbnz	r0, 8007d3e <__mdiff+0x2e>
 8007d32:	4b3f      	ldr	r3, [pc, #252]	@ (8007e30 <__mdiff+0x120>)
 8007d34:	f240 2137 	movw	r1, #567	@ 0x237
 8007d38:	483e      	ldr	r0, [pc, #248]	@ (8007e34 <__mdiff+0x124>)
 8007d3a:	f001 fa95 	bl	8009268 <__assert_func>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d44:	4610      	mov	r0, r2
 8007d46:	b003      	add	sp, #12
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	bfbc      	itt	lt
 8007d4e:	464b      	movlt	r3, r9
 8007d50:	46a1      	movlt	r9, r4
 8007d52:	4630      	mov	r0, r6
 8007d54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d58:	bfba      	itte	lt
 8007d5a:	461c      	movlt	r4, r3
 8007d5c:	2501      	movlt	r5, #1
 8007d5e:	2500      	movge	r5, #0
 8007d60:	f7ff fcfe 	bl	8007760 <_Balloc>
 8007d64:	4602      	mov	r2, r0
 8007d66:	b918      	cbnz	r0, 8007d70 <__mdiff+0x60>
 8007d68:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <__mdiff+0x120>)
 8007d6a:	f240 2145 	movw	r1, #581	@ 0x245
 8007d6e:	e7e3      	b.n	8007d38 <__mdiff+0x28>
 8007d70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d74:	6926      	ldr	r6, [r4, #16]
 8007d76:	60c5      	str	r5, [r0, #12]
 8007d78:	f109 0310 	add.w	r3, r9, #16
 8007d7c:	f109 0514 	add.w	r5, r9, #20
 8007d80:	f104 0e14 	add.w	lr, r4, #20
 8007d84:	f100 0b14 	add.w	fp, r0, #20
 8007d88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	46d9      	mov	r9, fp
 8007d94:	f04f 0c00 	mov.w	ip, #0
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	fa1f f38a 	uxth.w	r3, sl
 8007da8:	4619      	mov	r1, r3
 8007daa:	b283      	uxth	r3, r0
 8007dac:	1acb      	subs	r3, r1, r3
 8007dae:	0c00      	lsrs	r0, r0, #16
 8007db0:	4463      	add	r3, ip
 8007db2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007db6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dc0:	4576      	cmp	r6, lr
 8007dc2:	f849 3b04 	str.w	r3, [r9], #4
 8007dc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dca:	d8e5      	bhi.n	8007d98 <__mdiff+0x88>
 8007dcc:	1b33      	subs	r3, r6, r4
 8007dce:	3b15      	subs	r3, #21
 8007dd0:	f023 0303 	bic.w	r3, r3, #3
 8007dd4:	3415      	adds	r4, #21
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	42a6      	cmp	r6, r4
 8007dda:	bf38      	it	cc
 8007ddc:	2304      	movcc	r3, #4
 8007dde:	441d      	add	r5, r3
 8007de0:	445b      	add	r3, fp
 8007de2:	461e      	mov	r6, r3
 8007de4:	462c      	mov	r4, r5
 8007de6:	4544      	cmp	r4, r8
 8007de8:	d30e      	bcc.n	8007e08 <__mdiff+0xf8>
 8007dea:	f108 0103 	add.w	r1, r8, #3
 8007dee:	1b49      	subs	r1, r1, r5
 8007df0:	f021 0103 	bic.w	r1, r1, #3
 8007df4:	3d03      	subs	r5, #3
 8007df6:	45a8      	cmp	r8, r5
 8007df8:	bf38      	it	cc
 8007dfa:	2100      	movcc	r1, #0
 8007dfc:	440b      	add	r3, r1
 8007dfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e02:	b191      	cbz	r1, 8007e2a <__mdiff+0x11a>
 8007e04:	6117      	str	r7, [r2, #16]
 8007e06:	e79d      	b.n	8007d44 <__mdiff+0x34>
 8007e08:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e0c:	46e6      	mov	lr, ip
 8007e0e:	0c08      	lsrs	r0, r1, #16
 8007e10:	fa1c fc81 	uxtah	ip, ip, r1
 8007e14:	4471      	add	r1, lr
 8007e16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e1a:	b289      	uxth	r1, r1
 8007e1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e20:	f846 1b04 	str.w	r1, [r6], #4
 8007e24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e28:	e7dd      	b.n	8007de6 <__mdiff+0xd6>
 8007e2a:	3f01      	subs	r7, #1
 8007e2c:	e7e7      	b.n	8007dfe <__mdiff+0xee>
 8007e2e:	bf00      	nop
 8007e30:	0800b399 	.word	0x0800b399
 8007e34:	0800b3aa 	.word	0x0800b3aa

08007e38 <__ulp>:
 8007e38:	b082      	sub	sp, #8
 8007e3a:	ed8d 0b00 	vstr	d0, [sp]
 8007e3e:	9a01      	ldr	r2, [sp, #4]
 8007e40:	4b0f      	ldr	r3, [pc, #60]	@ (8007e80 <__ulp+0x48>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc08      	bgt.n	8007e5e <__ulp+0x26>
 8007e4c:	425b      	negs	r3, r3
 8007e4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e56:	da04      	bge.n	8007e62 <__ulp+0x2a>
 8007e58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e5c:	4113      	asrs	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	e008      	b.n	8007e74 <__ulp+0x3c>
 8007e62:	f1a2 0314 	sub.w	r3, r2, #20
 8007e66:	2b1e      	cmp	r3, #30
 8007e68:	bfda      	itte	le
 8007e6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e6e:	40da      	lsrle	r2, r3
 8007e70:	2201      	movgt	r2, #1
 8007e72:	2300      	movs	r3, #0
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	ec41 0b10 	vmov	d0, r0, r1
 8007e7c:	b002      	add	sp, #8
 8007e7e:	4770      	bx	lr
 8007e80:	7ff00000 	.word	0x7ff00000

08007e84 <__b2d>:
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e88:	6906      	ldr	r6, [r0, #16]
 8007e8a:	f100 0814 	add.w	r8, r0, #20
 8007e8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e92:	1f37      	subs	r7, r6, #4
 8007e94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7ff fd53 	bl	8007944 <__hi0bits>
 8007e9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ea2:	280a      	cmp	r0, #10
 8007ea4:	600b      	str	r3, [r1, #0]
 8007ea6:	491b      	ldr	r1, [pc, #108]	@ (8007f14 <__b2d+0x90>)
 8007ea8:	dc15      	bgt.n	8007ed6 <__b2d+0x52>
 8007eaa:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eae:	fa22 f30c 	lsr.w	r3, r2, ip
 8007eb2:	45b8      	cmp	r8, r7
 8007eb4:	ea43 0501 	orr.w	r5, r3, r1
 8007eb8:	bf34      	ite	cc
 8007eba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ebe:	2300      	movcs	r3, #0
 8007ec0:	3015      	adds	r0, #21
 8007ec2:	fa02 f000 	lsl.w	r0, r2, r0
 8007ec6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007eca:	4303      	orrs	r3, r0
 8007ecc:	461c      	mov	r4, r3
 8007ece:	ec45 4b10 	vmov	d0, r4, r5
 8007ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed6:	45b8      	cmp	r8, r7
 8007ed8:	bf3a      	itte	cc
 8007eda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ede:	f1a6 0708 	subcc.w	r7, r6, #8
 8007ee2:	2300      	movcs	r3, #0
 8007ee4:	380b      	subs	r0, #11
 8007ee6:	d012      	beq.n	8007f0e <__b2d+0x8a>
 8007ee8:	f1c0 0120 	rsb	r1, r0, #32
 8007eec:	fa23 f401 	lsr.w	r4, r3, r1
 8007ef0:	4082      	lsls	r2, r0
 8007ef2:	4322      	orrs	r2, r4
 8007ef4:	4547      	cmp	r7, r8
 8007ef6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007efa:	bf8c      	ite	hi
 8007efc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f00:	2200      	movls	r2, #0
 8007f02:	4083      	lsls	r3, r0
 8007f04:	40ca      	lsrs	r2, r1
 8007f06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	e7de      	b.n	8007ecc <__b2d+0x48>
 8007f0e:	ea42 0501 	orr.w	r5, r2, r1
 8007f12:	e7db      	b.n	8007ecc <__b2d+0x48>
 8007f14:	3ff00000 	.word	0x3ff00000

08007f18 <__d2b>:
 8007f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	2101      	movs	r1, #1
 8007f20:	ec59 8b10 	vmov	r8, r9, d0
 8007f24:	4616      	mov	r6, r2
 8007f26:	f7ff fc1b 	bl	8007760 <_Balloc>
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	b930      	cbnz	r0, 8007f3c <__d2b+0x24>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	4b23      	ldr	r3, [pc, #140]	@ (8007fc0 <__d2b+0xa8>)
 8007f32:	4824      	ldr	r0, [pc, #144]	@ (8007fc4 <__d2b+0xac>)
 8007f34:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f38:	f001 f996 	bl	8009268 <__assert_func>
 8007f3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f44:	b10d      	cbz	r5, 8007f4a <__d2b+0x32>
 8007f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f50:	d023      	beq.n	8007f9a <__d2b+0x82>
 8007f52:	4668      	mov	r0, sp
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	f7ff fd14 	bl	8007982 <__lo0bits>
 8007f5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f5e:	b1d0      	cbz	r0, 8007f96 <__d2b+0x7e>
 8007f60:	f1c0 0320 	rsb	r3, r0, #32
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	40c2      	lsrs	r2, r0
 8007f6c:	6163      	str	r3, [r4, #20]
 8007f6e:	9201      	str	r2, [sp, #4]
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	61a3      	str	r3, [r4, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2201      	moveq	r2, #1
 8007f7a:	2202      	movne	r2, #2
 8007f7c:	6122      	str	r2, [r4, #16]
 8007f7e:	b1a5      	cbz	r5, 8007faa <__d2b+0x92>
 8007f80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f84:	4405      	add	r5, r0
 8007f86:	603d      	str	r5, [r7, #0]
 8007f88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f8c:	6030      	str	r0, [r6, #0]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	b003      	add	sp, #12
 8007f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f96:	6161      	str	r1, [r4, #20]
 8007f98:	e7ea      	b.n	8007f70 <__d2b+0x58>
 8007f9a:	a801      	add	r0, sp, #4
 8007f9c:	f7ff fcf1 	bl	8007982 <__lo0bits>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	6163      	str	r3, [r4, #20]
 8007fa4:	3020      	adds	r0, #32
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	e7e8      	b.n	8007f7c <__d2b+0x64>
 8007faa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fb2:	6038      	str	r0, [r7, #0]
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f7ff fcc5 	bl	8007944 <__hi0bits>
 8007fba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fbe:	e7e5      	b.n	8007f8c <__d2b+0x74>
 8007fc0:	0800b399 	.word	0x0800b399
 8007fc4:	0800b3aa 	.word	0x0800b3aa

08007fc8 <__ratio>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	e9cd 1000 	strd	r1, r0, [sp]
 8007fd2:	a902      	add	r1, sp, #8
 8007fd4:	f7ff ff56 	bl	8007e84 <__b2d>
 8007fd8:	9800      	ldr	r0, [sp, #0]
 8007fda:	a903      	add	r1, sp, #12
 8007fdc:	ec55 4b10 	vmov	r4, r5, d0
 8007fe0:	f7ff ff50 	bl	8007e84 <__b2d>
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	6919      	ldr	r1, [r3, #16]
 8007fe8:	9b00      	ldr	r3, [sp, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	1ac9      	subs	r1, r1, r3
 8007fee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	ec5b ab10 	vmov	sl, fp, d0
 8007ff8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfce      	itee	gt
 8008000:	462a      	movgt	r2, r5
 8008002:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008006:	465a      	movle	r2, fp
 8008008:	462f      	mov	r7, r5
 800800a:	46d9      	mov	r9, fp
 800800c:	bfcc      	ite	gt
 800800e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008012:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008016:	464b      	mov	r3, r9
 8008018:	4652      	mov	r2, sl
 800801a:	4620      	mov	r0, r4
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 fc35 	bl	800088c <__aeabi_ddiv>
 8008022:	ec41 0b10 	vmov	d0, r0, r1
 8008026:	b005      	add	sp, #20
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800802c <__copybits>:
 800802c:	3901      	subs	r1, #1
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	1149      	asrs	r1, r1, #5
 8008032:	6914      	ldr	r4, [r2, #16]
 8008034:	3101      	adds	r1, #1
 8008036:	f102 0314 	add.w	r3, r2, #20
 800803a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800803e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008042:	1f05      	subs	r5, r0, #4
 8008044:	42a3      	cmp	r3, r4
 8008046:	d30c      	bcc.n	8008062 <__copybits+0x36>
 8008048:	1aa3      	subs	r3, r4, r2
 800804a:	3b11      	subs	r3, #17
 800804c:	f023 0303 	bic.w	r3, r3, #3
 8008050:	3211      	adds	r2, #17
 8008052:	42a2      	cmp	r2, r4
 8008054:	bf88      	it	hi
 8008056:	2300      	movhi	r3, #0
 8008058:	4418      	add	r0, r3
 800805a:	2300      	movs	r3, #0
 800805c:	4288      	cmp	r0, r1
 800805e:	d305      	bcc.n	800806c <__copybits+0x40>
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	f853 6b04 	ldr.w	r6, [r3], #4
 8008066:	f845 6f04 	str.w	r6, [r5, #4]!
 800806a:	e7eb      	b.n	8008044 <__copybits+0x18>
 800806c:	f840 3b04 	str.w	r3, [r0], #4
 8008070:	e7f4      	b.n	800805c <__copybits+0x30>

08008072 <__any_on>:
 8008072:	f100 0214 	add.w	r2, r0, #20
 8008076:	6900      	ldr	r0, [r0, #16]
 8008078:	114b      	asrs	r3, r1, #5
 800807a:	4298      	cmp	r0, r3
 800807c:	b510      	push	{r4, lr}
 800807e:	db11      	blt.n	80080a4 <__any_on+0x32>
 8008080:	dd0a      	ble.n	8008098 <__any_on+0x26>
 8008082:	f011 011f 	ands.w	r1, r1, #31
 8008086:	d007      	beq.n	8008098 <__any_on+0x26>
 8008088:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800808c:	fa24 f001 	lsr.w	r0, r4, r1
 8008090:	fa00 f101 	lsl.w	r1, r0, r1
 8008094:	428c      	cmp	r4, r1
 8008096:	d10b      	bne.n	80080b0 <__any_on+0x3e>
 8008098:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800809c:	4293      	cmp	r3, r2
 800809e:	d803      	bhi.n	80080a8 <__any_on+0x36>
 80080a0:	2000      	movs	r0, #0
 80080a2:	bd10      	pop	{r4, pc}
 80080a4:	4603      	mov	r3, r0
 80080a6:	e7f7      	b.n	8008098 <__any_on+0x26>
 80080a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ac:	2900      	cmp	r1, #0
 80080ae:	d0f5      	beq.n	800809c <__any_on+0x2a>
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7f6      	b.n	80080a2 <__any_on+0x30>

080080b4 <sulp>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	ec45 4b10 	vmov	d0, r4, r5
 80080be:	4616      	mov	r6, r2
 80080c0:	f7ff feba 	bl	8007e38 <__ulp>
 80080c4:	ec51 0b10 	vmov	r0, r1, d0
 80080c8:	b17e      	cbz	r6, 80080ea <sulp+0x36>
 80080ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dd09      	ble.n	80080ea <sulp+0x36>
 80080d6:	051b      	lsls	r3, r3, #20
 80080d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80080dc:	2400      	movs	r4, #0
 80080de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80080e2:	4622      	mov	r2, r4
 80080e4:	462b      	mov	r3, r5
 80080e6:	f7f8 faa7 	bl	8000638 <__aeabi_dmul>
 80080ea:	ec41 0b10 	vmov	d0, r0, r1
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <_strtod_l>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	b09f      	sub	sp, #124	@ 0x7c
 80080f6:	460c      	mov	r4, r1
 80080f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80080fa:	2200      	movs	r2, #0
 80080fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80080fe:	9005      	str	r0, [sp, #20]
 8008100:	f04f 0a00 	mov.w	sl, #0
 8008104:	f04f 0b00 	mov.w	fp, #0
 8008108:	460a      	mov	r2, r1
 800810a:	9219      	str	r2, [sp, #100]	@ 0x64
 800810c:	7811      	ldrb	r1, [r2, #0]
 800810e:	292b      	cmp	r1, #43	@ 0x2b
 8008110:	d04a      	beq.n	80081a8 <_strtod_l+0xb8>
 8008112:	d838      	bhi.n	8008186 <_strtod_l+0x96>
 8008114:	290d      	cmp	r1, #13
 8008116:	d832      	bhi.n	800817e <_strtod_l+0x8e>
 8008118:	2908      	cmp	r1, #8
 800811a:	d832      	bhi.n	8008182 <_strtod_l+0x92>
 800811c:	2900      	cmp	r1, #0
 800811e:	d03b      	beq.n	8008198 <_strtod_l+0xa8>
 8008120:	2200      	movs	r2, #0
 8008122:	920e      	str	r2, [sp, #56]	@ 0x38
 8008124:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008126:	782a      	ldrb	r2, [r5, #0]
 8008128:	2a30      	cmp	r2, #48	@ 0x30
 800812a:	f040 80b2 	bne.w	8008292 <_strtod_l+0x1a2>
 800812e:	786a      	ldrb	r2, [r5, #1]
 8008130:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008134:	2a58      	cmp	r2, #88	@ 0x58
 8008136:	d16e      	bne.n	8008216 <_strtod_l+0x126>
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4a8f      	ldr	r2, [pc, #572]	@ (8008380 <_strtod_l+0x290>)
 8008144:	9805      	ldr	r0, [sp, #20]
 8008146:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008148:	a919      	add	r1, sp, #100	@ 0x64
 800814a:	f001 f927 	bl	800939c <__gethex>
 800814e:	f010 060f 	ands.w	r6, r0, #15
 8008152:	4604      	mov	r4, r0
 8008154:	d005      	beq.n	8008162 <_strtod_l+0x72>
 8008156:	2e06      	cmp	r6, #6
 8008158:	d128      	bne.n	80081ac <_strtod_l+0xbc>
 800815a:	3501      	adds	r5, #1
 800815c:	2300      	movs	r3, #0
 800815e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008160:	930e      	str	r3, [sp, #56]	@ 0x38
 8008162:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 858e 	bne.w	8008c86 <_strtod_l+0xb96>
 800816a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800816c:	b1cb      	cbz	r3, 80081a2 <_strtod_l+0xb2>
 800816e:	4652      	mov	r2, sl
 8008170:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008174:	ec43 2b10 	vmov	d0, r2, r3
 8008178:	b01f      	add	sp, #124	@ 0x7c
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	2920      	cmp	r1, #32
 8008180:	d1ce      	bne.n	8008120 <_strtod_l+0x30>
 8008182:	3201      	adds	r2, #1
 8008184:	e7c1      	b.n	800810a <_strtod_l+0x1a>
 8008186:	292d      	cmp	r1, #45	@ 0x2d
 8008188:	d1ca      	bne.n	8008120 <_strtod_l+0x30>
 800818a:	2101      	movs	r1, #1
 800818c:	910e      	str	r1, [sp, #56]	@ 0x38
 800818e:	1c51      	adds	r1, r2, #1
 8008190:	9119      	str	r1, [sp, #100]	@ 0x64
 8008192:	7852      	ldrb	r2, [r2, #1]
 8008194:	2a00      	cmp	r2, #0
 8008196:	d1c5      	bne.n	8008124 <_strtod_l+0x34>
 8008198:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800819a:	9419      	str	r4, [sp, #100]	@ 0x64
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 8570 	bne.w	8008c82 <_strtod_l+0xb92>
 80081a2:	4652      	mov	r2, sl
 80081a4:	465b      	mov	r3, fp
 80081a6:	e7e5      	b.n	8008174 <_strtod_l+0x84>
 80081a8:	2100      	movs	r1, #0
 80081aa:	e7ef      	b.n	800818c <_strtod_l+0x9c>
 80081ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081ae:	b13a      	cbz	r2, 80081c0 <_strtod_l+0xd0>
 80081b0:	2135      	movs	r1, #53	@ 0x35
 80081b2:	a81c      	add	r0, sp, #112	@ 0x70
 80081b4:	f7ff ff3a 	bl	800802c <__copybits>
 80081b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ba:	9805      	ldr	r0, [sp, #20]
 80081bc:	f7ff fb10 	bl	80077e0 <_Bfree>
 80081c0:	3e01      	subs	r6, #1
 80081c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081c4:	2e04      	cmp	r6, #4
 80081c6:	d806      	bhi.n	80081d6 <_strtod_l+0xe6>
 80081c8:	e8df f006 	tbb	[pc, r6]
 80081cc:	201d0314 	.word	0x201d0314
 80081d0:	14          	.byte	0x14
 80081d1:	00          	.byte	0x00
 80081d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80081d6:	05e1      	lsls	r1, r4, #23
 80081d8:	bf48      	it	mi
 80081da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80081de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081e2:	0d1b      	lsrs	r3, r3, #20
 80081e4:	051b      	lsls	r3, r3, #20
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1bb      	bne.n	8008162 <_strtod_l+0x72>
 80081ea:	f7fe fb2d 	bl	8006848 <__errno>
 80081ee:	2322      	movs	r3, #34	@ 0x22
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	e7b6      	b.n	8008162 <_strtod_l+0x72>
 80081f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80081f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80081fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008200:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008204:	e7e7      	b.n	80081d6 <_strtod_l+0xe6>
 8008206:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008388 <_strtod_l+0x298>
 800820a:	e7e4      	b.n	80081d6 <_strtod_l+0xe6>
 800820c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008210:	f04f 3aff 	mov.w	sl, #4294967295
 8008214:	e7df      	b.n	80081d6 <_strtod_l+0xe6>
 8008216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	9219      	str	r2, [sp, #100]	@ 0x64
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b30      	cmp	r3, #48	@ 0x30
 8008220:	d0f9      	beq.n	8008216 <_strtod_l+0x126>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d09d      	beq.n	8008162 <_strtod_l+0x72>
 8008226:	2301      	movs	r3, #1
 8008228:	2700      	movs	r7, #0
 800822a:	9308      	str	r3, [sp, #32]
 800822c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800822e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008230:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008232:	46b9      	mov	r9, r7
 8008234:	220a      	movs	r2, #10
 8008236:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008238:	7805      	ldrb	r5, [r0, #0]
 800823a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800823e:	b2d9      	uxtb	r1, r3
 8008240:	2909      	cmp	r1, #9
 8008242:	d928      	bls.n	8008296 <_strtod_l+0x1a6>
 8008244:	494f      	ldr	r1, [pc, #316]	@ (8008384 <_strtod_l+0x294>)
 8008246:	2201      	movs	r2, #1
 8008248:	f000 ffd6 	bl	80091f8 <strncmp>
 800824c:	2800      	cmp	r0, #0
 800824e:	d032      	beq.n	80082b6 <_strtod_l+0x1c6>
 8008250:	2000      	movs	r0, #0
 8008252:	462a      	mov	r2, r5
 8008254:	900a      	str	r0, [sp, #40]	@ 0x28
 8008256:	464d      	mov	r5, r9
 8008258:	4603      	mov	r3, r0
 800825a:	2a65      	cmp	r2, #101	@ 0x65
 800825c:	d001      	beq.n	8008262 <_strtod_l+0x172>
 800825e:	2a45      	cmp	r2, #69	@ 0x45
 8008260:	d114      	bne.n	800828c <_strtod_l+0x19c>
 8008262:	b91d      	cbnz	r5, 800826c <_strtod_l+0x17c>
 8008264:	9a08      	ldr	r2, [sp, #32]
 8008266:	4302      	orrs	r2, r0
 8008268:	d096      	beq.n	8008198 <_strtod_l+0xa8>
 800826a:	2500      	movs	r5, #0
 800826c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800826e:	1c62      	adds	r2, r4, #1
 8008270:	9219      	str	r2, [sp, #100]	@ 0x64
 8008272:	7862      	ldrb	r2, [r4, #1]
 8008274:	2a2b      	cmp	r2, #43	@ 0x2b
 8008276:	d07a      	beq.n	800836e <_strtod_l+0x27e>
 8008278:	2a2d      	cmp	r2, #45	@ 0x2d
 800827a:	d07e      	beq.n	800837a <_strtod_l+0x28a>
 800827c:	f04f 0c00 	mov.w	ip, #0
 8008280:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008284:	2909      	cmp	r1, #9
 8008286:	f240 8085 	bls.w	8008394 <_strtod_l+0x2a4>
 800828a:	9419      	str	r4, [sp, #100]	@ 0x64
 800828c:	f04f 0800 	mov.w	r8, #0
 8008290:	e0a5      	b.n	80083de <_strtod_l+0x2ee>
 8008292:	2300      	movs	r3, #0
 8008294:	e7c8      	b.n	8008228 <_strtod_l+0x138>
 8008296:	f1b9 0f08 	cmp.w	r9, #8
 800829a:	bfd8      	it	le
 800829c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800829e:	f100 0001 	add.w	r0, r0, #1
 80082a2:	bfda      	itte	le
 80082a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80082a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80082aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80082ae:	f109 0901 	add.w	r9, r9, #1
 80082b2:	9019      	str	r0, [sp, #100]	@ 0x64
 80082b4:	e7bf      	b.n	8008236 <_strtod_l+0x146>
 80082b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80082bc:	785a      	ldrb	r2, [r3, #1]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d03b      	beq.n	800833c <_strtod_l+0x24c>
 80082c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80082c6:	464d      	mov	r5, r9
 80082c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d912      	bls.n	80082f6 <_strtod_l+0x206>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7c2      	b.n	800825a <_strtod_l+0x16a>
 80082d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80082da:	785a      	ldrb	r2, [r3, #1]
 80082dc:	3001      	adds	r0, #1
 80082de:	2a30      	cmp	r2, #48	@ 0x30
 80082e0:	d0f8      	beq.n	80082d4 <_strtod_l+0x1e4>
 80082e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	f200 84d2 	bhi.w	8008c90 <_strtod_l+0xba0>
 80082ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80082f0:	2000      	movs	r0, #0
 80082f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80082f4:	4605      	mov	r5, r0
 80082f6:	3a30      	subs	r2, #48	@ 0x30
 80082f8:	f100 0301 	add.w	r3, r0, #1
 80082fc:	d018      	beq.n	8008330 <_strtod_l+0x240>
 80082fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008300:	4419      	add	r1, r3
 8008302:	910a      	str	r1, [sp, #40]	@ 0x28
 8008304:	462e      	mov	r6, r5
 8008306:	f04f 0e0a 	mov.w	lr, #10
 800830a:	1c71      	adds	r1, r6, #1
 800830c:	eba1 0c05 	sub.w	ip, r1, r5
 8008310:	4563      	cmp	r3, ip
 8008312:	dc15      	bgt.n	8008340 <_strtod_l+0x250>
 8008314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008318:	182b      	adds	r3, r5, r0
 800831a:	2b08      	cmp	r3, #8
 800831c:	f105 0501 	add.w	r5, r5, #1
 8008320:	4405      	add	r5, r0
 8008322:	dc1a      	bgt.n	800835a <_strtod_l+0x26a>
 8008324:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008326:	230a      	movs	r3, #10
 8008328:	fb03 2301 	mla	r3, r3, r1, r2
 800832c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800832e:	2300      	movs	r3, #0
 8008330:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008332:	1c51      	adds	r1, r2, #1
 8008334:	9119      	str	r1, [sp, #100]	@ 0x64
 8008336:	7852      	ldrb	r2, [r2, #1]
 8008338:	4618      	mov	r0, r3
 800833a:	e7c5      	b.n	80082c8 <_strtod_l+0x1d8>
 800833c:	4648      	mov	r0, r9
 800833e:	e7ce      	b.n	80082de <_strtod_l+0x1ee>
 8008340:	2e08      	cmp	r6, #8
 8008342:	dc05      	bgt.n	8008350 <_strtod_l+0x260>
 8008344:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008346:	fb0e f606 	mul.w	r6, lr, r6
 800834a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800834c:	460e      	mov	r6, r1
 800834e:	e7dc      	b.n	800830a <_strtod_l+0x21a>
 8008350:	2910      	cmp	r1, #16
 8008352:	bfd8      	it	le
 8008354:	fb0e f707 	mulle.w	r7, lr, r7
 8008358:	e7f8      	b.n	800834c <_strtod_l+0x25c>
 800835a:	2b0f      	cmp	r3, #15
 800835c:	bfdc      	itt	le
 800835e:	230a      	movle	r3, #10
 8008360:	fb03 2707 	mlale	r7, r3, r7, r2
 8008364:	e7e3      	b.n	800832e <_strtod_l+0x23e>
 8008366:	2300      	movs	r3, #0
 8008368:	930a      	str	r3, [sp, #40]	@ 0x28
 800836a:	2301      	movs	r3, #1
 800836c:	e77a      	b.n	8008264 <_strtod_l+0x174>
 800836e:	f04f 0c00 	mov.w	ip, #0
 8008372:	1ca2      	adds	r2, r4, #2
 8008374:	9219      	str	r2, [sp, #100]	@ 0x64
 8008376:	78a2      	ldrb	r2, [r4, #2]
 8008378:	e782      	b.n	8008280 <_strtod_l+0x190>
 800837a:	f04f 0c01 	mov.w	ip, #1
 800837e:	e7f8      	b.n	8008372 <_strtod_l+0x282>
 8008380:	0800b5cc 	.word	0x0800b5cc
 8008384:	0800b403 	.word	0x0800b403
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800838e:	1c51      	adds	r1, r2, #1
 8008390:	9119      	str	r1, [sp, #100]	@ 0x64
 8008392:	7852      	ldrb	r2, [r2, #1]
 8008394:	2a30      	cmp	r2, #48	@ 0x30
 8008396:	d0f9      	beq.n	800838c <_strtod_l+0x29c>
 8008398:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800839c:	2908      	cmp	r1, #8
 800839e:	f63f af75 	bhi.w	800828c <_strtod_l+0x19c>
 80083a2:	3a30      	subs	r2, #48	@ 0x30
 80083a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083aa:	f04f 080a 	mov.w	r8, #10
 80083ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083b0:	1c56      	adds	r6, r2, #1
 80083b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80083b4:	7852      	ldrb	r2, [r2, #1]
 80083b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083ba:	f1be 0f09 	cmp.w	lr, #9
 80083be:	d939      	bls.n	8008434 <_strtod_l+0x344>
 80083c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083c2:	1a76      	subs	r6, r6, r1
 80083c4:	2e08      	cmp	r6, #8
 80083c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083ca:	dc03      	bgt.n	80083d4 <_strtod_l+0x2e4>
 80083cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083ce:	4588      	cmp	r8, r1
 80083d0:	bfa8      	it	ge
 80083d2:	4688      	movge	r8, r1
 80083d4:	f1bc 0f00 	cmp.w	ip, #0
 80083d8:	d001      	beq.n	80083de <_strtod_l+0x2ee>
 80083da:	f1c8 0800 	rsb	r8, r8, #0
 80083de:	2d00      	cmp	r5, #0
 80083e0:	d14e      	bne.n	8008480 <_strtod_l+0x390>
 80083e2:	9908      	ldr	r1, [sp, #32]
 80083e4:	4308      	orrs	r0, r1
 80083e6:	f47f aebc 	bne.w	8008162 <_strtod_l+0x72>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f47f aed4 	bne.w	8008198 <_strtod_l+0xa8>
 80083f0:	2a69      	cmp	r2, #105	@ 0x69
 80083f2:	d028      	beq.n	8008446 <_strtod_l+0x356>
 80083f4:	dc25      	bgt.n	8008442 <_strtod_l+0x352>
 80083f6:	2a49      	cmp	r2, #73	@ 0x49
 80083f8:	d025      	beq.n	8008446 <_strtod_l+0x356>
 80083fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80083fc:	f47f aecc 	bne.w	8008198 <_strtod_l+0xa8>
 8008400:	499a      	ldr	r1, [pc, #616]	@ (800866c <_strtod_l+0x57c>)
 8008402:	a819      	add	r0, sp, #100	@ 0x64
 8008404:	f001 f9ec 	bl	80097e0 <__match>
 8008408:	2800      	cmp	r0, #0
 800840a:	f43f aec5 	beq.w	8008198 <_strtod_l+0xa8>
 800840e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b28      	cmp	r3, #40	@ 0x28
 8008414:	d12e      	bne.n	8008474 <_strtod_l+0x384>
 8008416:	4996      	ldr	r1, [pc, #600]	@ (8008670 <_strtod_l+0x580>)
 8008418:	aa1c      	add	r2, sp, #112	@ 0x70
 800841a:	a819      	add	r0, sp, #100	@ 0x64
 800841c:	f001 f9f4 	bl	8009808 <__hexnan>
 8008420:	2805      	cmp	r0, #5
 8008422:	d127      	bne.n	8008474 <_strtod_l+0x384>
 8008424:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008426:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800842a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800842e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008432:	e696      	b.n	8008162 <_strtod_l+0x72>
 8008434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008436:	fb08 2101 	mla	r1, r8, r1, r2
 800843a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800843e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008440:	e7b5      	b.n	80083ae <_strtod_l+0x2be>
 8008442:	2a6e      	cmp	r2, #110	@ 0x6e
 8008444:	e7da      	b.n	80083fc <_strtod_l+0x30c>
 8008446:	498b      	ldr	r1, [pc, #556]	@ (8008674 <_strtod_l+0x584>)
 8008448:	a819      	add	r0, sp, #100	@ 0x64
 800844a:	f001 f9c9 	bl	80097e0 <__match>
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f aea2 	beq.w	8008198 <_strtod_l+0xa8>
 8008454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008456:	4988      	ldr	r1, [pc, #544]	@ (8008678 <_strtod_l+0x588>)
 8008458:	3b01      	subs	r3, #1
 800845a:	a819      	add	r0, sp, #100	@ 0x64
 800845c:	9319      	str	r3, [sp, #100]	@ 0x64
 800845e:	f001 f9bf 	bl	80097e0 <__match>
 8008462:	b910      	cbnz	r0, 800846a <_strtod_l+0x37a>
 8008464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008466:	3301      	adds	r3, #1
 8008468:	9319      	str	r3, [sp, #100]	@ 0x64
 800846a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008688 <_strtod_l+0x598>
 800846e:	f04f 0a00 	mov.w	sl, #0
 8008472:	e676      	b.n	8008162 <_strtod_l+0x72>
 8008474:	4881      	ldr	r0, [pc, #516]	@ (800867c <_strtod_l+0x58c>)
 8008476:	f000 feef 	bl	8009258 <nan>
 800847a:	ec5b ab10 	vmov	sl, fp, d0
 800847e:	e670      	b.n	8008162 <_strtod_l+0x72>
 8008480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008482:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008484:	eba8 0303 	sub.w	r3, r8, r3
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	bf08      	it	eq
 800848e:	46a9      	moveq	r9, r5
 8008490:	2d10      	cmp	r5, #16
 8008492:	9309      	str	r3, [sp, #36]	@ 0x24
 8008494:	462c      	mov	r4, r5
 8008496:	bfa8      	it	ge
 8008498:	2410      	movge	r4, #16
 800849a:	f7f8 f853 	bl	8000544 <__aeabi_ui2d>
 800849e:	2d09      	cmp	r5, #9
 80084a0:	4682      	mov	sl, r0
 80084a2:	468b      	mov	fp, r1
 80084a4:	dc13      	bgt.n	80084ce <_strtod_l+0x3de>
 80084a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f ae5a 	beq.w	8008162 <_strtod_l+0x72>
 80084ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b0:	dd78      	ble.n	80085a4 <_strtod_l+0x4b4>
 80084b2:	2b16      	cmp	r3, #22
 80084b4:	dc5f      	bgt.n	8008576 <_strtod_l+0x486>
 80084b6:	4972      	ldr	r1, [pc, #456]	@ (8008680 <_strtod_l+0x590>)
 80084b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c0:	4652      	mov	r2, sl
 80084c2:	465b      	mov	r3, fp
 80084c4:	f7f8 f8b8 	bl	8000638 <__aeabi_dmul>
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	e649      	b.n	8008162 <_strtod_l+0x72>
 80084ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008680 <_strtod_l+0x590>)
 80084d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80084d8:	f7f8 f8ae 	bl	8000638 <__aeabi_dmul>
 80084dc:	4682      	mov	sl, r0
 80084de:	4638      	mov	r0, r7
 80084e0:	468b      	mov	fp, r1
 80084e2:	f7f8 f82f 	bl	8000544 <__aeabi_ui2d>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4650      	mov	r0, sl
 80084ec:	4659      	mov	r1, fp
 80084ee:	f7f7 feed 	bl	80002cc <__adddf3>
 80084f2:	2d0f      	cmp	r5, #15
 80084f4:	4682      	mov	sl, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	ddd5      	ble.n	80084a6 <_strtod_l+0x3b6>
 80084fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fc:	1b2c      	subs	r4, r5, r4
 80084fe:	441c      	add	r4, r3
 8008500:	2c00      	cmp	r4, #0
 8008502:	f340 8093 	ble.w	800862c <_strtod_l+0x53c>
 8008506:	f014 030f 	ands.w	r3, r4, #15
 800850a:	d00a      	beq.n	8008522 <_strtod_l+0x432>
 800850c:	495c      	ldr	r1, [pc, #368]	@ (8008680 <_strtod_l+0x590>)
 800850e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851a:	f7f8 f88d 	bl	8000638 <__aeabi_dmul>
 800851e:	4682      	mov	sl, r0
 8008520:	468b      	mov	fp, r1
 8008522:	f034 040f 	bics.w	r4, r4, #15
 8008526:	d073      	beq.n	8008610 <_strtod_l+0x520>
 8008528:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800852c:	dd49      	ble.n	80085c2 <_strtod_l+0x4d2>
 800852e:	2400      	movs	r4, #0
 8008530:	46a0      	mov	r8, r4
 8008532:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008534:	46a1      	mov	r9, r4
 8008536:	9a05      	ldr	r2, [sp, #20]
 8008538:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008688 <_strtod_l+0x598>
 800853c:	2322      	movs	r3, #34	@ 0x22
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	f04f 0a00 	mov.w	sl, #0
 8008544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008546:	2b00      	cmp	r3, #0
 8008548:	f43f ae0b 	beq.w	8008162 <_strtod_l+0x72>
 800854c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800854e:	9805      	ldr	r0, [sp, #20]
 8008550:	f7ff f946 	bl	80077e0 <_Bfree>
 8008554:	9805      	ldr	r0, [sp, #20]
 8008556:	4649      	mov	r1, r9
 8008558:	f7ff f942 	bl	80077e0 <_Bfree>
 800855c:	9805      	ldr	r0, [sp, #20]
 800855e:	4641      	mov	r1, r8
 8008560:	f7ff f93e 	bl	80077e0 <_Bfree>
 8008564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008566:	9805      	ldr	r0, [sp, #20]
 8008568:	f7ff f93a 	bl	80077e0 <_Bfree>
 800856c:	9805      	ldr	r0, [sp, #20]
 800856e:	4621      	mov	r1, r4
 8008570:	f7ff f936 	bl	80077e0 <_Bfree>
 8008574:	e5f5      	b.n	8008162 <_strtod_l+0x72>
 8008576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008578:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800857c:	4293      	cmp	r3, r2
 800857e:	dbbc      	blt.n	80084fa <_strtod_l+0x40a>
 8008580:	4c3f      	ldr	r4, [pc, #252]	@ (8008680 <_strtod_l+0x590>)
 8008582:	f1c5 050f 	rsb	r5, r5, #15
 8008586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800858a:	4652      	mov	r2, sl
 800858c:	465b      	mov	r3, fp
 800858e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008592:	f7f8 f851 	bl	8000638 <__aeabi_dmul>
 8008596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008598:	1b5d      	subs	r5, r3, r5
 800859a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800859e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085a2:	e78f      	b.n	80084c4 <_strtod_l+0x3d4>
 80085a4:	3316      	adds	r3, #22
 80085a6:	dba8      	blt.n	80084fa <_strtod_l+0x40a>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085aa:	eba3 0808 	sub.w	r8, r3, r8
 80085ae:	4b34      	ldr	r3, [pc, #208]	@ (8008680 <_strtod_l+0x590>)
 80085b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085b8:	4650      	mov	r0, sl
 80085ba:	4659      	mov	r1, fp
 80085bc:	f7f8 f966 	bl	800088c <__aeabi_ddiv>
 80085c0:	e782      	b.n	80084c8 <_strtod_l+0x3d8>
 80085c2:	2300      	movs	r3, #0
 80085c4:	4f2f      	ldr	r7, [pc, #188]	@ (8008684 <_strtod_l+0x594>)
 80085c6:	1124      	asrs	r4, r4, #4
 80085c8:	4650      	mov	r0, sl
 80085ca:	4659      	mov	r1, fp
 80085cc:	461e      	mov	r6, r3
 80085ce:	2c01      	cmp	r4, #1
 80085d0:	dc21      	bgt.n	8008616 <_strtod_l+0x526>
 80085d2:	b10b      	cbz	r3, 80085d8 <_strtod_l+0x4e8>
 80085d4:	4682      	mov	sl, r0
 80085d6:	468b      	mov	fp, r1
 80085d8:	492a      	ldr	r1, [pc, #168]	@ (8008684 <_strtod_l+0x594>)
 80085da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80085de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80085e2:	4652      	mov	r2, sl
 80085e4:	465b      	mov	r3, fp
 80085e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ea:	f7f8 f825 	bl	8000638 <__aeabi_dmul>
 80085ee:	4b26      	ldr	r3, [pc, #152]	@ (8008688 <_strtod_l+0x598>)
 80085f0:	460a      	mov	r2, r1
 80085f2:	400b      	ands	r3, r1
 80085f4:	4925      	ldr	r1, [pc, #148]	@ (800868c <_strtod_l+0x59c>)
 80085f6:	428b      	cmp	r3, r1
 80085f8:	4682      	mov	sl, r0
 80085fa:	d898      	bhi.n	800852e <_strtod_l+0x43e>
 80085fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008600:	428b      	cmp	r3, r1
 8008602:	bf86      	itte	hi
 8008604:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008690 <_strtod_l+0x5a0>
 8008608:	f04f 3aff 	movhi.w	sl, #4294967295
 800860c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008610:	2300      	movs	r3, #0
 8008612:	9308      	str	r3, [sp, #32]
 8008614:	e076      	b.n	8008704 <_strtod_l+0x614>
 8008616:	07e2      	lsls	r2, r4, #31
 8008618:	d504      	bpl.n	8008624 <_strtod_l+0x534>
 800861a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800861e:	f7f8 f80b 	bl	8000638 <__aeabi_dmul>
 8008622:	2301      	movs	r3, #1
 8008624:	3601      	adds	r6, #1
 8008626:	1064      	asrs	r4, r4, #1
 8008628:	3708      	adds	r7, #8
 800862a:	e7d0      	b.n	80085ce <_strtod_l+0x4de>
 800862c:	d0f0      	beq.n	8008610 <_strtod_l+0x520>
 800862e:	4264      	negs	r4, r4
 8008630:	f014 020f 	ands.w	r2, r4, #15
 8008634:	d00a      	beq.n	800864c <_strtod_l+0x55c>
 8008636:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <_strtod_l+0x590>)
 8008638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863c:	4650      	mov	r0, sl
 800863e:	4659      	mov	r1, fp
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f8 f922 	bl	800088c <__aeabi_ddiv>
 8008648:	4682      	mov	sl, r0
 800864a:	468b      	mov	fp, r1
 800864c:	1124      	asrs	r4, r4, #4
 800864e:	d0df      	beq.n	8008610 <_strtod_l+0x520>
 8008650:	2c1f      	cmp	r4, #31
 8008652:	dd1f      	ble.n	8008694 <_strtod_l+0x5a4>
 8008654:	2400      	movs	r4, #0
 8008656:	46a0      	mov	r8, r4
 8008658:	940b      	str	r4, [sp, #44]	@ 0x2c
 800865a:	46a1      	mov	r9, r4
 800865c:	9a05      	ldr	r2, [sp, #20]
 800865e:	2322      	movs	r3, #34	@ 0x22
 8008660:	f04f 0a00 	mov.w	sl, #0
 8008664:	f04f 0b00 	mov.w	fp, #0
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e76b      	b.n	8008544 <_strtod_l+0x454>
 800866c:	0800b2f1 	.word	0x0800b2f1
 8008670:	0800b5b8 	.word	0x0800b5b8
 8008674:	0800b2e9 	.word	0x0800b2e9
 8008678:	0800b320 	.word	0x0800b320
 800867c:	0800b459 	.word	0x0800b459
 8008680:	0800b4f0 	.word	0x0800b4f0
 8008684:	0800b4c8 	.word	0x0800b4c8
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	7ca00000 	.word	0x7ca00000
 8008690:	7fefffff 	.word	0x7fefffff
 8008694:	f014 0310 	ands.w	r3, r4, #16
 8008698:	bf18      	it	ne
 800869a:	236a      	movne	r3, #106	@ 0x6a
 800869c:	4ea9      	ldr	r6, [pc, #676]	@ (8008944 <_strtod_l+0x854>)
 800869e:	9308      	str	r3, [sp, #32]
 80086a0:	4650      	mov	r0, sl
 80086a2:	4659      	mov	r1, fp
 80086a4:	2300      	movs	r3, #0
 80086a6:	07e7      	lsls	r7, r4, #31
 80086a8:	d504      	bpl.n	80086b4 <_strtod_l+0x5c4>
 80086aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086ae:	f7f7 ffc3 	bl	8000638 <__aeabi_dmul>
 80086b2:	2301      	movs	r3, #1
 80086b4:	1064      	asrs	r4, r4, #1
 80086b6:	f106 0608 	add.w	r6, r6, #8
 80086ba:	d1f4      	bne.n	80086a6 <_strtod_l+0x5b6>
 80086bc:	b10b      	cbz	r3, 80086c2 <_strtod_l+0x5d2>
 80086be:	4682      	mov	sl, r0
 80086c0:	468b      	mov	fp, r1
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	b1b3      	cbz	r3, 80086f4 <_strtod_l+0x604>
 80086c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	4659      	mov	r1, fp
 80086d2:	dd0f      	ble.n	80086f4 <_strtod_l+0x604>
 80086d4:	2b1f      	cmp	r3, #31
 80086d6:	dd56      	ble.n	8008786 <_strtod_l+0x696>
 80086d8:	2b34      	cmp	r3, #52	@ 0x34
 80086da:	bfde      	ittt	le
 80086dc:	f04f 33ff 	movle.w	r3, #4294967295
 80086e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80086e4:	4093      	lslle	r3, r2
 80086e6:	f04f 0a00 	mov.w	sl, #0
 80086ea:	bfcc      	ite	gt
 80086ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80086f0:	ea03 0b01 	andle.w	fp, r3, r1
 80086f4:	2200      	movs	r2, #0
 80086f6:	2300      	movs	r3, #0
 80086f8:	4650      	mov	r0, sl
 80086fa:	4659      	mov	r1, fp
 80086fc:	f7f8 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 8008700:	2800      	cmp	r0, #0
 8008702:	d1a7      	bne.n	8008654 <_strtod_l+0x564>
 8008704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800870a:	9805      	ldr	r0, [sp, #20]
 800870c:	462b      	mov	r3, r5
 800870e:	464a      	mov	r2, r9
 8008710:	f7ff f8ce 	bl	80078b0 <__s2b>
 8008714:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008716:	2800      	cmp	r0, #0
 8008718:	f43f af09 	beq.w	800852e <_strtod_l+0x43e>
 800871c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800871e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008720:	2a00      	cmp	r2, #0
 8008722:	eba3 0308 	sub.w	r3, r3, r8
 8008726:	bfa8      	it	ge
 8008728:	2300      	movge	r3, #0
 800872a:	9312      	str	r3, [sp, #72]	@ 0x48
 800872c:	2400      	movs	r4, #0
 800872e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008732:	9316      	str	r3, [sp, #88]	@ 0x58
 8008734:	46a0      	mov	r8, r4
 8008736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008738:	9805      	ldr	r0, [sp, #20]
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	f7ff f810 	bl	8007760 <_Balloc>
 8008740:	4681      	mov	r9, r0
 8008742:	2800      	cmp	r0, #0
 8008744:	f43f aef7 	beq.w	8008536 <_strtod_l+0x446>
 8008748:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	3202      	adds	r2, #2
 800874e:	f103 010c 	add.w	r1, r3, #12
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	300c      	adds	r0, #12
 8008756:	f000 fd71 	bl	800923c <memcpy>
 800875a:	ec4b ab10 	vmov	d0, sl, fp
 800875e:	9805      	ldr	r0, [sp, #20]
 8008760:	aa1c      	add	r2, sp, #112	@ 0x70
 8008762:	a91b      	add	r1, sp, #108	@ 0x6c
 8008764:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008768:	f7ff fbd6 	bl	8007f18 <__d2b>
 800876c:	901a      	str	r0, [sp, #104]	@ 0x68
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f aee1 	beq.w	8008536 <_strtod_l+0x446>
 8008774:	9805      	ldr	r0, [sp, #20]
 8008776:	2101      	movs	r1, #1
 8008778:	f7ff f930 	bl	80079dc <__i2b>
 800877c:	4680      	mov	r8, r0
 800877e:	b948      	cbnz	r0, 8008794 <_strtod_l+0x6a4>
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	e6d7      	b.n	8008536 <_strtod_l+0x446>
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	ea03 0a0a 	and.w	sl, r3, sl
 8008792:	e7af      	b.n	80086f4 <_strtod_l+0x604>
 8008794:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008796:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008798:	2d00      	cmp	r5, #0
 800879a:	bfab      	itete	ge
 800879c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800879e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087a4:	bfac      	ite	ge
 80087a6:	18ef      	addge	r7, r5, r3
 80087a8:	1b5e      	sublt	r6, r3, r5
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	1aed      	subs	r5, r5, r3
 80087ae:	4415      	add	r5, r2
 80087b0:	4b65      	ldr	r3, [pc, #404]	@ (8008948 <_strtod_l+0x858>)
 80087b2:	3d01      	subs	r5, #1
 80087b4:	429d      	cmp	r5, r3
 80087b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087ba:	da50      	bge.n	800885e <_strtod_l+0x76e>
 80087bc:	1b5b      	subs	r3, r3, r5
 80087be:	2b1f      	cmp	r3, #31
 80087c0:	eba2 0203 	sub.w	r2, r2, r3
 80087c4:	f04f 0101 	mov.w	r1, #1
 80087c8:	dc3d      	bgt.n	8008846 <_strtod_l+0x756>
 80087ca:	fa01 f303 	lsl.w	r3, r1, r3
 80087ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087d0:	2300      	movs	r3, #0
 80087d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80087d4:	18bd      	adds	r5, r7, r2
 80087d6:	9b08      	ldr	r3, [sp, #32]
 80087d8:	42af      	cmp	r7, r5
 80087da:	4416      	add	r6, r2
 80087dc:	441e      	add	r6, r3
 80087de:	463b      	mov	r3, r7
 80087e0:	bfa8      	it	ge
 80087e2:	462b      	movge	r3, r5
 80087e4:	42b3      	cmp	r3, r6
 80087e6:	bfa8      	it	ge
 80087e8:	4633      	movge	r3, r6
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfc2      	ittt	gt
 80087ee:	1aed      	subgt	r5, r5, r3
 80087f0:	1af6      	subgt	r6, r6, r3
 80087f2:	1aff      	subgt	r7, r7, r3
 80087f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dd16      	ble.n	8008828 <_strtod_l+0x738>
 80087fa:	4641      	mov	r1, r8
 80087fc:	9805      	ldr	r0, [sp, #20]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7ff f9a4 	bl	8007b4c <__pow5mult>
 8008804:	4680      	mov	r8, r0
 8008806:	2800      	cmp	r0, #0
 8008808:	d0ba      	beq.n	8008780 <_strtod_l+0x690>
 800880a:	4601      	mov	r1, r0
 800880c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	f7ff f8fa 	bl	8007a08 <__multiply>
 8008814:	900a      	str	r0, [sp, #40]	@ 0x28
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f ae8d 	beq.w	8008536 <_strtod_l+0x446>
 800881c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800881e:	9805      	ldr	r0, [sp, #20]
 8008820:	f7fe ffde 	bl	80077e0 <_Bfree>
 8008824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008826:	931a      	str	r3, [sp, #104]	@ 0x68
 8008828:	2d00      	cmp	r5, #0
 800882a:	dc1d      	bgt.n	8008868 <_strtod_l+0x778>
 800882c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	dd23      	ble.n	800887a <_strtod_l+0x78a>
 8008832:	4649      	mov	r1, r9
 8008834:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	f7ff f988 	bl	8007b4c <__pow5mult>
 800883c:	4681      	mov	r9, r0
 800883e:	b9e0      	cbnz	r0, 800887a <_strtod_l+0x78a>
 8008840:	f04f 0900 	mov.w	r9, #0
 8008844:	e677      	b.n	8008536 <_strtod_l+0x446>
 8008846:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800884a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800884e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008852:	35e2      	adds	r5, #226	@ 0xe2
 8008854:	fa01 f305 	lsl.w	r3, r1, r5
 8008858:	9310      	str	r3, [sp, #64]	@ 0x40
 800885a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800885c:	e7ba      	b.n	80087d4 <_strtod_l+0x6e4>
 800885e:	2300      	movs	r3, #0
 8008860:	9310      	str	r3, [sp, #64]	@ 0x40
 8008862:	2301      	movs	r3, #1
 8008864:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008866:	e7b5      	b.n	80087d4 <_strtod_l+0x6e4>
 8008868:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800886a:	9805      	ldr	r0, [sp, #20]
 800886c:	462a      	mov	r2, r5
 800886e:	f7ff f9c7 	bl	8007c00 <__lshift>
 8008872:	901a      	str	r0, [sp, #104]	@ 0x68
 8008874:	2800      	cmp	r0, #0
 8008876:	d1d9      	bne.n	800882c <_strtod_l+0x73c>
 8008878:	e65d      	b.n	8008536 <_strtod_l+0x446>
 800887a:	2e00      	cmp	r6, #0
 800887c:	dd07      	ble.n	800888e <_strtod_l+0x79e>
 800887e:	4649      	mov	r1, r9
 8008880:	9805      	ldr	r0, [sp, #20]
 8008882:	4632      	mov	r2, r6
 8008884:	f7ff f9bc 	bl	8007c00 <__lshift>
 8008888:	4681      	mov	r9, r0
 800888a:	2800      	cmp	r0, #0
 800888c:	d0d8      	beq.n	8008840 <_strtod_l+0x750>
 800888e:	2f00      	cmp	r7, #0
 8008890:	dd08      	ble.n	80088a4 <_strtod_l+0x7b4>
 8008892:	4641      	mov	r1, r8
 8008894:	9805      	ldr	r0, [sp, #20]
 8008896:	463a      	mov	r2, r7
 8008898:	f7ff f9b2 	bl	8007c00 <__lshift>
 800889c:	4680      	mov	r8, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f ae49 	beq.w	8008536 <_strtod_l+0x446>
 80088a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	464a      	mov	r2, r9
 80088aa:	f7ff fa31 	bl	8007d10 <__mdiff>
 80088ae:	4604      	mov	r4, r0
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f43f ae40 	beq.w	8008536 <_strtod_l+0x446>
 80088b6:	68c3      	ldr	r3, [r0, #12]
 80088b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ba:	2300      	movs	r3, #0
 80088bc:	60c3      	str	r3, [r0, #12]
 80088be:	4641      	mov	r1, r8
 80088c0:	f7ff fa0a 	bl	8007cd8 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	da45      	bge.n	8008954 <_strtod_l+0x864>
 80088c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ca:	ea53 030a 	orrs.w	r3, r3, sl
 80088ce:	d16b      	bne.n	80089a8 <_strtod_l+0x8b8>
 80088d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d167      	bne.n	80089a8 <_strtod_l+0x8b8>
 80088d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088dc:	0d1b      	lsrs	r3, r3, #20
 80088de:	051b      	lsls	r3, r3, #20
 80088e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80088e4:	d960      	bls.n	80089a8 <_strtod_l+0x8b8>
 80088e6:	6963      	ldr	r3, [r4, #20]
 80088e8:	b913      	cbnz	r3, 80088f0 <_strtod_l+0x800>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	dd5b      	ble.n	80089a8 <_strtod_l+0x8b8>
 80088f0:	4621      	mov	r1, r4
 80088f2:	2201      	movs	r2, #1
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	f7ff f983 	bl	8007c00 <__lshift>
 80088fa:	4641      	mov	r1, r8
 80088fc:	4604      	mov	r4, r0
 80088fe:	f7ff f9eb 	bl	8007cd8 <__mcmp>
 8008902:	2800      	cmp	r0, #0
 8008904:	dd50      	ble.n	80089a8 <_strtod_l+0x8b8>
 8008906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800890a:	9a08      	ldr	r2, [sp, #32]
 800890c:	0d1b      	lsrs	r3, r3, #20
 800890e:	051b      	lsls	r3, r3, #20
 8008910:	2a00      	cmp	r2, #0
 8008912:	d06a      	beq.n	80089ea <_strtod_l+0x8fa>
 8008914:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008918:	d867      	bhi.n	80089ea <_strtod_l+0x8fa>
 800891a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800891e:	f67f ae9d 	bls.w	800865c <_strtod_l+0x56c>
 8008922:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <_strtod_l+0x85c>)
 8008924:	4650      	mov	r0, sl
 8008926:	4659      	mov	r1, fp
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe85 	bl	8000638 <__aeabi_dmul>
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <_strtod_l+0x860>)
 8008930:	400b      	ands	r3, r1
 8008932:	4682      	mov	sl, r0
 8008934:	468b      	mov	fp, r1
 8008936:	2b00      	cmp	r3, #0
 8008938:	f47f ae08 	bne.w	800854c <_strtod_l+0x45c>
 800893c:	9a05      	ldr	r2, [sp, #20]
 800893e:	2322      	movs	r3, #34	@ 0x22
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e603      	b.n	800854c <_strtod_l+0x45c>
 8008944:	0800b5e0 	.word	0x0800b5e0
 8008948:	fffffc02 	.word	0xfffffc02
 800894c:	39500000 	.word	0x39500000
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008958:	d165      	bne.n	8008a26 <_strtod_l+0x936>
 800895a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800895c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008960:	b35a      	cbz	r2, 80089ba <_strtod_l+0x8ca>
 8008962:	4a9f      	ldr	r2, [pc, #636]	@ (8008be0 <_strtod_l+0xaf0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d12b      	bne.n	80089c0 <_strtod_l+0x8d0>
 8008968:	9b08      	ldr	r3, [sp, #32]
 800896a:	4651      	mov	r1, sl
 800896c:	b303      	cbz	r3, 80089b0 <_strtod_l+0x8c0>
 800896e:	4b9d      	ldr	r3, [pc, #628]	@ (8008be4 <_strtod_l+0xaf4>)
 8008970:	465a      	mov	r2, fp
 8008972:	4013      	ands	r3, r2
 8008974:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	d81b      	bhi.n	80089b6 <_strtod_l+0x8c6>
 800897e:	0d1b      	lsrs	r3, r3, #20
 8008980:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	4299      	cmp	r1, r3
 800898a:	d119      	bne.n	80089c0 <_strtod_l+0x8d0>
 800898c:	4b96      	ldr	r3, [pc, #600]	@ (8008be8 <_strtod_l+0xaf8>)
 800898e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008990:	429a      	cmp	r2, r3
 8008992:	d102      	bne.n	800899a <_strtod_l+0x8aa>
 8008994:	3101      	adds	r1, #1
 8008996:	f43f adce 	beq.w	8008536 <_strtod_l+0x446>
 800899a:	4b92      	ldr	r3, [pc, #584]	@ (8008be4 <_strtod_l+0xaf4>)
 800899c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800899e:	401a      	ands	r2, r3
 80089a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089a4:	f04f 0a00 	mov.w	sl, #0
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1b9      	bne.n	8008922 <_strtod_l+0x832>
 80089ae:	e5cd      	b.n	800854c <_strtod_l+0x45c>
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	e7e8      	b.n	8008988 <_strtod_l+0x898>
 80089b6:	4613      	mov	r3, r2
 80089b8:	e7e6      	b.n	8008988 <_strtod_l+0x898>
 80089ba:	ea53 030a 	orrs.w	r3, r3, sl
 80089be:	d0a2      	beq.n	8008906 <_strtod_l+0x816>
 80089c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089c2:	b1db      	cbz	r3, 80089fc <_strtod_l+0x90c>
 80089c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089c6:	4213      	tst	r3, r2
 80089c8:	d0ee      	beq.n	80089a8 <_strtod_l+0x8b8>
 80089ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089cc:	9a08      	ldr	r2, [sp, #32]
 80089ce:	4650      	mov	r0, sl
 80089d0:	4659      	mov	r1, fp
 80089d2:	b1bb      	cbz	r3, 8008a04 <_strtod_l+0x914>
 80089d4:	f7ff fb6e 	bl	80080b4 <sulp>
 80089d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089dc:	ec53 2b10 	vmov	r2, r3, d0
 80089e0:	f7f7 fc74 	bl	80002cc <__adddf3>
 80089e4:	4682      	mov	sl, r0
 80089e6:	468b      	mov	fp, r1
 80089e8:	e7de      	b.n	80089a8 <_strtod_l+0x8b8>
 80089ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80089ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089f6:	f04f 3aff 	mov.w	sl, #4294967295
 80089fa:	e7d5      	b.n	80089a8 <_strtod_l+0x8b8>
 80089fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089fe:	ea13 0f0a 	tst.w	r3, sl
 8008a02:	e7e1      	b.n	80089c8 <_strtod_l+0x8d8>
 8008a04:	f7ff fb56 	bl	80080b4 <sulp>
 8008a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0c:	ec53 2b10 	vmov	r2, r3, d0
 8008a10:	f7f7 fc5a 	bl	80002c8 <__aeabi_dsub>
 8008a14:	2200      	movs	r2, #0
 8008a16:	2300      	movs	r3, #0
 8008a18:	4682      	mov	sl, r0
 8008a1a:	468b      	mov	fp, r1
 8008a1c:	f7f8 f874 	bl	8000b08 <__aeabi_dcmpeq>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d0c1      	beq.n	80089a8 <_strtod_l+0x8b8>
 8008a24:	e61a      	b.n	800865c <_strtod_l+0x56c>
 8008a26:	4641      	mov	r1, r8
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7ff facd 	bl	8007fc8 <__ratio>
 8008a2e:	ec57 6b10 	vmov	r6, r7, d0
 8008a32:	2200      	movs	r2, #0
 8008a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f878 	bl	8000b30 <__aeabi_dcmple>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d06f      	beq.n	8008b24 <_strtod_l+0xa34>
 8008a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d17a      	bne.n	8008b40 <_strtod_l+0xa50>
 8008a4a:	f1ba 0f00 	cmp.w	sl, #0
 8008a4e:	d158      	bne.n	8008b02 <_strtod_l+0xa12>
 8008a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d15a      	bne.n	8008b10 <_strtod_l+0xa20>
 8008a5a:	4b64      	ldr	r3, [pc, #400]	@ (8008bec <_strtod_l+0xafc>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f8 f85b 	bl	8000b1c <__aeabi_dcmplt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d159      	bne.n	8008b1e <_strtod_l+0xa2e>
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4b60      	ldr	r3, [pc, #384]	@ (8008bf0 <_strtod_l+0xb00>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	f7f7 fde1 	bl	8000638 <__aeabi_dmul>
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a7e:	9606      	str	r6, [sp, #24]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a86:	4d57      	ldr	r5, [pc, #348]	@ (8008be4 <_strtod_l+0xaf4>)
 8008a88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a8e:	401d      	ands	r5, r3
 8008a90:	4b58      	ldr	r3, [pc, #352]	@ (8008bf4 <_strtod_l+0xb04>)
 8008a92:	429d      	cmp	r5, r3
 8008a94:	f040 80b2 	bne.w	8008bfc <_strtod_l+0xb0c>
 8008a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a9e:	ec4b ab10 	vmov	d0, sl, fp
 8008aa2:	f7ff f9c9 	bl	8007e38 <__ulp>
 8008aa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aaa:	ec51 0b10 	vmov	r0, r1, d0
 8008aae:	f7f7 fdc3 	bl	8000638 <__aeabi_dmul>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	f7f7 fc09 	bl	80002cc <__adddf3>
 8008aba:	460b      	mov	r3, r1
 8008abc:	4949      	ldr	r1, [pc, #292]	@ (8008be4 <_strtod_l+0xaf4>)
 8008abe:	4a4e      	ldr	r2, [pc, #312]	@ (8008bf8 <_strtod_l+0xb08>)
 8008ac0:	4019      	ands	r1, r3
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	d942      	bls.n	8008b4e <_strtod_l+0xa5e>
 8008ac8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008aca:	4b47      	ldr	r3, [pc, #284]	@ (8008be8 <_strtod_l+0xaf8>)
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d103      	bne.n	8008ad8 <_strtod_l+0x9e8>
 8008ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	f43f ad2f 	beq.w	8008536 <_strtod_l+0x446>
 8008ad8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008be8 <_strtod_l+0xaf8>
 8008adc:	f04f 3aff 	mov.w	sl, #4294967295
 8008ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	f7fe fe7c 	bl	80077e0 <_Bfree>
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7fe fe78 	bl	80077e0 <_Bfree>
 8008af0:	9805      	ldr	r0, [sp, #20]
 8008af2:	4641      	mov	r1, r8
 8008af4:	f7fe fe74 	bl	80077e0 <_Bfree>
 8008af8:	9805      	ldr	r0, [sp, #20]
 8008afa:	4621      	mov	r1, r4
 8008afc:	f7fe fe70 	bl	80077e0 <_Bfree>
 8008b00:	e619      	b.n	8008736 <_strtod_l+0x646>
 8008b02:	f1ba 0f01 	cmp.w	sl, #1
 8008b06:	d103      	bne.n	8008b10 <_strtod_l+0xa20>
 8008b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f43f ada6 	beq.w	800865c <_strtod_l+0x56c>
 8008b10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008bc0 <_strtod_l+0xad0>
 8008b14:	4f35      	ldr	r7, [pc, #212]	@ (8008bec <_strtod_l+0xafc>)
 8008b16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	e7b1      	b.n	8008a82 <_strtod_l+0x992>
 8008b1e:	4f34      	ldr	r7, [pc, #208]	@ (8008bf0 <_strtod_l+0xb00>)
 8008b20:	2600      	movs	r6, #0
 8008b22:	e7aa      	b.n	8008a7a <_strtod_l+0x98a>
 8008b24:	4b32      	ldr	r3, [pc, #200]	@ (8008bf0 <_strtod_l+0xb00>)
 8008b26:	4630      	mov	r0, r6
 8008b28:	4639      	mov	r1, r7
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f7f7 fd84 	bl	8000638 <__aeabi_dmul>
 8008b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d09f      	beq.n	8008a7a <_strtod_l+0x98a>
 8008b3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b3e:	e7a0      	b.n	8008a82 <_strtod_l+0x992>
 8008b40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008bc8 <_strtod_l+0xad8>
 8008b44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b48:	ec57 6b17 	vmov	r6, r7, d7
 8008b4c:	e799      	b.n	8008a82 <_strtod_l+0x992>
 8008b4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1c1      	bne.n	8008ae0 <_strtod_l+0x9f0>
 8008b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b60:	0d1b      	lsrs	r3, r3, #20
 8008b62:	051b      	lsls	r3, r3, #20
 8008b64:	429d      	cmp	r5, r3
 8008b66:	d1bb      	bne.n	8008ae0 <_strtod_l+0x9f0>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f8 f8c4 	bl	8000cf8 <__aeabi_d2lz>
 8008b70:	f7f7 fd34 	bl	80005dc <__aeabi_l2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fba4 	bl	80002c8 <__aeabi_dsub>
 8008b80:	460b      	mov	r3, r1
 8008b82:	4602      	mov	r2, r0
 8008b84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b8e:	ea46 060a 	orr.w	r6, r6, sl
 8008b92:	431e      	orrs	r6, r3
 8008b94:	d06f      	beq.n	8008c76 <_strtod_l+0xb86>
 8008b96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008bd0 <_strtod_l+0xae0>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 ffbe 	bl	8000b1c <__aeabi_dcmplt>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f47f acd3 	bne.w	800854c <_strtod_l+0x45c>
 8008ba6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008bd8 <_strtod_l+0xae8>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bb0:	f7f7 ffd2 	bl	8000b58 <__aeabi_dcmpgt>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d093      	beq.n	8008ae0 <_strtod_l+0x9f0>
 8008bb8:	e4c8      	b.n	800854c <_strtod_l+0x45c>
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	bff00000 	.word	0xbff00000
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	3ff00000 	.word	0x3ff00000
 8008bd0:	94a03595 	.word	0x94a03595
 8008bd4:	3fdfffff 	.word	0x3fdfffff
 8008bd8:	35afe535 	.word	0x35afe535
 8008bdc:	3fe00000 	.word	0x3fe00000
 8008be0:	000fffff 	.word	0x000fffff
 8008be4:	7ff00000 	.word	0x7ff00000
 8008be8:	7fefffff 	.word	0x7fefffff
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	7fe00000 	.word	0x7fe00000
 8008bf8:	7c9fffff 	.word	0x7c9fffff
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	b323      	cbz	r3, 8008c4a <_strtod_l+0xb5a>
 8008c00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c04:	d821      	bhi.n	8008c4a <_strtod_l+0xb5a>
 8008c06:	a328      	add	r3, pc, #160	@ (adr r3, 8008ca8 <_strtod_l+0xbb8>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 ff8e 	bl	8000b30 <__aeabi_dcmple>
 8008c14:	b1a0      	cbz	r0, 8008c40 <_strtod_l+0xb50>
 8008c16:	4639      	mov	r1, r7
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7f7 ffe5 	bl	8000be8 <__aeabi_d2uiz>
 8008c1e:	2801      	cmp	r0, #1
 8008c20:	bf38      	it	cc
 8008c22:	2001      	movcc	r0, #1
 8008c24:	f7f7 fc8e 	bl	8000544 <__aeabi_ui2d>
 8008c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	b9fb      	cbnz	r3, 8008c70 <_strtod_l+0xb80>
 8008c30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c34:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c36:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c46:	1b5b      	subs	r3, r3, r5
 8008c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c52:	f7ff f8f1 	bl	8007e38 <__ulp>
 8008c56:	4650      	mov	r0, sl
 8008c58:	ec53 2b10 	vmov	r2, r3, d0
 8008c5c:	4659      	mov	r1, fp
 8008c5e:	f7f7 fceb 	bl	8000638 <__aeabi_dmul>
 8008c62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c66:	f7f7 fb31 	bl	80002cc <__adddf3>
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	468b      	mov	fp, r1
 8008c6e:	e770      	b.n	8008b52 <_strtod_l+0xa62>
 8008c70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c74:	e7e0      	b.n	8008c38 <_strtod_l+0xb48>
 8008c76:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cb0 <_strtod_l+0xbc0>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 ff4e 	bl	8000b1c <__aeabi_dcmplt>
 8008c80:	e798      	b.n	8008bb4 <_strtod_l+0xac4>
 8008c82:	2300      	movs	r3, #0
 8008c84:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	f7ff ba6d 	b.w	800816a <_strtod_l+0x7a>
 8008c90:	2a65      	cmp	r2, #101	@ 0x65
 8008c92:	f43f ab68 	beq.w	8008366 <_strtod_l+0x276>
 8008c96:	2a45      	cmp	r2, #69	@ 0x45
 8008c98:	f43f ab65 	beq.w	8008366 <_strtod_l+0x276>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f7ff bba0 	b.w	80083e2 <_strtod_l+0x2f2>
 8008ca2:	bf00      	nop
 8008ca4:	f3af 8000 	nop.w
 8008ca8:	ffc00000 	.word	0xffc00000
 8008cac:	41dfffff 	.word	0x41dfffff
 8008cb0:	94a03595 	.word	0x94a03595
 8008cb4:	3fcfffff 	.word	0x3fcfffff

08008cb8 <_strtod_r>:
 8008cb8:	4b01      	ldr	r3, [pc, #4]	@ (8008cc0 <_strtod_r+0x8>)
 8008cba:	f7ff ba19 	b.w	80080f0 <_strtod_l>
 8008cbe:	bf00      	nop
 8008cc0:	20000070 	.word	0x20000070

08008cc4 <_strtol_l.isra.0>:
 8008cc4:	2b24      	cmp	r3, #36	@ 0x24
 8008cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cca:	4686      	mov	lr, r0
 8008ccc:	4690      	mov	r8, r2
 8008cce:	d801      	bhi.n	8008cd4 <_strtol_l.isra.0+0x10>
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d106      	bne.n	8008ce2 <_strtol_l.isra.0+0x1e>
 8008cd4:	f7fd fdb8 	bl	8006848 <__errno>
 8008cd8:	2316      	movs	r3, #22
 8008cda:	6003      	str	r3, [r0, #0]
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	4834      	ldr	r0, [pc, #208]	@ (8008db4 <_strtol_l.isra.0+0xf0>)
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cec:	5d06      	ldrb	r6, [r0, r4]
 8008cee:	f016 0608 	ands.w	r6, r6, #8
 8008cf2:	d1f8      	bne.n	8008ce6 <_strtol_l.isra.0+0x22>
 8008cf4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008cf6:	d110      	bne.n	8008d1a <_strtol_l.isra.0+0x56>
 8008cf8:	782c      	ldrb	r4, [r5, #0]
 8008cfa:	2601      	movs	r6, #1
 8008cfc:	1c95      	adds	r5, r2, #2
 8008cfe:	f033 0210 	bics.w	r2, r3, #16
 8008d02:	d115      	bne.n	8008d30 <_strtol_l.isra.0+0x6c>
 8008d04:	2c30      	cmp	r4, #48	@ 0x30
 8008d06:	d10d      	bne.n	8008d24 <_strtol_l.isra.0+0x60>
 8008d08:	782a      	ldrb	r2, [r5, #0]
 8008d0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d0e:	2a58      	cmp	r2, #88	@ 0x58
 8008d10:	d108      	bne.n	8008d24 <_strtol_l.isra.0+0x60>
 8008d12:	786c      	ldrb	r4, [r5, #1]
 8008d14:	3502      	adds	r5, #2
 8008d16:	2310      	movs	r3, #16
 8008d18:	e00a      	b.n	8008d30 <_strtol_l.isra.0+0x6c>
 8008d1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d1c:	bf04      	itt	eq
 8008d1e:	782c      	ldrbeq	r4, [r5, #0]
 8008d20:	1c95      	addeq	r5, r2, #2
 8008d22:	e7ec      	b.n	8008cfe <_strtol_l.isra.0+0x3a>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f6      	bne.n	8008d16 <_strtol_l.isra.0+0x52>
 8008d28:	2c30      	cmp	r4, #48	@ 0x30
 8008d2a:	bf14      	ite	ne
 8008d2c:	230a      	movne	r3, #10
 8008d2e:	2308      	moveq	r3, #8
 8008d30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d38:	2200      	movs	r2, #0
 8008d3a:	fbbc f9f3 	udiv	r9, ip, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d48:	2f09      	cmp	r7, #9
 8008d4a:	d80f      	bhi.n	8008d6c <_strtol_l.isra.0+0xa8>
 8008d4c:	463c      	mov	r4, r7
 8008d4e:	42a3      	cmp	r3, r4
 8008d50:	dd1b      	ble.n	8008d8a <_strtol_l.isra.0+0xc6>
 8008d52:	1c57      	adds	r7, r2, #1
 8008d54:	d007      	beq.n	8008d66 <_strtol_l.isra.0+0xa2>
 8008d56:	4581      	cmp	r9, r0
 8008d58:	d314      	bcc.n	8008d84 <_strtol_l.isra.0+0xc0>
 8008d5a:	d101      	bne.n	8008d60 <_strtol_l.isra.0+0x9c>
 8008d5c:	45a2      	cmp	sl, r4
 8008d5e:	db11      	blt.n	8008d84 <_strtol_l.isra.0+0xc0>
 8008d60:	fb00 4003 	mla	r0, r0, r3, r4
 8008d64:	2201      	movs	r2, #1
 8008d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d6a:	e7eb      	b.n	8008d44 <_strtol_l.isra.0+0x80>
 8008d6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d70:	2f19      	cmp	r7, #25
 8008d72:	d801      	bhi.n	8008d78 <_strtol_l.isra.0+0xb4>
 8008d74:	3c37      	subs	r4, #55	@ 0x37
 8008d76:	e7ea      	b.n	8008d4e <_strtol_l.isra.0+0x8a>
 8008d78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d7c:	2f19      	cmp	r7, #25
 8008d7e:	d804      	bhi.n	8008d8a <_strtol_l.isra.0+0xc6>
 8008d80:	3c57      	subs	r4, #87	@ 0x57
 8008d82:	e7e4      	b.n	8008d4e <_strtol_l.isra.0+0x8a>
 8008d84:	f04f 32ff 	mov.w	r2, #4294967295
 8008d88:	e7ed      	b.n	8008d66 <_strtol_l.isra.0+0xa2>
 8008d8a:	1c53      	adds	r3, r2, #1
 8008d8c:	d108      	bne.n	8008da0 <_strtol_l.isra.0+0xdc>
 8008d8e:	2322      	movs	r3, #34	@ 0x22
 8008d90:	f8ce 3000 	str.w	r3, [lr]
 8008d94:	4660      	mov	r0, ip
 8008d96:	f1b8 0f00 	cmp.w	r8, #0
 8008d9a:	d0a0      	beq.n	8008cde <_strtol_l.isra.0+0x1a>
 8008d9c:	1e69      	subs	r1, r5, #1
 8008d9e:	e006      	b.n	8008dae <_strtol_l.isra.0+0xea>
 8008da0:	b106      	cbz	r6, 8008da4 <_strtol_l.isra.0+0xe0>
 8008da2:	4240      	negs	r0, r0
 8008da4:	f1b8 0f00 	cmp.w	r8, #0
 8008da8:	d099      	beq.n	8008cde <_strtol_l.isra.0+0x1a>
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	d1f6      	bne.n	8008d9c <_strtol_l.isra.0+0xd8>
 8008dae:	f8c8 1000 	str.w	r1, [r8]
 8008db2:	e794      	b.n	8008cde <_strtol_l.isra.0+0x1a>
 8008db4:	0800b609 	.word	0x0800b609

08008db8 <_strtol_r>:
 8008db8:	f7ff bf84 	b.w	8008cc4 <_strtol_l.isra.0>

08008dbc <__ssputs_r>:
 8008dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc0:	688e      	ldr	r6, [r1, #8]
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	42be      	cmp	r6, r7
 8008dc6:	680b      	ldr	r3, [r1, #0]
 8008dc8:	4682      	mov	sl, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4690      	mov	r8, r2
 8008dce:	d82d      	bhi.n	8008e2c <__ssputs_r+0x70>
 8008dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dd8:	d026      	beq.n	8008e28 <__ssputs_r+0x6c>
 8008dda:	6965      	ldr	r5, [r4, #20]
 8008ddc:	6909      	ldr	r1, [r1, #16]
 8008dde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008de2:	eba3 0901 	sub.w	r9, r3, r1
 8008de6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dea:	1c7b      	adds	r3, r7, #1
 8008dec:	444b      	add	r3, r9
 8008dee:	106d      	asrs	r5, r5, #1
 8008df0:	429d      	cmp	r5, r3
 8008df2:	bf38      	it	cc
 8008df4:	461d      	movcc	r5, r3
 8008df6:	0553      	lsls	r3, r2, #21
 8008df8:	d527      	bpl.n	8008e4a <__ssputs_r+0x8e>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7fe fc24 	bl	8007648 <_malloc_r>
 8008e00:	4606      	mov	r6, r0
 8008e02:	b360      	cbz	r0, 8008e5e <__ssputs_r+0xa2>
 8008e04:	6921      	ldr	r1, [r4, #16]
 8008e06:	464a      	mov	r2, r9
 8008e08:	f000 fa18 	bl	800923c <memcpy>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6126      	str	r6, [r4, #16]
 8008e1a:	6165      	str	r5, [r4, #20]
 8008e1c:	444e      	add	r6, r9
 8008e1e:	eba5 0509 	sub.w	r5, r5, r9
 8008e22:	6026      	str	r6, [r4, #0]
 8008e24:	60a5      	str	r5, [r4, #8]
 8008e26:	463e      	mov	r6, r7
 8008e28:	42be      	cmp	r6, r7
 8008e2a:	d900      	bls.n	8008e2e <__ssputs_r+0x72>
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	4632      	mov	r2, r6
 8008e32:	4641      	mov	r1, r8
 8008e34:	f000 f9c6 	bl	80091c4 <memmove>
 8008e38:	68a3      	ldr	r3, [r4, #8]
 8008e3a:	1b9b      	subs	r3, r3, r6
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	4433      	add	r3, r6
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	2000      	movs	r0, #0
 8008e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	f000 fd89 	bl	8009962 <_realloc_r>
 8008e50:	4606      	mov	r6, r0
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d1e0      	bne.n	8008e18 <__ssputs_r+0x5c>
 8008e56:	6921      	ldr	r1, [r4, #16]
 8008e58:	4650      	mov	r0, sl
 8008e5a:	f7fe fb81 	bl	8007560 <_free_r>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	f8ca 3000 	str.w	r3, [sl]
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	e7e9      	b.n	8008e46 <__ssputs_r+0x8a>
	...

08008e74 <_svfiprintf_r>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4698      	mov	r8, r3
 8008e7a:	898b      	ldrh	r3, [r1, #12]
 8008e7c:	061b      	lsls	r3, r3, #24
 8008e7e:	b09d      	sub	sp, #116	@ 0x74
 8008e80:	4607      	mov	r7, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	d510      	bpl.n	8008eaa <_svfiprintf_r+0x36>
 8008e88:	690b      	ldr	r3, [r1, #16]
 8008e8a:	b973      	cbnz	r3, 8008eaa <_svfiprintf_r+0x36>
 8008e8c:	2140      	movs	r1, #64	@ 0x40
 8008e8e:	f7fe fbdb 	bl	8007648 <_malloc_r>
 8008e92:	6028      	str	r0, [r5, #0]
 8008e94:	6128      	str	r0, [r5, #16]
 8008e96:	b930      	cbnz	r0, 8008ea6 <_svfiprintf_r+0x32>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	b01d      	add	sp, #116	@ 0x74
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	2340      	movs	r3, #64	@ 0x40
 8008ea8:	616b      	str	r3, [r5, #20]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eae:	2320      	movs	r3, #32
 8008eb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb8:	2330      	movs	r3, #48	@ 0x30
 8008eba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009058 <_svfiprintf_r+0x1e4>
 8008ebe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ec2:	f04f 0901 	mov.w	r9, #1
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ece:	b10a      	cbz	r2, 8008ed4 <_svfiprintf_r+0x60>
 8008ed0:	2a25      	cmp	r2, #37	@ 0x25
 8008ed2:	d1f9      	bne.n	8008ec8 <_svfiprintf_r+0x54>
 8008ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed8:	d00b      	beq.n	8008ef2 <_svfiprintf_r+0x7e>
 8008eda:	465b      	mov	r3, fp
 8008edc:	4622      	mov	r2, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ff6b 	bl	8008dbc <__ssputs_r>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f000 80a7 	beq.w	800903a <_svfiprintf_r+0x1c6>
 8008eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eee:	445a      	add	r2, fp
 8008ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 809f 	beq.w	800903a <_svfiprintf_r+0x1c6>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f06:	f10a 0a01 	add.w	sl, sl, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f12:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f14:	4654      	mov	r4, sl
 8008f16:	2205      	movs	r2, #5
 8008f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1c:	484e      	ldr	r0, [pc, #312]	@ (8009058 <_svfiprintf_r+0x1e4>)
 8008f1e:	f7f7 f977 	bl	8000210 <memchr>
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	b9d8      	cbnz	r0, 8008f5e <_svfiprintf_r+0xea>
 8008f26:	06d0      	lsls	r0, r2, #27
 8008f28:	bf44      	itt	mi
 8008f2a:	2320      	movmi	r3, #32
 8008f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f30:	0711      	lsls	r1, r2, #28
 8008f32:	bf44      	itt	mi
 8008f34:	232b      	movmi	r3, #43	@ 0x2b
 8008f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f40:	d015      	beq.n	8008f6e <_svfiprintf_r+0xfa>
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	4654      	mov	r4, sl
 8008f46:	2000      	movs	r0, #0
 8008f48:	f04f 0c0a 	mov.w	ip, #10
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f52:	3b30      	subs	r3, #48	@ 0x30
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d94b      	bls.n	8008ff0 <_svfiprintf_r+0x17c>
 8008f58:	b1b0      	cbz	r0, 8008f88 <_svfiprintf_r+0x114>
 8008f5a:	9207      	str	r2, [sp, #28]
 8008f5c:	e014      	b.n	8008f88 <_svfiprintf_r+0x114>
 8008f5e:	eba0 0308 	sub.w	r3, r0, r8
 8008f62:	fa09 f303 	lsl.w	r3, r9, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	46a2      	mov	sl, r4
 8008f6c:	e7d2      	b.n	8008f14 <_svfiprintf_r+0xa0>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9103      	str	r1, [sp, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfbb      	ittet	lt
 8008f7a:	425b      	neglt	r3, r3
 8008f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f80:	9307      	strge	r3, [sp, #28]
 8008f82:	9307      	strlt	r3, [sp, #28]
 8008f84:	bfb8      	it	lt
 8008f86:	9204      	strlt	r2, [sp, #16]
 8008f88:	7823      	ldrb	r3, [r4, #0]
 8008f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f8c:	d10a      	bne.n	8008fa4 <_svfiprintf_r+0x130>
 8008f8e:	7863      	ldrb	r3, [r4, #1]
 8008f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f92:	d132      	bne.n	8008ffa <_svfiprintf_r+0x186>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	1d1a      	adds	r2, r3, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	9203      	str	r2, [sp, #12]
 8008f9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fa0:	3402      	adds	r4, #2
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009068 <_svfiprintf_r+0x1f4>
 8008fa8:	7821      	ldrb	r1, [r4, #0]
 8008faa:	2203      	movs	r2, #3
 8008fac:	4650      	mov	r0, sl
 8008fae:	f7f7 f92f 	bl	8000210 <memchr>
 8008fb2:	b138      	cbz	r0, 8008fc4 <_svfiprintf_r+0x150>
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	eba0 000a 	sub.w	r0, r0, sl
 8008fba:	2240      	movs	r2, #64	@ 0x40
 8008fbc:	4082      	lsls	r2, r0
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	3401      	adds	r4, #1
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc8:	4824      	ldr	r0, [pc, #144]	@ (800905c <_svfiprintf_r+0x1e8>)
 8008fca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fce:	2206      	movs	r2, #6
 8008fd0:	f7f7 f91e 	bl	8000210 <memchr>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d036      	beq.n	8009046 <_svfiprintf_r+0x1d2>
 8008fd8:	4b21      	ldr	r3, [pc, #132]	@ (8009060 <_svfiprintf_r+0x1ec>)
 8008fda:	bb1b      	cbnz	r3, 8009024 <_svfiprintf_r+0x1b0>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	3307      	adds	r3, #7
 8008fe0:	f023 0307 	bic.w	r3, r3, #7
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fea:	4433      	add	r3, r6
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fee:	e76a      	b.n	8008ec6 <_svfiprintf_r+0x52>
 8008ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e7a8      	b.n	8008f4c <_svfiprintf_r+0xd8>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	3401      	adds	r4, #1
 8008ffe:	9305      	str	r3, [sp, #20]
 8009000:	4619      	mov	r1, r3
 8009002:	f04f 0c0a 	mov.w	ip, #10
 8009006:	4620      	mov	r0, r4
 8009008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800900c:	3a30      	subs	r2, #48	@ 0x30
 800900e:	2a09      	cmp	r2, #9
 8009010:	d903      	bls.n	800901a <_svfiprintf_r+0x1a6>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0c6      	beq.n	8008fa4 <_svfiprintf_r+0x130>
 8009016:	9105      	str	r1, [sp, #20]
 8009018:	e7c4      	b.n	8008fa4 <_svfiprintf_r+0x130>
 800901a:	fb0c 2101 	mla	r1, ip, r1, r2
 800901e:	4604      	mov	r4, r0
 8009020:	2301      	movs	r3, #1
 8009022:	e7f0      	b.n	8009006 <_svfiprintf_r+0x192>
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	462a      	mov	r2, r5
 800902a:	4b0e      	ldr	r3, [pc, #56]	@ (8009064 <_svfiprintf_r+0x1f0>)
 800902c:	a904      	add	r1, sp, #16
 800902e:	4638      	mov	r0, r7
 8009030:	f7fc fccc 	bl	80059cc <_printf_float>
 8009034:	1c42      	adds	r2, r0, #1
 8009036:	4606      	mov	r6, r0
 8009038:	d1d6      	bne.n	8008fe8 <_svfiprintf_r+0x174>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	065b      	lsls	r3, r3, #25
 800903e:	f53f af2d 	bmi.w	8008e9c <_svfiprintf_r+0x28>
 8009042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009044:	e72c      	b.n	8008ea0 <_svfiprintf_r+0x2c>
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <_svfiprintf_r+0x1f0>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4638      	mov	r0, r7
 8009052:	f7fc ff53 	bl	8005efc <_printf_i>
 8009056:	e7ed      	b.n	8009034 <_svfiprintf_r+0x1c0>
 8009058:	0800b405 	.word	0x0800b405
 800905c:	0800b40f 	.word	0x0800b40f
 8009060:	080059cd 	.word	0x080059cd
 8009064:	08008dbd 	.word	0x08008dbd
 8009068:	0800b40b 	.word	0x0800b40b

0800906c <__sflush_r>:
 800906c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	0716      	lsls	r6, r2, #28
 8009076:	4605      	mov	r5, r0
 8009078:	460c      	mov	r4, r1
 800907a:	d454      	bmi.n	8009126 <__sflush_r+0xba>
 800907c:	684b      	ldr	r3, [r1, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	dc02      	bgt.n	8009088 <__sflush_r+0x1c>
 8009082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd48      	ble.n	800911a <__sflush_r+0xae>
 8009088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800908a:	2e00      	cmp	r6, #0
 800908c:	d045      	beq.n	800911a <__sflush_r+0xae>
 800908e:	2300      	movs	r3, #0
 8009090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009094:	682f      	ldr	r7, [r5, #0]
 8009096:	6a21      	ldr	r1, [r4, #32]
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	d030      	beq.n	80090fe <__sflush_r+0x92>
 800909c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	0759      	lsls	r1, r3, #29
 80090a2:	d505      	bpl.n	80090b0 <__sflush_r+0x44>
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090aa:	b10b      	cbz	r3, 80090b0 <__sflush_r+0x44>
 80090ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	2300      	movs	r3, #0
 80090b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b4:	6a21      	ldr	r1, [r4, #32]
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b0      	blx	r6
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	d106      	bne.n	80090ce <__sflush_r+0x62>
 80090c0:	6829      	ldr	r1, [r5, #0]
 80090c2:	291d      	cmp	r1, #29
 80090c4:	d82b      	bhi.n	800911e <__sflush_r+0xb2>
 80090c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009170 <__sflush_r+0x104>)
 80090c8:	40ca      	lsrs	r2, r1
 80090ca:	07d6      	lsls	r6, r2, #31
 80090cc:	d527      	bpl.n	800911e <__sflush_r+0xb2>
 80090ce:	2200      	movs	r2, #0
 80090d0:	6062      	str	r2, [r4, #4]
 80090d2:	04d9      	lsls	r1, r3, #19
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	6022      	str	r2, [r4, #0]
 80090d8:	d504      	bpl.n	80090e4 <__sflush_r+0x78>
 80090da:	1c42      	adds	r2, r0, #1
 80090dc:	d101      	bne.n	80090e2 <__sflush_r+0x76>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	b903      	cbnz	r3, 80090e4 <__sflush_r+0x78>
 80090e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80090e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090e6:	602f      	str	r7, [r5, #0]
 80090e8:	b1b9      	cbz	r1, 800911a <__sflush_r+0xae>
 80090ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090ee:	4299      	cmp	r1, r3
 80090f0:	d002      	beq.n	80090f8 <__sflush_r+0x8c>
 80090f2:	4628      	mov	r0, r5
 80090f4:	f7fe fa34 	bl	8007560 <_free_r>
 80090f8:	2300      	movs	r3, #0
 80090fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80090fc:	e00d      	b.n	800911a <__sflush_r+0xae>
 80090fe:	2301      	movs	r3, #1
 8009100:	4628      	mov	r0, r5
 8009102:	47b0      	blx	r6
 8009104:	4602      	mov	r2, r0
 8009106:	1c50      	adds	r0, r2, #1
 8009108:	d1c9      	bne.n	800909e <__sflush_r+0x32>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0c6      	beq.n	800909e <__sflush_r+0x32>
 8009110:	2b1d      	cmp	r3, #29
 8009112:	d001      	beq.n	8009118 <__sflush_r+0xac>
 8009114:	2b16      	cmp	r3, #22
 8009116:	d11e      	bne.n	8009156 <__sflush_r+0xea>
 8009118:	602f      	str	r7, [r5, #0]
 800911a:	2000      	movs	r0, #0
 800911c:	e022      	b.n	8009164 <__sflush_r+0xf8>
 800911e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009122:	b21b      	sxth	r3, r3
 8009124:	e01b      	b.n	800915e <__sflush_r+0xf2>
 8009126:	690f      	ldr	r7, [r1, #16]
 8009128:	2f00      	cmp	r7, #0
 800912a:	d0f6      	beq.n	800911a <__sflush_r+0xae>
 800912c:	0793      	lsls	r3, r2, #30
 800912e:	680e      	ldr	r6, [r1, #0]
 8009130:	bf08      	it	eq
 8009132:	694b      	ldreq	r3, [r1, #20]
 8009134:	600f      	str	r7, [r1, #0]
 8009136:	bf18      	it	ne
 8009138:	2300      	movne	r3, #0
 800913a:	eba6 0807 	sub.w	r8, r6, r7
 800913e:	608b      	str	r3, [r1, #8]
 8009140:	f1b8 0f00 	cmp.w	r8, #0
 8009144:	dde9      	ble.n	800911a <__sflush_r+0xae>
 8009146:	6a21      	ldr	r1, [r4, #32]
 8009148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800914a:	4643      	mov	r3, r8
 800914c:	463a      	mov	r2, r7
 800914e:	4628      	mov	r0, r5
 8009150:	47b0      	blx	r6
 8009152:	2800      	cmp	r0, #0
 8009154:	dc08      	bgt.n	8009168 <__sflush_r+0xfc>
 8009156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	4407      	add	r7, r0
 800916a:	eba8 0800 	sub.w	r8, r8, r0
 800916e:	e7e7      	b.n	8009140 <__sflush_r+0xd4>
 8009170:	20400001 	.word	0x20400001

08009174 <_fflush_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b913      	cbnz	r3, 8009184 <_fflush_r+0x10>
 800917e:	2500      	movs	r5, #0
 8009180:	4628      	mov	r0, r5
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	b118      	cbz	r0, 800918e <_fflush_r+0x1a>
 8009186:	6a03      	ldr	r3, [r0, #32]
 8009188:	b90b      	cbnz	r3, 800918e <_fflush_r+0x1a>
 800918a:	f7fd fa6f 	bl	800666c <__sinit>
 800918e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f3      	beq.n	800917e <_fflush_r+0xa>
 8009196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009198:	07d0      	lsls	r0, r2, #31
 800919a:	d404      	bmi.n	80091a6 <_fflush_r+0x32>
 800919c:	0599      	lsls	r1, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_fflush_r+0x32>
 80091a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a2:	f7fd fb7c 	bl	800689e <__retarget_lock_acquire_recursive>
 80091a6:	4628      	mov	r0, r5
 80091a8:	4621      	mov	r1, r4
 80091aa:	f7ff ff5f 	bl	800906c <__sflush_r>
 80091ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091b0:	07da      	lsls	r2, r3, #31
 80091b2:	4605      	mov	r5, r0
 80091b4:	d4e4      	bmi.n	8009180 <_fflush_r+0xc>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	059b      	lsls	r3, r3, #22
 80091ba:	d4e1      	bmi.n	8009180 <_fflush_r+0xc>
 80091bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091be:	f7fd fb6f 	bl	80068a0 <__retarget_lock_release_recursive>
 80091c2:	e7dd      	b.n	8009180 <_fflush_r+0xc>

080091c4 <memmove>:
 80091c4:	4288      	cmp	r0, r1
 80091c6:	b510      	push	{r4, lr}
 80091c8:	eb01 0402 	add.w	r4, r1, r2
 80091cc:	d902      	bls.n	80091d4 <memmove+0x10>
 80091ce:	4284      	cmp	r4, r0
 80091d0:	4623      	mov	r3, r4
 80091d2:	d807      	bhi.n	80091e4 <memmove+0x20>
 80091d4:	1e43      	subs	r3, r0, #1
 80091d6:	42a1      	cmp	r1, r4
 80091d8:	d008      	beq.n	80091ec <memmove+0x28>
 80091da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091e2:	e7f8      	b.n	80091d6 <memmove+0x12>
 80091e4:	4402      	add	r2, r0
 80091e6:	4601      	mov	r1, r0
 80091e8:	428a      	cmp	r2, r1
 80091ea:	d100      	bne.n	80091ee <memmove+0x2a>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f6:	e7f7      	b.n	80091e8 <memmove+0x24>

080091f8 <strncmp>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	b16a      	cbz	r2, 8009218 <strncmp+0x20>
 80091fc:	3901      	subs	r1, #1
 80091fe:	1884      	adds	r4, r0, r2
 8009200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009204:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009208:	429a      	cmp	r2, r3
 800920a:	d103      	bne.n	8009214 <strncmp+0x1c>
 800920c:	42a0      	cmp	r0, r4
 800920e:	d001      	beq.n	8009214 <strncmp+0x1c>
 8009210:	2a00      	cmp	r2, #0
 8009212:	d1f5      	bne.n	8009200 <strncmp+0x8>
 8009214:	1ad0      	subs	r0, r2, r3
 8009216:	bd10      	pop	{r4, pc}
 8009218:	4610      	mov	r0, r2
 800921a:	e7fc      	b.n	8009216 <strncmp+0x1e>

0800921c <_sbrk_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d06      	ldr	r5, [pc, #24]	@ (8009238 <_sbrk_r+0x1c>)
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f8 febe 	bl	8001fa8 <_sbrk>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_sbrk_r+0x1a>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_sbrk_r+0x1a>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20000884 	.word	0x20000884

0800923c <memcpy>:
 800923c:	440a      	add	r2, r1
 800923e:	4291      	cmp	r1, r2
 8009240:	f100 33ff 	add.w	r3, r0, #4294967295
 8009244:	d100      	bne.n	8009248 <memcpy+0xc>
 8009246:	4770      	bx	lr
 8009248:	b510      	push	{r4, lr}
 800924a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009252:	4291      	cmp	r1, r2
 8009254:	d1f9      	bne.n	800924a <memcpy+0xe>
 8009256:	bd10      	pop	{r4, pc}

08009258 <nan>:
 8009258:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009260 <nan+0x8>
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	00000000 	.word	0x00000000
 8009264:	7ff80000 	.word	0x7ff80000

08009268 <__assert_func>:
 8009268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800926a:	4614      	mov	r4, r2
 800926c:	461a      	mov	r2, r3
 800926e:	4b09      	ldr	r3, [pc, #36]	@ (8009294 <__assert_func+0x2c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4605      	mov	r5, r0
 8009274:	68d8      	ldr	r0, [r3, #12]
 8009276:	b14c      	cbz	r4, 800928c <__assert_func+0x24>
 8009278:	4b07      	ldr	r3, [pc, #28]	@ (8009298 <__assert_func+0x30>)
 800927a:	9100      	str	r1, [sp, #0]
 800927c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009280:	4906      	ldr	r1, [pc, #24]	@ (800929c <__assert_func+0x34>)
 8009282:	462b      	mov	r3, r5
 8009284:	f000 fba8 	bl	80099d8 <fiprintf>
 8009288:	f000 fbb8 	bl	80099fc <abort>
 800928c:	4b04      	ldr	r3, [pc, #16]	@ (80092a0 <__assert_func+0x38>)
 800928e:	461c      	mov	r4, r3
 8009290:	e7f3      	b.n	800927a <__assert_func+0x12>
 8009292:	bf00      	nop
 8009294:	20000020 	.word	0x20000020
 8009298:	0800b41e 	.word	0x0800b41e
 800929c:	0800b42b 	.word	0x0800b42b
 80092a0:	0800b459 	.word	0x0800b459

080092a4 <_calloc_r>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	fba1 5402 	umull	r5, r4, r1, r2
 80092aa:	b934      	cbnz	r4, 80092ba <_calloc_r+0x16>
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7fe f9cb 	bl	8007648 <_malloc_r>
 80092b2:	4606      	mov	r6, r0
 80092b4:	b928      	cbnz	r0, 80092c2 <_calloc_r+0x1e>
 80092b6:	4630      	mov	r0, r6
 80092b8:	bd70      	pop	{r4, r5, r6, pc}
 80092ba:	220c      	movs	r2, #12
 80092bc:	6002      	str	r2, [r0, #0]
 80092be:	2600      	movs	r6, #0
 80092c0:	e7f9      	b.n	80092b6 <_calloc_r+0x12>
 80092c2:	462a      	mov	r2, r5
 80092c4:	4621      	mov	r1, r4
 80092c6:	f7fd fa6c 	bl	80067a2 <memset>
 80092ca:	e7f4      	b.n	80092b6 <_calloc_r+0x12>

080092cc <rshift>:
 80092cc:	6903      	ldr	r3, [r0, #16]
 80092ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092da:	f100 0414 	add.w	r4, r0, #20
 80092de:	dd45      	ble.n	800936c <rshift+0xa0>
 80092e0:	f011 011f 	ands.w	r1, r1, #31
 80092e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092ec:	d10c      	bne.n	8009308 <rshift+0x3c>
 80092ee:	f100 0710 	add.w	r7, r0, #16
 80092f2:	4629      	mov	r1, r5
 80092f4:	42b1      	cmp	r1, r6
 80092f6:	d334      	bcc.n	8009362 <rshift+0x96>
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	1eea      	subs	r2, r5, #3
 80092fe:	4296      	cmp	r6, r2
 8009300:	bf38      	it	cc
 8009302:	2300      	movcc	r3, #0
 8009304:	4423      	add	r3, r4
 8009306:	e015      	b.n	8009334 <rshift+0x68>
 8009308:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800930c:	f1c1 0820 	rsb	r8, r1, #32
 8009310:	40cf      	lsrs	r7, r1
 8009312:	f105 0e04 	add.w	lr, r5, #4
 8009316:	46a1      	mov	r9, r4
 8009318:	4576      	cmp	r6, lr
 800931a:	46f4      	mov	ip, lr
 800931c:	d815      	bhi.n	800934a <rshift+0x7e>
 800931e:	1a9a      	subs	r2, r3, r2
 8009320:	0092      	lsls	r2, r2, #2
 8009322:	3a04      	subs	r2, #4
 8009324:	3501      	adds	r5, #1
 8009326:	42ae      	cmp	r6, r5
 8009328:	bf38      	it	cc
 800932a:	2200      	movcc	r2, #0
 800932c:	18a3      	adds	r3, r4, r2
 800932e:	50a7      	str	r7, [r4, r2]
 8009330:	b107      	cbz	r7, 8009334 <rshift+0x68>
 8009332:	3304      	adds	r3, #4
 8009334:	1b1a      	subs	r2, r3, r4
 8009336:	42a3      	cmp	r3, r4
 8009338:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800933c:	bf08      	it	eq
 800933e:	2300      	moveq	r3, #0
 8009340:	6102      	str	r2, [r0, #16]
 8009342:	bf08      	it	eq
 8009344:	6143      	streq	r3, [r0, #20]
 8009346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800934a:	f8dc c000 	ldr.w	ip, [ip]
 800934e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009352:	ea4c 0707 	orr.w	r7, ip, r7
 8009356:	f849 7b04 	str.w	r7, [r9], #4
 800935a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800935e:	40cf      	lsrs	r7, r1
 8009360:	e7da      	b.n	8009318 <rshift+0x4c>
 8009362:	f851 cb04 	ldr.w	ip, [r1], #4
 8009366:	f847 cf04 	str.w	ip, [r7, #4]!
 800936a:	e7c3      	b.n	80092f4 <rshift+0x28>
 800936c:	4623      	mov	r3, r4
 800936e:	e7e1      	b.n	8009334 <rshift+0x68>

08009370 <__hexdig_fun>:
 8009370:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009374:	2b09      	cmp	r3, #9
 8009376:	d802      	bhi.n	800937e <__hexdig_fun+0xe>
 8009378:	3820      	subs	r0, #32
 800937a:	b2c0      	uxtb	r0, r0
 800937c:	4770      	bx	lr
 800937e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009382:	2b05      	cmp	r3, #5
 8009384:	d801      	bhi.n	800938a <__hexdig_fun+0x1a>
 8009386:	3847      	subs	r0, #71	@ 0x47
 8009388:	e7f7      	b.n	800937a <__hexdig_fun+0xa>
 800938a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800938e:	2b05      	cmp	r3, #5
 8009390:	d801      	bhi.n	8009396 <__hexdig_fun+0x26>
 8009392:	3827      	subs	r0, #39	@ 0x27
 8009394:	e7f1      	b.n	800937a <__hexdig_fun+0xa>
 8009396:	2000      	movs	r0, #0
 8009398:	4770      	bx	lr
	...

0800939c <__gethex>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	b085      	sub	sp, #20
 80093a2:	468a      	mov	sl, r1
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	680b      	ldr	r3, [r1, #0]
 80093a8:	9001      	str	r0, [sp, #4]
 80093aa:	4690      	mov	r8, r2
 80093ac:	1c9c      	adds	r4, r3, #2
 80093ae:	46a1      	mov	r9, r4
 80093b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093b4:	2830      	cmp	r0, #48	@ 0x30
 80093b6:	d0fa      	beq.n	80093ae <__gethex+0x12>
 80093b8:	eba9 0303 	sub.w	r3, r9, r3
 80093bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80093c0:	f7ff ffd6 	bl	8009370 <__hexdig_fun>
 80093c4:	4605      	mov	r5, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d168      	bne.n	800949c <__gethex+0x100>
 80093ca:	49a0      	ldr	r1, [pc, #640]	@ (800964c <__gethex+0x2b0>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	4648      	mov	r0, r9
 80093d0:	f7ff ff12 	bl	80091f8 <strncmp>
 80093d4:	4607      	mov	r7, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d167      	bne.n	80094aa <__gethex+0x10e>
 80093da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093de:	4626      	mov	r6, r4
 80093e0:	f7ff ffc6 	bl	8009370 <__hexdig_fun>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d062      	beq.n	80094ae <__gethex+0x112>
 80093e8:	4623      	mov	r3, r4
 80093ea:	7818      	ldrb	r0, [r3, #0]
 80093ec:	2830      	cmp	r0, #48	@ 0x30
 80093ee:	4699      	mov	r9, r3
 80093f0:	f103 0301 	add.w	r3, r3, #1
 80093f4:	d0f9      	beq.n	80093ea <__gethex+0x4e>
 80093f6:	f7ff ffbb 	bl	8009370 <__hexdig_fun>
 80093fa:	fab0 f580 	clz	r5, r0
 80093fe:	096d      	lsrs	r5, r5, #5
 8009400:	f04f 0b01 	mov.w	fp, #1
 8009404:	464a      	mov	r2, r9
 8009406:	4616      	mov	r6, r2
 8009408:	3201      	adds	r2, #1
 800940a:	7830      	ldrb	r0, [r6, #0]
 800940c:	f7ff ffb0 	bl	8009370 <__hexdig_fun>
 8009410:	2800      	cmp	r0, #0
 8009412:	d1f8      	bne.n	8009406 <__gethex+0x6a>
 8009414:	498d      	ldr	r1, [pc, #564]	@ (800964c <__gethex+0x2b0>)
 8009416:	2201      	movs	r2, #1
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff feed 	bl	80091f8 <strncmp>
 800941e:	2800      	cmp	r0, #0
 8009420:	d13f      	bne.n	80094a2 <__gethex+0x106>
 8009422:	b944      	cbnz	r4, 8009436 <__gethex+0x9a>
 8009424:	1c74      	adds	r4, r6, #1
 8009426:	4622      	mov	r2, r4
 8009428:	4616      	mov	r6, r2
 800942a:	3201      	adds	r2, #1
 800942c:	7830      	ldrb	r0, [r6, #0]
 800942e:	f7ff ff9f 	bl	8009370 <__hexdig_fun>
 8009432:	2800      	cmp	r0, #0
 8009434:	d1f8      	bne.n	8009428 <__gethex+0x8c>
 8009436:	1ba4      	subs	r4, r4, r6
 8009438:	00a7      	lsls	r7, r4, #2
 800943a:	7833      	ldrb	r3, [r6, #0]
 800943c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009440:	2b50      	cmp	r3, #80	@ 0x50
 8009442:	d13e      	bne.n	80094c2 <__gethex+0x126>
 8009444:	7873      	ldrb	r3, [r6, #1]
 8009446:	2b2b      	cmp	r3, #43	@ 0x2b
 8009448:	d033      	beq.n	80094b2 <__gethex+0x116>
 800944a:	2b2d      	cmp	r3, #45	@ 0x2d
 800944c:	d034      	beq.n	80094b8 <__gethex+0x11c>
 800944e:	1c71      	adds	r1, r6, #1
 8009450:	2400      	movs	r4, #0
 8009452:	7808      	ldrb	r0, [r1, #0]
 8009454:	f7ff ff8c 	bl	8009370 <__hexdig_fun>
 8009458:	1e43      	subs	r3, r0, #1
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b18      	cmp	r3, #24
 800945e:	d830      	bhi.n	80094c2 <__gethex+0x126>
 8009460:	f1a0 0210 	sub.w	r2, r0, #16
 8009464:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009468:	f7ff ff82 	bl	8009370 <__hexdig_fun>
 800946c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009470:	fa5f fc8c 	uxtb.w	ip, ip
 8009474:	f1bc 0f18 	cmp.w	ip, #24
 8009478:	f04f 030a 	mov.w	r3, #10
 800947c:	d91e      	bls.n	80094bc <__gethex+0x120>
 800947e:	b104      	cbz	r4, 8009482 <__gethex+0xe6>
 8009480:	4252      	negs	r2, r2
 8009482:	4417      	add	r7, r2
 8009484:	f8ca 1000 	str.w	r1, [sl]
 8009488:	b1ed      	cbz	r5, 80094c6 <__gethex+0x12a>
 800948a:	f1bb 0f00 	cmp.w	fp, #0
 800948e:	bf0c      	ite	eq
 8009490:	2506      	moveq	r5, #6
 8009492:	2500      	movne	r5, #0
 8009494:	4628      	mov	r0, r5
 8009496:	b005      	add	sp, #20
 8009498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949c:	2500      	movs	r5, #0
 800949e:	462c      	mov	r4, r5
 80094a0:	e7b0      	b.n	8009404 <__gethex+0x68>
 80094a2:	2c00      	cmp	r4, #0
 80094a4:	d1c7      	bne.n	8009436 <__gethex+0x9a>
 80094a6:	4627      	mov	r7, r4
 80094a8:	e7c7      	b.n	800943a <__gethex+0x9e>
 80094aa:	464e      	mov	r6, r9
 80094ac:	462f      	mov	r7, r5
 80094ae:	2501      	movs	r5, #1
 80094b0:	e7c3      	b.n	800943a <__gethex+0x9e>
 80094b2:	2400      	movs	r4, #0
 80094b4:	1cb1      	adds	r1, r6, #2
 80094b6:	e7cc      	b.n	8009452 <__gethex+0xb6>
 80094b8:	2401      	movs	r4, #1
 80094ba:	e7fb      	b.n	80094b4 <__gethex+0x118>
 80094bc:	fb03 0002 	mla	r0, r3, r2, r0
 80094c0:	e7ce      	b.n	8009460 <__gethex+0xc4>
 80094c2:	4631      	mov	r1, r6
 80094c4:	e7de      	b.n	8009484 <__gethex+0xe8>
 80094c6:	eba6 0309 	sub.w	r3, r6, r9
 80094ca:	3b01      	subs	r3, #1
 80094cc:	4629      	mov	r1, r5
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	dc0a      	bgt.n	80094e8 <__gethex+0x14c>
 80094d2:	9801      	ldr	r0, [sp, #4]
 80094d4:	f7fe f944 	bl	8007760 <_Balloc>
 80094d8:	4604      	mov	r4, r0
 80094da:	b940      	cbnz	r0, 80094ee <__gethex+0x152>
 80094dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009650 <__gethex+0x2b4>)
 80094de:	4602      	mov	r2, r0
 80094e0:	21e4      	movs	r1, #228	@ 0xe4
 80094e2:	485c      	ldr	r0, [pc, #368]	@ (8009654 <__gethex+0x2b8>)
 80094e4:	f7ff fec0 	bl	8009268 <__assert_func>
 80094e8:	3101      	adds	r1, #1
 80094ea:	105b      	asrs	r3, r3, #1
 80094ec:	e7ef      	b.n	80094ce <__gethex+0x132>
 80094ee:	f100 0a14 	add.w	sl, r0, #20
 80094f2:	2300      	movs	r3, #0
 80094f4:	4655      	mov	r5, sl
 80094f6:	469b      	mov	fp, r3
 80094f8:	45b1      	cmp	r9, r6
 80094fa:	d337      	bcc.n	800956c <__gethex+0x1d0>
 80094fc:	f845 bb04 	str.w	fp, [r5], #4
 8009500:	eba5 050a 	sub.w	r5, r5, sl
 8009504:	10ad      	asrs	r5, r5, #2
 8009506:	6125      	str	r5, [r4, #16]
 8009508:	4658      	mov	r0, fp
 800950a:	f7fe fa1b 	bl	8007944 <__hi0bits>
 800950e:	016d      	lsls	r5, r5, #5
 8009510:	f8d8 6000 	ldr.w	r6, [r8]
 8009514:	1a2d      	subs	r5, r5, r0
 8009516:	42b5      	cmp	r5, r6
 8009518:	dd54      	ble.n	80095c4 <__gethex+0x228>
 800951a:	1bad      	subs	r5, r5, r6
 800951c:	4629      	mov	r1, r5
 800951e:	4620      	mov	r0, r4
 8009520:	f7fe fda7 	bl	8008072 <__any_on>
 8009524:	4681      	mov	r9, r0
 8009526:	b178      	cbz	r0, 8009548 <__gethex+0x1ac>
 8009528:	1e6b      	subs	r3, r5, #1
 800952a:	1159      	asrs	r1, r3, #5
 800952c:	f003 021f 	and.w	r2, r3, #31
 8009530:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009534:	f04f 0901 	mov.w	r9, #1
 8009538:	fa09 f202 	lsl.w	r2, r9, r2
 800953c:	420a      	tst	r2, r1
 800953e:	d003      	beq.n	8009548 <__gethex+0x1ac>
 8009540:	454b      	cmp	r3, r9
 8009542:	dc36      	bgt.n	80095b2 <__gethex+0x216>
 8009544:	f04f 0902 	mov.w	r9, #2
 8009548:	4629      	mov	r1, r5
 800954a:	4620      	mov	r0, r4
 800954c:	f7ff febe 	bl	80092cc <rshift>
 8009550:	442f      	add	r7, r5
 8009552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009556:	42bb      	cmp	r3, r7
 8009558:	da42      	bge.n	80095e0 <__gethex+0x244>
 800955a:	9801      	ldr	r0, [sp, #4]
 800955c:	4621      	mov	r1, r4
 800955e:	f7fe f93f 	bl	80077e0 <_Bfree>
 8009562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009564:	2300      	movs	r3, #0
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	25a3      	movs	r5, #163	@ 0xa3
 800956a:	e793      	b.n	8009494 <__gethex+0xf8>
 800956c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009570:	2a2e      	cmp	r2, #46	@ 0x2e
 8009572:	d012      	beq.n	800959a <__gethex+0x1fe>
 8009574:	2b20      	cmp	r3, #32
 8009576:	d104      	bne.n	8009582 <__gethex+0x1e6>
 8009578:	f845 bb04 	str.w	fp, [r5], #4
 800957c:	f04f 0b00 	mov.w	fp, #0
 8009580:	465b      	mov	r3, fp
 8009582:	7830      	ldrb	r0, [r6, #0]
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	f7ff fef3 	bl	8009370 <__hexdig_fun>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	f000 000f 	and.w	r0, r0, #15
 8009590:	4098      	lsls	r0, r3
 8009592:	ea4b 0b00 	orr.w	fp, fp, r0
 8009596:	3304      	adds	r3, #4
 8009598:	e7ae      	b.n	80094f8 <__gethex+0x15c>
 800959a:	45b1      	cmp	r9, r6
 800959c:	d8ea      	bhi.n	8009574 <__gethex+0x1d8>
 800959e:	492b      	ldr	r1, [pc, #172]	@ (800964c <__gethex+0x2b0>)
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff fe27 	bl	80091f8 <strncmp>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1e1      	bne.n	8009574 <__gethex+0x1d8>
 80095b0:	e7a2      	b.n	80094f8 <__gethex+0x15c>
 80095b2:	1ea9      	subs	r1, r5, #2
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7fe fd5c 	bl	8008072 <__any_on>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0c2      	beq.n	8009544 <__gethex+0x1a8>
 80095be:	f04f 0903 	mov.w	r9, #3
 80095c2:	e7c1      	b.n	8009548 <__gethex+0x1ac>
 80095c4:	da09      	bge.n	80095da <__gethex+0x23e>
 80095c6:	1b75      	subs	r5, r6, r5
 80095c8:	4621      	mov	r1, r4
 80095ca:	9801      	ldr	r0, [sp, #4]
 80095cc:	462a      	mov	r2, r5
 80095ce:	f7fe fb17 	bl	8007c00 <__lshift>
 80095d2:	1b7f      	subs	r7, r7, r5
 80095d4:	4604      	mov	r4, r0
 80095d6:	f100 0a14 	add.w	sl, r0, #20
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	e7b8      	b.n	8009552 <__gethex+0x1b6>
 80095e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095e4:	42bd      	cmp	r5, r7
 80095e6:	dd6f      	ble.n	80096c8 <__gethex+0x32c>
 80095e8:	1bed      	subs	r5, r5, r7
 80095ea:	42ae      	cmp	r6, r5
 80095ec:	dc34      	bgt.n	8009658 <__gethex+0x2bc>
 80095ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d022      	beq.n	800963c <__gethex+0x2a0>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d024      	beq.n	8009644 <__gethex+0x2a8>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d115      	bne.n	800962a <__gethex+0x28e>
 80095fe:	42ae      	cmp	r6, r5
 8009600:	d113      	bne.n	800962a <__gethex+0x28e>
 8009602:	2e01      	cmp	r6, #1
 8009604:	d10b      	bne.n	800961e <__gethex+0x282>
 8009606:	9a02      	ldr	r2, [sp, #8]
 8009608:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	2301      	movs	r3, #1
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	f8ca 3000 	str.w	r3, [sl]
 8009616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009618:	2562      	movs	r5, #98	@ 0x62
 800961a:	601c      	str	r4, [r3, #0]
 800961c:	e73a      	b.n	8009494 <__gethex+0xf8>
 800961e:	1e71      	subs	r1, r6, #1
 8009620:	4620      	mov	r0, r4
 8009622:	f7fe fd26 	bl	8008072 <__any_on>
 8009626:	2800      	cmp	r0, #0
 8009628:	d1ed      	bne.n	8009606 <__gethex+0x26a>
 800962a:	9801      	ldr	r0, [sp, #4]
 800962c:	4621      	mov	r1, r4
 800962e:	f7fe f8d7 	bl	80077e0 <_Bfree>
 8009632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009634:	2300      	movs	r3, #0
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	2550      	movs	r5, #80	@ 0x50
 800963a:	e72b      	b.n	8009494 <__gethex+0xf8>
 800963c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f3      	bne.n	800962a <__gethex+0x28e>
 8009642:	e7e0      	b.n	8009606 <__gethex+0x26a>
 8009644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1dd      	bne.n	8009606 <__gethex+0x26a>
 800964a:	e7ee      	b.n	800962a <__gethex+0x28e>
 800964c:	0800b403 	.word	0x0800b403
 8009650:	0800b399 	.word	0x0800b399
 8009654:	0800b45a 	.word	0x0800b45a
 8009658:	1e6f      	subs	r7, r5, #1
 800965a:	f1b9 0f00 	cmp.w	r9, #0
 800965e:	d130      	bne.n	80096c2 <__gethex+0x326>
 8009660:	b127      	cbz	r7, 800966c <__gethex+0x2d0>
 8009662:	4639      	mov	r1, r7
 8009664:	4620      	mov	r0, r4
 8009666:	f7fe fd04 	bl	8008072 <__any_on>
 800966a:	4681      	mov	r9, r0
 800966c:	117a      	asrs	r2, r7, #5
 800966e:	2301      	movs	r3, #1
 8009670:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009674:	f007 071f 	and.w	r7, r7, #31
 8009678:	40bb      	lsls	r3, r7
 800967a:	4213      	tst	r3, r2
 800967c:	4629      	mov	r1, r5
 800967e:	4620      	mov	r0, r4
 8009680:	bf18      	it	ne
 8009682:	f049 0902 	orrne.w	r9, r9, #2
 8009686:	f7ff fe21 	bl	80092cc <rshift>
 800968a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800968e:	1b76      	subs	r6, r6, r5
 8009690:	2502      	movs	r5, #2
 8009692:	f1b9 0f00 	cmp.w	r9, #0
 8009696:	d047      	beq.n	8009728 <__gethex+0x38c>
 8009698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d015      	beq.n	80096cc <__gethex+0x330>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d017      	beq.n	80096d4 <__gethex+0x338>
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d109      	bne.n	80096bc <__gethex+0x320>
 80096a8:	f019 0f02 	tst.w	r9, #2
 80096ac:	d006      	beq.n	80096bc <__gethex+0x320>
 80096ae:	f8da 3000 	ldr.w	r3, [sl]
 80096b2:	ea49 0903 	orr.w	r9, r9, r3
 80096b6:	f019 0f01 	tst.w	r9, #1
 80096ba:	d10e      	bne.n	80096da <__gethex+0x33e>
 80096bc:	f045 0510 	orr.w	r5, r5, #16
 80096c0:	e032      	b.n	8009728 <__gethex+0x38c>
 80096c2:	f04f 0901 	mov.w	r9, #1
 80096c6:	e7d1      	b.n	800966c <__gethex+0x2d0>
 80096c8:	2501      	movs	r5, #1
 80096ca:	e7e2      	b.n	8009692 <__gethex+0x2f6>
 80096cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ce:	f1c3 0301 	rsb	r3, r3, #1
 80096d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0f0      	beq.n	80096bc <__gethex+0x320>
 80096da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096de:	f104 0314 	add.w	r3, r4, #20
 80096e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096ea:	f04f 0c00 	mov.w	ip, #0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096f8:	d01b      	beq.n	8009732 <__gethex+0x396>
 80096fa:	3201      	adds	r2, #1
 80096fc:	6002      	str	r2, [r0, #0]
 80096fe:	2d02      	cmp	r5, #2
 8009700:	f104 0314 	add.w	r3, r4, #20
 8009704:	d13c      	bne.n	8009780 <__gethex+0x3e4>
 8009706:	f8d8 2000 	ldr.w	r2, [r8]
 800970a:	3a01      	subs	r2, #1
 800970c:	42b2      	cmp	r2, r6
 800970e:	d109      	bne.n	8009724 <__gethex+0x388>
 8009710:	1171      	asrs	r1, r6, #5
 8009712:	2201      	movs	r2, #1
 8009714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009718:	f006 061f 	and.w	r6, r6, #31
 800971c:	fa02 f606 	lsl.w	r6, r2, r6
 8009720:	421e      	tst	r6, r3
 8009722:	d13a      	bne.n	800979a <__gethex+0x3fe>
 8009724:	f045 0520 	orr.w	r5, r5, #32
 8009728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800972a:	601c      	str	r4, [r3, #0]
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	601f      	str	r7, [r3, #0]
 8009730:	e6b0      	b.n	8009494 <__gethex+0xf8>
 8009732:	4299      	cmp	r1, r3
 8009734:	f843 cc04 	str.w	ip, [r3, #-4]
 8009738:	d8d9      	bhi.n	80096ee <__gethex+0x352>
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	459b      	cmp	fp, r3
 800973e:	db17      	blt.n	8009770 <__gethex+0x3d4>
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	9801      	ldr	r0, [sp, #4]
 8009744:	3101      	adds	r1, #1
 8009746:	f7fe f80b 	bl	8007760 <_Balloc>
 800974a:	4681      	mov	r9, r0
 800974c:	b918      	cbnz	r0, 8009756 <__gethex+0x3ba>
 800974e:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <__gethex+0x41c>)
 8009750:	4602      	mov	r2, r0
 8009752:	2184      	movs	r1, #132	@ 0x84
 8009754:	e6c5      	b.n	80094e2 <__gethex+0x146>
 8009756:	6922      	ldr	r2, [r4, #16]
 8009758:	3202      	adds	r2, #2
 800975a:	f104 010c 	add.w	r1, r4, #12
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	300c      	adds	r0, #12
 8009762:	f7ff fd6b 	bl	800923c <memcpy>
 8009766:	4621      	mov	r1, r4
 8009768:	9801      	ldr	r0, [sp, #4]
 800976a:	f7fe f839 	bl	80077e0 <_Bfree>
 800976e:	464c      	mov	r4, r9
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009778:	6122      	str	r2, [r4, #16]
 800977a:	2201      	movs	r2, #1
 800977c:	615a      	str	r2, [r3, #20]
 800977e:	e7be      	b.n	80096fe <__gethex+0x362>
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	455a      	cmp	r2, fp
 8009784:	dd0b      	ble.n	800979e <__gethex+0x402>
 8009786:	2101      	movs	r1, #1
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff fd9f 	bl	80092cc <rshift>
 800978e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009792:	3701      	adds	r7, #1
 8009794:	42bb      	cmp	r3, r7
 8009796:	f6ff aee0 	blt.w	800955a <__gethex+0x1be>
 800979a:	2501      	movs	r5, #1
 800979c:	e7c2      	b.n	8009724 <__gethex+0x388>
 800979e:	f016 061f 	ands.w	r6, r6, #31
 80097a2:	d0fa      	beq.n	800979a <__gethex+0x3fe>
 80097a4:	4453      	add	r3, sl
 80097a6:	f1c6 0620 	rsb	r6, r6, #32
 80097aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097ae:	f7fe f8c9 	bl	8007944 <__hi0bits>
 80097b2:	42b0      	cmp	r0, r6
 80097b4:	dbe7      	blt.n	8009786 <__gethex+0x3ea>
 80097b6:	e7f0      	b.n	800979a <__gethex+0x3fe>
 80097b8:	0800b399 	.word	0x0800b399

080097bc <L_shift>:
 80097bc:	f1c2 0208 	rsb	r2, r2, #8
 80097c0:	0092      	lsls	r2, r2, #2
 80097c2:	b570      	push	{r4, r5, r6, lr}
 80097c4:	f1c2 0620 	rsb	r6, r2, #32
 80097c8:	6843      	ldr	r3, [r0, #4]
 80097ca:	6804      	ldr	r4, [r0, #0]
 80097cc:	fa03 f506 	lsl.w	r5, r3, r6
 80097d0:	432c      	orrs	r4, r5
 80097d2:	40d3      	lsrs	r3, r2
 80097d4:	6004      	str	r4, [r0, #0]
 80097d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80097da:	4288      	cmp	r0, r1
 80097dc:	d3f4      	bcc.n	80097c8 <L_shift+0xc>
 80097de:	bd70      	pop	{r4, r5, r6, pc}

080097e0 <__match>:
 80097e0:	b530      	push	{r4, r5, lr}
 80097e2:	6803      	ldr	r3, [r0, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ea:	b914      	cbnz	r4, 80097f2 <__match+0x12>
 80097ec:	6003      	str	r3, [r0, #0]
 80097ee:	2001      	movs	r0, #1
 80097f0:	bd30      	pop	{r4, r5, pc}
 80097f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80097fa:	2d19      	cmp	r5, #25
 80097fc:	bf98      	it	ls
 80097fe:	3220      	addls	r2, #32
 8009800:	42a2      	cmp	r2, r4
 8009802:	d0f0      	beq.n	80097e6 <__match+0x6>
 8009804:	2000      	movs	r0, #0
 8009806:	e7f3      	b.n	80097f0 <__match+0x10>

08009808 <__hexnan>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	680b      	ldr	r3, [r1, #0]
 800980e:	6801      	ldr	r1, [r0, #0]
 8009810:	115e      	asrs	r6, r3, #5
 8009812:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009816:	f013 031f 	ands.w	r3, r3, #31
 800981a:	b087      	sub	sp, #28
 800981c:	bf18      	it	ne
 800981e:	3604      	addne	r6, #4
 8009820:	2500      	movs	r5, #0
 8009822:	1f37      	subs	r7, r6, #4
 8009824:	4682      	mov	sl, r0
 8009826:	4690      	mov	r8, r2
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	f846 5c04 	str.w	r5, [r6, #-4]
 800982e:	46b9      	mov	r9, r7
 8009830:	463c      	mov	r4, r7
 8009832:	9502      	str	r5, [sp, #8]
 8009834:	46ab      	mov	fp, r5
 8009836:	784a      	ldrb	r2, [r1, #1]
 8009838:	1c4b      	adds	r3, r1, #1
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	b342      	cbz	r2, 8009890 <__hexnan+0x88>
 800983e:	4610      	mov	r0, r2
 8009840:	9105      	str	r1, [sp, #20]
 8009842:	9204      	str	r2, [sp, #16]
 8009844:	f7ff fd94 	bl	8009370 <__hexdig_fun>
 8009848:	2800      	cmp	r0, #0
 800984a:	d151      	bne.n	80098f0 <__hexnan+0xe8>
 800984c:	9a04      	ldr	r2, [sp, #16]
 800984e:	9905      	ldr	r1, [sp, #20]
 8009850:	2a20      	cmp	r2, #32
 8009852:	d818      	bhi.n	8009886 <__hexnan+0x7e>
 8009854:	9b02      	ldr	r3, [sp, #8]
 8009856:	459b      	cmp	fp, r3
 8009858:	dd13      	ble.n	8009882 <__hexnan+0x7a>
 800985a:	454c      	cmp	r4, r9
 800985c:	d206      	bcs.n	800986c <__hexnan+0x64>
 800985e:	2d07      	cmp	r5, #7
 8009860:	dc04      	bgt.n	800986c <__hexnan+0x64>
 8009862:	462a      	mov	r2, r5
 8009864:	4649      	mov	r1, r9
 8009866:	4620      	mov	r0, r4
 8009868:	f7ff ffa8 	bl	80097bc <L_shift>
 800986c:	4544      	cmp	r4, r8
 800986e:	d952      	bls.n	8009916 <__hexnan+0x10e>
 8009870:	2300      	movs	r3, #0
 8009872:	f1a4 0904 	sub.w	r9, r4, #4
 8009876:	f844 3c04 	str.w	r3, [r4, #-4]
 800987a:	f8cd b008 	str.w	fp, [sp, #8]
 800987e:	464c      	mov	r4, r9
 8009880:	461d      	mov	r5, r3
 8009882:	9903      	ldr	r1, [sp, #12]
 8009884:	e7d7      	b.n	8009836 <__hexnan+0x2e>
 8009886:	2a29      	cmp	r2, #41	@ 0x29
 8009888:	d157      	bne.n	800993a <__hexnan+0x132>
 800988a:	3102      	adds	r1, #2
 800988c:	f8ca 1000 	str.w	r1, [sl]
 8009890:	f1bb 0f00 	cmp.w	fp, #0
 8009894:	d051      	beq.n	800993a <__hexnan+0x132>
 8009896:	454c      	cmp	r4, r9
 8009898:	d206      	bcs.n	80098a8 <__hexnan+0xa0>
 800989a:	2d07      	cmp	r5, #7
 800989c:	dc04      	bgt.n	80098a8 <__hexnan+0xa0>
 800989e:	462a      	mov	r2, r5
 80098a0:	4649      	mov	r1, r9
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7ff ff8a 	bl	80097bc <L_shift>
 80098a8:	4544      	cmp	r4, r8
 80098aa:	d936      	bls.n	800991a <__hexnan+0x112>
 80098ac:	f1a8 0204 	sub.w	r2, r8, #4
 80098b0:	4623      	mov	r3, r4
 80098b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80098b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80098ba:	429f      	cmp	r7, r3
 80098bc:	d2f9      	bcs.n	80098b2 <__hexnan+0xaa>
 80098be:	1b3b      	subs	r3, r7, r4
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	3304      	adds	r3, #4
 80098c6:	3401      	adds	r4, #1
 80098c8:	3e03      	subs	r6, #3
 80098ca:	42b4      	cmp	r4, r6
 80098cc:	bf88      	it	hi
 80098ce:	2304      	movhi	r3, #4
 80098d0:	4443      	add	r3, r8
 80098d2:	2200      	movs	r2, #0
 80098d4:	f843 2b04 	str.w	r2, [r3], #4
 80098d8:	429f      	cmp	r7, r3
 80098da:	d2fb      	bcs.n	80098d4 <__hexnan+0xcc>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	b91b      	cbnz	r3, 80098e8 <__hexnan+0xe0>
 80098e0:	4547      	cmp	r7, r8
 80098e2:	d128      	bne.n	8009936 <__hexnan+0x12e>
 80098e4:	2301      	movs	r3, #1
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	2005      	movs	r0, #5
 80098ea:	b007      	add	sp, #28
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	3501      	adds	r5, #1
 80098f2:	2d08      	cmp	r5, #8
 80098f4:	f10b 0b01 	add.w	fp, fp, #1
 80098f8:	dd06      	ble.n	8009908 <__hexnan+0x100>
 80098fa:	4544      	cmp	r4, r8
 80098fc:	d9c1      	bls.n	8009882 <__hexnan+0x7a>
 80098fe:	2300      	movs	r3, #0
 8009900:	f844 3c04 	str.w	r3, [r4, #-4]
 8009904:	2501      	movs	r5, #1
 8009906:	3c04      	subs	r4, #4
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	f000 000f 	and.w	r0, r0, #15
 800990e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009912:	6020      	str	r0, [r4, #0]
 8009914:	e7b5      	b.n	8009882 <__hexnan+0x7a>
 8009916:	2508      	movs	r5, #8
 8009918:	e7b3      	b.n	8009882 <__hexnan+0x7a>
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0dd      	beq.n	80098dc <__hexnan+0xd4>
 8009920:	f1c3 0320 	rsb	r3, r3, #32
 8009924:	f04f 32ff 	mov.w	r2, #4294967295
 8009928:	40da      	lsrs	r2, r3
 800992a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800992e:	4013      	ands	r3, r2
 8009930:	f846 3c04 	str.w	r3, [r6, #-4]
 8009934:	e7d2      	b.n	80098dc <__hexnan+0xd4>
 8009936:	3f04      	subs	r7, #4
 8009938:	e7d0      	b.n	80098dc <__hexnan+0xd4>
 800993a:	2004      	movs	r0, #4
 800993c:	e7d5      	b.n	80098ea <__hexnan+0xe2>

0800993e <__ascii_mbtowc>:
 800993e:	b082      	sub	sp, #8
 8009940:	b901      	cbnz	r1, 8009944 <__ascii_mbtowc+0x6>
 8009942:	a901      	add	r1, sp, #4
 8009944:	b142      	cbz	r2, 8009958 <__ascii_mbtowc+0x1a>
 8009946:	b14b      	cbz	r3, 800995c <__ascii_mbtowc+0x1e>
 8009948:	7813      	ldrb	r3, [r2, #0]
 800994a:	600b      	str	r3, [r1, #0]
 800994c:	7812      	ldrb	r2, [r2, #0]
 800994e:	1e10      	subs	r0, r2, #0
 8009950:	bf18      	it	ne
 8009952:	2001      	movne	r0, #1
 8009954:	b002      	add	sp, #8
 8009956:	4770      	bx	lr
 8009958:	4610      	mov	r0, r2
 800995a:	e7fb      	b.n	8009954 <__ascii_mbtowc+0x16>
 800995c:	f06f 0001 	mvn.w	r0, #1
 8009960:	e7f8      	b.n	8009954 <__ascii_mbtowc+0x16>

08009962 <_realloc_r>:
 8009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	4607      	mov	r7, r0
 8009968:	4614      	mov	r4, r2
 800996a:	460d      	mov	r5, r1
 800996c:	b921      	cbnz	r1, 8009978 <_realloc_r+0x16>
 800996e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	4611      	mov	r1, r2
 8009974:	f7fd be68 	b.w	8007648 <_malloc_r>
 8009978:	b92a      	cbnz	r2, 8009986 <_realloc_r+0x24>
 800997a:	f7fd fdf1 	bl	8007560 <_free_r>
 800997e:	4625      	mov	r5, r4
 8009980:	4628      	mov	r0, r5
 8009982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009986:	f000 f840 	bl	8009a0a <_malloc_usable_size_r>
 800998a:	4284      	cmp	r4, r0
 800998c:	4606      	mov	r6, r0
 800998e:	d802      	bhi.n	8009996 <_realloc_r+0x34>
 8009990:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009994:	d8f4      	bhi.n	8009980 <_realloc_r+0x1e>
 8009996:	4621      	mov	r1, r4
 8009998:	4638      	mov	r0, r7
 800999a:	f7fd fe55 	bl	8007648 <_malloc_r>
 800999e:	4680      	mov	r8, r0
 80099a0:	b908      	cbnz	r0, 80099a6 <_realloc_r+0x44>
 80099a2:	4645      	mov	r5, r8
 80099a4:	e7ec      	b.n	8009980 <_realloc_r+0x1e>
 80099a6:	42b4      	cmp	r4, r6
 80099a8:	4622      	mov	r2, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	bf28      	it	cs
 80099ae:	4632      	movcs	r2, r6
 80099b0:	f7ff fc44 	bl	800923c <memcpy>
 80099b4:	4629      	mov	r1, r5
 80099b6:	4638      	mov	r0, r7
 80099b8:	f7fd fdd2 	bl	8007560 <_free_r>
 80099bc:	e7f1      	b.n	80099a2 <_realloc_r+0x40>

080099be <__ascii_wctomb>:
 80099be:	4603      	mov	r3, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	b141      	cbz	r1, 80099d6 <__ascii_wctomb+0x18>
 80099c4:	2aff      	cmp	r2, #255	@ 0xff
 80099c6:	d904      	bls.n	80099d2 <__ascii_wctomb+0x14>
 80099c8:	228a      	movs	r2, #138	@ 0x8a
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	4770      	bx	lr
 80099d2:	700a      	strb	r2, [r1, #0]
 80099d4:	2001      	movs	r0, #1
 80099d6:	4770      	bx	lr

080099d8 <fiprintf>:
 80099d8:	b40e      	push	{r1, r2, r3}
 80099da:	b503      	push	{r0, r1, lr}
 80099dc:	4601      	mov	r1, r0
 80099de:	ab03      	add	r3, sp, #12
 80099e0:	4805      	ldr	r0, [pc, #20]	@ (80099f8 <fiprintf+0x20>)
 80099e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e6:	6800      	ldr	r0, [r0, #0]
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f000 f83f 	bl	8009a6c <_vfiprintf_r>
 80099ee:	b002      	add	sp, #8
 80099f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f4:	b003      	add	sp, #12
 80099f6:	4770      	bx	lr
 80099f8:	20000020 	.word	0x20000020

080099fc <abort>:
 80099fc:	b508      	push	{r3, lr}
 80099fe:	2006      	movs	r0, #6
 8009a00:	f000 fa08 	bl	8009e14 <raise>
 8009a04:	2001      	movs	r0, #1
 8009a06:	f7f8 fa57 	bl	8001eb8 <_exit>

08009a0a <_malloc_usable_size_r>:
 8009a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0e:	1f18      	subs	r0, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfbc      	itt	lt
 8009a14:	580b      	ldrlt	r3, [r1, r0]
 8009a16:	18c0      	addlt	r0, r0, r3
 8009a18:	4770      	bx	lr

08009a1a <__sfputc_r>:
 8009a1a:	6893      	ldr	r3, [r2, #8]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	b410      	push	{r4}
 8009a22:	6093      	str	r3, [r2, #8]
 8009a24:	da08      	bge.n	8009a38 <__sfputc_r+0x1e>
 8009a26:	6994      	ldr	r4, [r2, #24]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	db01      	blt.n	8009a30 <__sfputc_r+0x16>
 8009a2c:	290a      	cmp	r1, #10
 8009a2e:	d103      	bne.n	8009a38 <__sfputc_r+0x1e>
 8009a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a34:	f000 b932 	b.w	8009c9c <__swbuf_r>
 8009a38:	6813      	ldr	r3, [r2, #0]
 8009a3a:	1c58      	adds	r0, r3, #1
 8009a3c:	6010      	str	r0, [r2, #0]
 8009a3e:	7019      	strb	r1, [r3, #0]
 8009a40:	4608      	mov	r0, r1
 8009a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <__sfputs_r>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	4614      	mov	r4, r2
 8009a50:	18d5      	adds	r5, r2, r3
 8009a52:	42ac      	cmp	r4, r5
 8009a54:	d101      	bne.n	8009a5a <__sfputs_r+0x12>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e007      	b.n	8009a6a <__sfputs_r+0x22>
 8009a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff ffda 	bl	8009a1a <__sfputc_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	d1f3      	bne.n	8009a52 <__sfputs_r+0xa>
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a6c <_vfiprintf_r>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	460d      	mov	r5, r1
 8009a72:	b09d      	sub	sp, #116	@ 0x74
 8009a74:	4614      	mov	r4, r2
 8009a76:	4698      	mov	r8, r3
 8009a78:	4606      	mov	r6, r0
 8009a7a:	b118      	cbz	r0, 8009a84 <_vfiprintf_r+0x18>
 8009a7c:	6a03      	ldr	r3, [r0, #32]
 8009a7e:	b90b      	cbnz	r3, 8009a84 <_vfiprintf_r+0x18>
 8009a80:	f7fc fdf4 	bl	800666c <__sinit>
 8009a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a86:	07d9      	lsls	r1, r3, #31
 8009a88:	d405      	bmi.n	8009a96 <_vfiprintf_r+0x2a>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	059a      	lsls	r2, r3, #22
 8009a8e:	d402      	bmi.n	8009a96 <_vfiprintf_r+0x2a>
 8009a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a92:	f7fc ff04 	bl	800689e <__retarget_lock_acquire_recursive>
 8009a96:	89ab      	ldrh	r3, [r5, #12]
 8009a98:	071b      	lsls	r3, r3, #28
 8009a9a:	d501      	bpl.n	8009aa0 <_vfiprintf_r+0x34>
 8009a9c:	692b      	ldr	r3, [r5, #16]
 8009a9e:	b99b      	cbnz	r3, 8009ac8 <_vfiprintf_r+0x5c>
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f000 f938 	bl	8009d18 <__swsetup_r>
 8009aa8:	b170      	cbz	r0, 8009ac8 <_vfiprintf_r+0x5c>
 8009aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aac:	07dc      	lsls	r4, r3, #31
 8009aae:	d504      	bpl.n	8009aba <_vfiprintf_r+0x4e>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	b01d      	add	sp, #116	@ 0x74
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	0598      	lsls	r0, r3, #22
 8009abe:	d4f7      	bmi.n	8009ab0 <_vfiprintf_r+0x44>
 8009ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ac2:	f7fc feed 	bl	80068a0 <__retarget_lock_release_recursive>
 8009ac6:	e7f3      	b.n	8009ab0 <_vfiprintf_r+0x44>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009acc:	2320      	movs	r3, #32
 8009ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad6:	2330      	movs	r3, #48	@ 0x30
 8009ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c88 <_vfiprintf_r+0x21c>
 8009adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ae0:	f04f 0901 	mov.w	r9, #1
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	469a      	mov	sl, r3
 8009ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aec:	b10a      	cbz	r2, 8009af2 <_vfiprintf_r+0x86>
 8009aee:	2a25      	cmp	r2, #37	@ 0x25
 8009af0:	d1f9      	bne.n	8009ae6 <_vfiprintf_r+0x7a>
 8009af2:	ebba 0b04 	subs.w	fp, sl, r4
 8009af6:	d00b      	beq.n	8009b10 <_vfiprintf_r+0xa4>
 8009af8:	465b      	mov	r3, fp
 8009afa:	4622      	mov	r2, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ffa2 	bl	8009a48 <__sfputs_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	f000 80a7 	beq.w	8009c58 <_vfiprintf_r+0x1ec>
 8009b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b0c:	445a      	add	r2, fp
 8009b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b10:	f89a 3000 	ldrb.w	r3, [sl]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 809f 	beq.w	8009c58 <_vfiprintf_r+0x1ec>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b24:	f10a 0a01 	add.w	sl, sl, #1
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	9307      	str	r3, [sp, #28]
 8009b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b32:	4654      	mov	r4, sl
 8009b34:	2205      	movs	r2, #5
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	4853      	ldr	r0, [pc, #332]	@ (8009c88 <_vfiprintf_r+0x21c>)
 8009b3c:	f7f6 fb68 	bl	8000210 <memchr>
 8009b40:	9a04      	ldr	r2, [sp, #16]
 8009b42:	b9d8      	cbnz	r0, 8009b7c <_vfiprintf_r+0x110>
 8009b44:	06d1      	lsls	r1, r2, #27
 8009b46:	bf44      	itt	mi
 8009b48:	2320      	movmi	r3, #32
 8009b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b4e:	0713      	lsls	r3, r2, #28
 8009b50:	bf44      	itt	mi
 8009b52:	232b      	movmi	r3, #43	@ 0x2b
 8009b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b58:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b5e:	d015      	beq.n	8009b8c <_vfiprintf_r+0x120>
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	4654      	mov	r4, sl
 8009b64:	2000      	movs	r0, #0
 8009b66:	f04f 0c0a 	mov.w	ip, #10
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b70:	3b30      	subs	r3, #48	@ 0x30
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d94b      	bls.n	8009c0e <_vfiprintf_r+0x1a2>
 8009b76:	b1b0      	cbz	r0, 8009ba6 <_vfiprintf_r+0x13a>
 8009b78:	9207      	str	r2, [sp, #28]
 8009b7a:	e014      	b.n	8009ba6 <_vfiprintf_r+0x13a>
 8009b7c:	eba0 0308 	sub.w	r3, r0, r8
 8009b80:	fa09 f303 	lsl.w	r3, r9, r3
 8009b84:	4313      	orrs	r3, r2
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	46a2      	mov	sl, r4
 8009b8a:	e7d2      	b.n	8009b32 <_vfiprintf_r+0xc6>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	1d19      	adds	r1, r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	9103      	str	r1, [sp, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfbb      	ittet	lt
 8009b98:	425b      	neglt	r3, r3
 8009b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b9e:	9307      	strge	r3, [sp, #28]
 8009ba0:	9307      	strlt	r3, [sp, #28]
 8009ba2:	bfb8      	it	lt
 8009ba4:	9204      	strlt	r2, [sp, #16]
 8009ba6:	7823      	ldrb	r3, [r4, #0]
 8009ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009baa:	d10a      	bne.n	8009bc2 <_vfiprintf_r+0x156>
 8009bac:	7863      	ldrb	r3, [r4, #1]
 8009bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bb0:	d132      	bne.n	8009c18 <_vfiprintf_r+0x1ac>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	1d1a      	adds	r2, r3, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	9203      	str	r2, [sp, #12]
 8009bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bbe:	3402      	adds	r4, #2
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c98 <_vfiprintf_r+0x22c>
 8009bc6:	7821      	ldrb	r1, [r4, #0]
 8009bc8:	2203      	movs	r2, #3
 8009bca:	4650      	mov	r0, sl
 8009bcc:	f7f6 fb20 	bl	8000210 <memchr>
 8009bd0:	b138      	cbz	r0, 8009be2 <_vfiprintf_r+0x176>
 8009bd2:	9b04      	ldr	r3, [sp, #16]
 8009bd4:	eba0 000a 	sub.w	r0, r0, sl
 8009bd8:	2240      	movs	r2, #64	@ 0x40
 8009bda:	4082      	lsls	r2, r0
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	3401      	adds	r4, #1
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be6:	4829      	ldr	r0, [pc, #164]	@ (8009c8c <_vfiprintf_r+0x220>)
 8009be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bec:	2206      	movs	r2, #6
 8009bee:	f7f6 fb0f 	bl	8000210 <memchr>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d03f      	beq.n	8009c76 <_vfiprintf_r+0x20a>
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <_vfiprintf_r+0x224>)
 8009bf8:	bb1b      	cbnz	r3, 8009c42 <_vfiprintf_r+0x1d6>
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	3307      	adds	r3, #7
 8009bfe:	f023 0307 	bic.w	r3, r3, #7
 8009c02:	3308      	adds	r3, #8
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c08:	443b      	add	r3, r7
 8009c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c0c:	e76a      	b.n	8009ae4 <_vfiprintf_r+0x78>
 8009c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c12:	460c      	mov	r4, r1
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7a8      	b.n	8009b6a <_vfiprintf_r+0xfe>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	3401      	adds	r4, #1
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	f04f 0c0a 	mov.w	ip, #10
 8009c24:	4620      	mov	r0, r4
 8009c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c2a:	3a30      	subs	r2, #48	@ 0x30
 8009c2c:	2a09      	cmp	r2, #9
 8009c2e:	d903      	bls.n	8009c38 <_vfiprintf_r+0x1cc>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0c6      	beq.n	8009bc2 <_vfiprintf_r+0x156>
 8009c34:	9105      	str	r1, [sp, #20]
 8009c36:	e7c4      	b.n	8009bc2 <_vfiprintf_r+0x156>
 8009c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7f0      	b.n	8009c24 <_vfiprintf_r+0x1b8>
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	462a      	mov	r2, r5
 8009c48:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <_vfiprintf_r+0x228>)
 8009c4a:	a904      	add	r1, sp, #16
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7fb febd 	bl	80059cc <_printf_float>
 8009c52:	4607      	mov	r7, r0
 8009c54:	1c78      	adds	r0, r7, #1
 8009c56:	d1d6      	bne.n	8009c06 <_vfiprintf_r+0x19a>
 8009c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x1fe>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x1fe>
 8009c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c66:	f7fc fe1b 	bl	80068a0 <__retarget_lock_release_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	065b      	lsls	r3, r3, #25
 8009c6e:	f53f af1f 	bmi.w	8009ab0 <_vfiprintf_r+0x44>
 8009c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c74:	e71e      	b.n	8009ab4 <_vfiprintf_r+0x48>
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <_vfiprintf_r+0x228>)
 8009c7e:	a904      	add	r1, sp, #16
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7fc f93b 	bl	8005efc <_printf_i>
 8009c86:	e7e4      	b.n	8009c52 <_vfiprintf_r+0x1e6>
 8009c88:	0800b405 	.word	0x0800b405
 8009c8c:	0800b40f 	.word	0x0800b40f
 8009c90:	080059cd 	.word	0x080059cd
 8009c94:	08009a49 	.word	0x08009a49
 8009c98:	0800b40b 	.word	0x0800b40b

08009c9c <__swbuf_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	460e      	mov	r6, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	b118      	cbz	r0, 8009cae <__swbuf_r+0x12>
 8009ca6:	6a03      	ldr	r3, [r0, #32]
 8009ca8:	b90b      	cbnz	r3, 8009cae <__swbuf_r+0x12>
 8009caa:	f7fc fcdf 	bl	800666c <__sinit>
 8009cae:	69a3      	ldr	r3, [r4, #24]
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	071a      	lsls	r2, r3, #28
 8009cb6:	d501      	bpl.n	8009cbc <__swbuf_r+0x20>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	b943      	cbnz	r3, 8009cce <__swbuf_r+0x32>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f82a 	bl	8009d18 <__swsetup_r>
 8009cc4:	b118      	cbz	r0, 8009cce <__swbuf_r+0x32>
 8009cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cca:	4638      	mov	r0, r7
 8009ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	1a98      	subs	r0, r3, r2
 8009cd4:	6963      	ldr	r3, [r4, #20]
 8009cd6:	b2f6      	uxtb	r6, r6
 8009cd8:	4283      	cmp	r3, r0
 8009cda:	4637      	mov	r7, r6
 8009cdc:	dc05      	bgt.n	8009cea <__swbuf_r+0x4e>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7ff fa47 	bl	8009174 <_fflush_r>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d1ed      	bne.n	8009cc6 <__swbuf_r+0x2a>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	6022      	str	r2, [r4, #0]
 8009cf6:	701e      	strb	r6, [r3, #0]
 8009cf8:	6962      	ldr	r2, [r4, #20]
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d004      	beq.n	8009d0a <__swbuf_r+0x6e>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d5e1      	bpl.n	8009cca <__swbuf_r+0x2e>
 8009d06:	2e0a      	cmp	r6, #10
 8009d08:	d1df      	bne.n	8009cca <__swbuf_r+0x2e>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7ff fa31 	bl	8009174 <_fflush_r>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d0d9      	beq.n	8009cca <__swbuf_r+0x2e>
 8009d16:	e7d6      	b.n	8009cc6 <__swbuf_r+0x2a>

08009d18 <__swsetup_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <__swsetup_r+0xa8>)
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	460c      	mov	r4, r1
 8009d22:	b118      	cbz	r0, 8009d2c <__swsetup_r+0x14>
 8009d24:	6a03      	ldr	r3, [r0, #32]
 8009d26:	b90b      	cbnz	r3, 8009d2c <__swsetup_r+0x14>
 8009d28:	f7fc fca0 	bl	800666c <__sinit>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	0719      	lsls	r1, r3, #28
 8009d32:	d422      	bmi.n	8009d7a <__swsetup_r+0x62>
 8009d34:	06da      	lsls	r2, r3, #27
 8009d36:	d407      	bmi.n	8009d48 <__swsetup_r+0x30>
 8009d38:	2209      	movs	r2, #9
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e033      	b.n	8009db0 <__swsetup_r+0x98>
 8009d48:	0758      	lsls	r0, r3, #29
 8009d4a:	d512      	bpl.n	8009d72 <__swsetup_r+0x5a>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d4e:	b141      	cbz	r1, 8009d62 <__swsetup_r+0x4a>
 8009d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d54:	4299      	cmp	r1, r3
 8009d56:	d002      	beq.n	8009d5e <__swsetup_r+0x46>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f7fd fc01 	bl	8007560 <_free_r>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6063      	str	r3, [r4, #4]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	b94b      	cbnz	r3, 8009d92 <__swsetup_r+0x7a>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d88:	d003      	beq.n	8009d92 <__swsetup_r+0x7a>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f883 	bl	8009e98 <__smakebuf_r>
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	f013 0201 	ands.w	r2, r3, #1
 8009d9a:	d00a      	beq.n	8009db2 <__swsetup_r+0x9a>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60a2      	str	r2, [r4, #8]
 8009da0:	6962      	ldr	r2, [r4, #20]
 8009da2:	4252      	negs	r2, r2
 8009da4:	61a2      	str	r2, [r4, #24]
 8009da6:	6922      	ldr	r2, [r4, #16]
 8009da8:	b942      	cbnz	r2, 8009dbc <__swsetup_r+0xa4>
 8009daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dae:	d1c5      	bne.n	8009d3c <__swsetup_r+0x24>
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	0799      	lsls	r1, r3, #30
 8009db4:	bf58      	it	pl
 8009db6:	6962      	ldrpl	r2, [r4, #20]
 8009db8:	60a2      	str	r2, [r4, #8]
 8009dba:	e7f4      	b.n	8009da6 <__swsetup_r+0x8e>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7f7      	b.n	8009db0 <__swsetup_r+0x98>
 8009dc0:	20000020 	.word	0x20000020

08009dc4 <_raise_r>:
 8009dc4:	291f      	cmp	r1, #31
 8009dc6:	b538      	push	{r3, r4, r5, lr}
 8009dc8:	4605      	mov	r5, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	d904      	bls.n	8009dd8 <_raise_r+0x14>
 8009dce:	2316      	movs	r3, #22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dda:	b112      	cbz	r2, 8009de2 <_raise_r+0x1e>
 8009ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de0:	b94b      	cbnz	r3, 8009df6 <_raise_r+0x32>
 8009de2:	4628      	mov	r0, r5
 8009de4:	f000 f830 	bl	8009e48 <_getpid_r>
 8009de8:	4622      	mov	r2, r4
 8009dea:	4601      	mov	r1, r0
 8009dec:	4628      	mov	r0, r5
 8009dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df2:	f000 b817 	b.w	8009e24 <_kill_r>
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d00a      	beq.n	8009e10 <_raise_r+0x4c>
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	d103      	bne.n	8009e06 <_raise_r+0x42>
 8009dfe:	2316      	movs	r3, #22
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7e7      	b.n	8009dd6 <_raise_r+0x12>
 8009e06:	2100      	movs	r1, #0
 8009e08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4798      	blx	r3
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7e0      	b.n	8009dd6 <_raise_r+0x12>

08009e14 <raise>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <raise+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfd3 	b.w	8009dc4 <_raise_r>
 8009e1e:	bf00      	nop
 8009e20:	20000020 	.word	0x20000020

08009e24 <_kill_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	@ (8009e44 <_kill_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f8 f831 	bl	8001e98 <_kill>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_kill_r+0x1c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_kill_r+0x1c>
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20000884 	.word	0x20000884

08009e48 <_getpid_r>:
 8009e48:	f7f8 b81e 	b.w	8001e88 <_getpid>

08009e4c <__swhatbuf_r>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	460c      	mov	r4, r1
 8009e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e54:	2900      	cmp	r1, #0
 8009e56:	b096      	sub	sp, #88	@ 0x58
 8009e58:	4615      	mov	r5, r2
 8009e5a:	461e      	mov	r6, r3
 8009e5c:	da0d      	bge.n	8009e7a <__swhatbuf_r+0x2e>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e64:	f04f 0100 	mov.w	r1, #0
 8009e68:	bf14      	ite	ne
 8009e6a:	2340      	movne	r3, #64	@ 0x40
 8009e6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e70:	2000      	movs	r0, #0
 8009e72:	6031      	str	r1, [r6, #0]
 8009e74:	602b      	str	r3, [r5, #0]
 8009e76:	b016      	add	sp, #88	@ 0x58
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	466a      	mov	r2, sp
 8009e7c:	f000 f848 	bl	8009f10 <_fstat_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	dbec      	blt.n	8009e5e <__swhatbuf_r+0x12>
 8009e84:	9901      	ldr	r1, [sp, #4]
 8009e86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e8e:	4259      	negs	r1, r3
 8009e90:	4159      	adcs	r1, r3
 8009e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e96:	e7eb      	b.n	8009e70 <__swhatbuf_r+0x24>

08009e98 <__smakebuf_r>:
 8009e98:	898b      	ldrh	r3, [r1, #12]
 8009e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e9c:	079d      	lsls	r5, r3, #30
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	d507      	bpl.n	8009eb4 <__smakebuf_r+0x1c>
 8009ea4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	2301      	movs	r3, #1
 8009eae:	6163      	str	r3, [r4, #20]
 8009eb0:	b003      	add	sp, #12
 8009eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb4:	ab01      	add	r3, sp, #4
 8009eb6:	466a      	mov	r2, sp
 8009eb8:	f7ff ffc8 	bl	8009e4c <__swhatbuf_r>
 8009ebc:	9f00      	ldr	r7, [sp, #0]
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7fd fbc0 	bl	8007648 <_malloc_r>
 8009ec8:	b948      	cbnz	r0, 8009ede <__smakebuf_r+0x46>
 8009eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ece:	059a      	lsls	r2, r3, #22
 8009ed0:	d4ee      	bmi.n	8009eb0 <__smakebuf_r+0x18>
 8009ed2:	f023 0303 	bic.w	r3, r3, #3
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	e7e2      	b.n	8009ea4 <__smakebuf_r+0xc>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	6020      	str	r0, [r4, #0]
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	9b01      	ldr	r3, [sp, #4]
 8009eea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eee:	b15b      	cbz	r3, 8009f08 <__smakebuf_r+0x70>
 8009ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f000 f81d 	bl	8009f34 <_isatty_r>
 8009efa:	b128      	cbz	r0, 8009f08 <__smakebuf_r+0x70>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	f043 0301 	orr.w	r3, r3, #1
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	431d      	orrs	r5, r3
 8009f0c:	81a5      	strh	r5, [r4, #12]
 8009f0e:	e7cf      	b.n	8009eb0 <__smakebuf_r+0x18>

08009f10 <_fstat_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	@ (8009f30 <_fstat_r+0x20>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	602b      	str	r3, [r5, #0]
 8009f1e:	f7f8 f81b 	bl	8001f58 <_fstat>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d102      	bne.n	8009f2c <_fstat_r+0x1c>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b103      	cbz	r3, 8009f2c <_fstat_r+0x1c>
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000884 	.word	0x20000884

08009f34 <_isatty_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	@ (8009f50 <_isatty_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f8 f81a 	bl	8001f78 <_isatty>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_isatty_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_isatty_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20000884 	.word	0x20000884

08009f54 <_init>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr

08009f60 <_fini>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr
